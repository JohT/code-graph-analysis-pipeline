"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier,getTimestamp",2,9,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getType,getSequenceNumber",3,6,""
"org.axonframework.messaging.ResultMessage",9,"exceptionResult,isExceptional",2,6,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,5,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,5,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,3,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,3,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getAggregateIdentifier,getType,getSequenceNumber",3,3,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"withGapsTruncatedAt,getIndex,newInstance,getGaps,advanceTo",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initialize,getAggregateRoot,initSequence",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getAggregateIdentifier,getSequenceNumber",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken,withTrackingToken",2,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.messaging.ResultMessage",10,"exceptionResult,isExceptional",2,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",160,"lambda$registerTransactionManager$65,lambda$null$38,registerPooledStreamingEventProcessorConfiguration,subscribingEventProcessor,pooledStreamingEventProcessor,lambda$static$0,lambda$null$44,lambda$registerDeadLetterPolicy$70,lambda$registerHandlerInterceptor$62,trackingEventProcessor,registerDeadLetterQueue,defaultExecutor,trackingEventProcessorConfig,lambda$null$33,lambda$registerSequencingPolicy$63,lambda$static$1,lambda$registerTrackingEventProcessorConfiguration$67,lambda$null$45,registerTrackingEventProcessorConfiguration,lambda$null$35,lambda$null$43,lambda$null$13,lambda$null$34,lambda$pooledStreamingEventProcessor$71,annotatedProcessingGroupOfType,lambda$registerDeadLetterQueue$69,lambda$pooledStreamingEventProcessor$72,lambda$registerPooledStreamingEventProcessor$68,lambda$null$20,lambda$null$21,lambda$registerRollbackConfiguration$64,lambda$null$28,lambda$annotatedProcessingGroupOfType$73,lambda$null$37,lambda$registerTrackingEventProcessorConfiguration$66,lambda$new$26,lambda$selectProcessingGroupByType$30,lambda$new$19,initializeProcessors,tokenStore,rollbackConfiguration,lambda$new$10,lambda$registerEventHandlerInvokers$36,lambda$initializeProcessors$29,lambda$registerEventHandlerInvokers$39,buildEventProcessor,retrieveHandlerDefinition,registerDefaultDeadLetterQueueIfPresent,selectProcessingGroupByType,lambda$new$4,transactionManager,lambda$new$5,lambda$registerSubscribingEventProcessor$60,lambda$eventProcessors$50,processorNameForProcessingGroup,lambda$new$27,lambda$registerTrackingEventProcessor$54,lambda$registerSagaManagers$46,lambda$new$16,lambda$new$24,lambda$buildEventProcessor$47,addInterceptors,lambda$new$18,lambda$new$8,lambda$deadLetteringInvoker$41,noTepCustomization,simpleInvoker,registerSagaManagers,lambda$new$17,lambda$addInterceptors$48,deadLetteringInvoker,errorHandler,lambda$registerDefaultDeadLetterQueueIfPresent$40,packageOfObject,registerEventHandlerInvokers,lambda$new$7,registerTrackingEventProcessor,sequencingPolicy,messageMonitor,lambda$new$22,lambda$registerTrackingEventProcessor$55,lambda$new$3,lambda$new$9,lambda$new$14,lambda$new$25,registerEventProcessor,lambda$registerListenerInvocationErrorHandler$53,deadLetterPolicy,lambda$usingSubscribingEventProcessors$57,eventProcessors,lambda$registerEventHandler$52,lambda$registerErrorHandler$61,lambda$new$12,noPsepCustomization,lambda$registerEventHandlerInvokers$32,deadLetterQueue,lambda$new$2,lambda$sagaConfigurations$51,lambda$selectProcessingGroupByType$31,lambda$new$11,lambda$deadLetteringInvoker$42,lambda$addInterceptors$49,listenerInvocationErrorHandler,lambda$new$23,validateConfigInitialization,lambda$new$15,lambda$usingPooledStreamingEventProcessors$59,lambda$new$6,lambda$registerTokenStore$56,lambda$usingTrackingEventProcessors$58,defaultEventProcessor",111,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$defaultSnapshotter$26,lambda$prepareMessageHandlerRegistrars$47,lambda$null$25,lambda$null$31,lambda$null$32,lambda$invokeInitHandlers$48,lambda$null$12,lambda$prepareModules$45,lambda$invokeStartHandlers$49,lambda$invokeShutdownHandlers$50,lambda$null$36,lambda$null$46,lambda$invokeLifecycleHandlers$52,lambda$invokeLifecycleHandlers$51,lambda$onStart$53,lambda$null$35,invokeLifecycleHandlers,invokeInitHandlers,lambda$null$17,lambda$static$0,lambda$onShutdown$54,lambda$null$43,defaultUpcasterChain,defaultScopeAwareProvider,lambda$defaultHandlerDefinition$16,defaultQueryUpdateEmitter,defaultSerializer,lambda$registerMessageHandler$39,lambda$defaultResourceInjector$19,lambda$defaultSerializer$24,defaultQueryBus,defaultConfiguration,lambda$jpaConfiguration$5,registerModule,lambda$registerHandlerDefinition$44,lambda$defaultQueryGateway$11,lambda$defaultScopeAwareProvider$20,lambda$jpaConfiguration$6,defaultHandlerDefinition,lambda$eventProcessing$28,defaultSpanFactory,lambda$defaultQueryUpdateEmitter$14,defaultEventGateway,lambda$configureEmbeddedEventStore$42,registerCommandHandler,verifyIdentifierFactory,registerQueryHandler,eventProcessing,lambda$registerCommandHandler$33,lambda$defaultQueryBus$13,lambda$registerMessageHandler$40,lambda$configureMessageMonitor$29,invokeShutdownHandlers,lambda$new$1,lambda$defaultParameterResolverFactory$15,registerComponent,defaultResourceInjector,lambda$registerMessageHandler$38,jpaConfiguration,lambda$registerQueryHandler$37,lambda$defaultEventBus$22,defaultQueryGateway,lambda$new$3,lambda$new$2,lambda$registerMessageHandler$41,defaultSnapshotter,lambda$registerCommandHandler$30,defaultParameterResolverFactory,prepareModules,lambda$defaultCommandGateway$10,lambda$defaultEventGateway$23,lambda$eventProcessing$27,prepareMessageHandlerRegistrars,defaultCommandGateway,lambda$jpaConfiguration$7,defaultCommandBus,lambda$defaultDeadlineManager$21,retrieveHandlerDefinition,lambda$defaultCommandBus$18,defaultDeadlineManager,defaultEventBus,lambda$jpaConfiguration$8,lambda$defaultConfiguration$4,lambda$jpaConfiguration$9,lambda$registerQueryHandler$34,defaultComponent",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"lambda$null$3,lambda$null$5,when,lambda$when$2,andGivenCurrentTime,buildResultValidator,detectIllegalStateChanges,whenTimeElapses,lambda$whenConstructing$4,lambda$buildResultValidator$9,lambda$whenInvoking$6,aggregateModel,lambda$when$7,ensureValuesEqual,whenTimeAdvancesTo,lambda$when$8,assertValidWorkingAggregateState,failIllegalStateChange,currentTime,handleDeadline,registerRepository,registerRepositoryProvider,given,clearGivenWhenState,lambda$givenState$0,getParameterResolverFactory,getRepositoryProvider,registerAggregateCommandHandlers,getHandlerDefinition,registerFieldFilter,useStateStorage,lambda$andGivenCommands$1,andGiven,andGivenCommands,givenCommands,ensureRepositoryConfiguration,registerCommandHandler,finalizeConfiguration,executeAtSimulatedTime",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectExceptionMessage,expectTriggeredDeadlines,verifyPayloadEquality,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$3,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$2,expectTriggeredDeadlinesMatching,lambda$expectScheduledDeadlineWithName$0,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectNoScheduledDeadlineWithName$4,expectExceptionDetails,recordException,expectEvents,lambda$expectScheduledDeadlineWithName$1,expectResultMessagePayload,expectResultMessageMatching,expectException,verifyMetaDataEquality,lambda$expectNoScheduledDeadlineMatching$5",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"expectTriggeredDeadlines,expectTriggeredDeadlinesMatching,lambda$expectScheduledDeadlineWithName$1,lambda$registerStartRecordingCallback$0,lambda$expectNoScheduledDeadlineMatching$6,expectScheduledDeadlineMatching,expectScheduledEventMatching,lambda$expectNoScheduledDeadlineMatching$4,expectNoScheduledEventMatching,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$3,lambda$expectNoScheduledDeadlineWithName$5,lambda$expectNoScheduledDeadlineWithName$7,lambda$expectScheduledDeadlineWithName$2",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$1500,access$1100,access$400,access$600,access$500,access$900,access$800,invokeShutdownHandlers,access$1200,access$200,access$1300,access$1400,access$300,invokeStartHandlers,access$1000,defaultComponent,access$700",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"lambda$registerLifecycleHandler$2,lambda$getComponent$1,lambda$null$0,registerLifecycleHandler,isEarlierPhaseDuringStartUp,isEarlierPhaseDuringShutdown",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"startRecording,registerStartRecordingCallback",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"registerFieldFilter,registerCommandGateway,getCommandBus,lambda$null$0,lambda$handleInSaga$1,timeCorrectedEventMessage,registerResource,givenAggregate,getParameterResolverFactory,getPublisherFor,getResourceInjector,getHandlerDefinition,currentTime,handleInSaga,handleDeadline,ensureSagaResourcesInitialized",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"recordException,assertValidRecording",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$700,access$900,access$600,access$602,access$800",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"onRollback,lambda$rollback$7,lambda$start$0,lambda$rollback$8,phase,lambda$start$1,setPhase,delegateAfterCommitToParent,changePhase,addHandler,commitAsRoot,setRollbackCause,notifyHandlers,commitAsNested,lambda$start$3,lambda$commit$5,lambda$commit$4,lambda$null$2,lambda$commitAsNested$6",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"resetTokens,releaseSegment,singleStatusUpdater,lambda$null$1,lambda$new$0,lambda$new$2,lambda$getTokenStoreIdentifier$3,isRunning,statusUpdater,lambda$resetTokens$5,lambda$null$11,lambda$null$8,lambda$singleStatusUpdater$12,supportsReset,lambda$resetTokens$6,start,shutdownAsync,lambda$resetTokens$10,lambda$statusUpdater$13,spawnWorker,lambda$calculateIdentifier$4,lambda$null$9,calculateIdentifier,lambda$null$7",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"lambda$toLetter$8,sequenceSize,findNextDeadLetter,lambda$enqueue$2,lambda$clear$13,findFirstLetterOfEachAvailableSequence,lambda$amountOfSequences$16,evict,lambda$enqueue$0,toStringSequenceIdentifier,entityManager,isFull,toLetter,lambda$evict$4,lambda$claimDeadLetter$12,amountOfSequences,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$toLetter$7,getNextIndexForSequence,lambda$findNextDeadLetter$11,claimDeadLetter,lambda$deadLetters$6,processLetterAndFollowing,lambda$sequenceSize$14,getProcessingStartedLimit,lambda$deadLetterSequence$5,lambda$getMaxIndexForSequence$17,lambda$processLetterAndFollowing$9,lambda$enqueue$3,getMaxIndexForSequence,lambda$enqueue$1,requeue,lambda$size$15",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$enqueue$2,toStringSequenceIdentifier,amountOfSequences,claimDeadLetter,getMaxIndexForSequence,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$claimDeadLetter$12,lambda$findNextDeadLetter$11,isFull,getProcessingStartedLimit,lambda$processLetterAndFollowing$9,lambda$deadLetterSequence$5,lambda$enqueue$3,lambda$clear$13,getNextIndexForSequence,lambda$toLetter$8,findFirstLetterOfEachAvailableSequence,toLetter,entityManager,lambda$toLetter$7,evict,lambda$size$15,lambda$evict$4,lambda$enqueue$1,lambda$enqueue$0,findNextDeadLetter,lambda$sequenceSize$14,requeue,lambda$amountOfSequences$16,lambda$deadLetters$6,lambda$getMaxIndexForSequence$17,processLetterAndFollowing,sequenceSize",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$registerUpdateHandler$4,emitError,lambda$doCompleteExceptionally$19,lambda$registerUpdateHandler$1,doCompleteExceptionally,lambda$registerDispatchInterceptor$11,doEmit,lambda$emit$5,lambda$null$13,lambda$null$20,lambda$doComplete$17,lambda$null$6,runOnAfterCommitOrNow,lambda$null$16,lambda$doEmit$12,lambda$null$18,lambda$emit$8,lambda$complete$9,payloadMatchesQueryResponseType,lambda$runOnAfterCommitOrNow$21,lambda$payloadMatchesQueryResponseType$15,lambda$doEmit$14,inStartedPhaseOfUnitOfWork,lambda$queryUpdateHandlerRegistered$0,lambda$completeExceptionally$10,lambda$null$7,intercept,doComplete,lambda$registerUpdateHandler$3,lambda$registerUpdateHandler$2",31,1,""
"org.axonframework.test.saga.SagaTestFixture",37,"access$300,currentTime,handleInSaga",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$handle$6,createMessage,rootType,publish,lambda$handle$4,lambda$execute$2,lambda$andThenApply$13,handle,doApply,registerRoot,lambda$invoke$1,lambda$registerRoot$0,initialize,lambda$handle$3,applyMessageOrPayload,lambda$findHandlerAndHandleCommand$10,lambda$handle$5,andThen,initSequence,findHandlerAndHandleCommand,lambda$null$8,publishOnEventBus,lambda$findHandlerAndHandleCommand$9,lambda$doApply$11,lambda$handle$7,lambda$createMessage$12",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"getModules,eventBus,lambda$eventProcessingConfiguration$3,lambda$resourceInjector$2,lambda$aggregateConfiguration$7,lambda$findModules$0,lambda$aggregateConfiguration$6,lambda$findModules$1,lambda$eventProcessingConfiguration$4,lambda$getComponent$8,getComponent,findModules,aggregateConfiguration,lambda$aggregateConfiguration$5",15,1,""
"org.axonframework.config.Configurer",29,"registerCommandHandler,lambda$configureMessageMonitor$0,buildConfiguration,eventProcessing,registerComponent,configureMessageMonitor,configureAggregate,registerQueryHandler,lambda$configureMessageMonitor$1,registerModule",11,1,""
"org.axonframework.config.Configuration",27,"handlerDefinition,messageMonitor,spanFactory,eventBus,parameterResolverFactory,correlationDataProviders,getComponent",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$handle$6,lambda$new$0,lambda$null$3,canHandle,lambda$execute$2,lambda$null$5,handle,lambda$handle$7,lambda$canHandle$4,getAssociationValues,lambda$handle$8,lambda$invoke$1",13,1,""
"org.axonframework.config.Configuration",25,"handlerDefinition,upcasterChain,messageMonitor,spanFactory,eventBus,parameterResolverFactory,scopeAwareProvider,snapshotFilter,repository,eventStore,queryBus,correlationDataProviders,getComponent,serializer,messageSerializer,findModules,eventSerializer,commandBus",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"getLastTouchedSequence,lambda$process$3,lambda$clear$7,maximumSequenceSizeReached,toIdentifier,maximumNumberOfSequencesReached,evict,lambda$requeue$2,lambda$evict$1,lambda$process$6,requeue,lambda$process$5,builder,lambda$process$4,isFull,contains,lambda$enqueue$0",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$registerDispatchInterceptor$8,lambda$query$2,lambda$streamingQuery$3,lambda$query$0,lambda$streamingQuery$4,lambda$query$1,processInterceptors,getSubscriptionQueryMessage,getSubscriptionQueryResult,lambda$getSubscriptionQueryResult$5,lambda$getSubscriptionQueryResult$7,lambda$getSubscriptionQueryResult$6",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"markError,unmarkError,isErrorState,isCaughtUp,advancedTo,caughtUp,getSegment",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"addDetailsFromObject,lambda$addDetailsFromObject$515c35f2$1,shutdown,lambda$addDetailsFromObject$98640057$1,publishWithRevision,createMessage,publishEventMessage,lambda$publishEventMessage$0,lambda$addDetailsFromEvent$8cace316$1,lambda$addDetailsFromEvent$1f732a71$1,addDetailsFromEvent,publish,schedule",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$1,loadToken,lambda$fetchAvailableSegments$2,lambda$fetchSegments$0,getConfig,validateSegment,fetchSegments,initializeTokenSegments",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"validateSegment,getConfig,lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$2,loadToken,fetchSegments,lambda$fetchAvailableSegments$1,initializeTokenSegments,lambda$fetchSegments$0",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"lambda$registerDispatchInterceptor$3,processDispatchInterceptors,lambda$cancelSchedule$0,lambda$cancelAllWithinScope$2,advanceToNextTrigger,schedule,consumeDeadline,advanceTimeTo,lambda$consumeDeadline$5,lambda$registerHandlerInterceptor$4,lambda$cancelAll$1",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"advancedTo,createReplayToken,context,getTokenAtReset,isReplay,lambda$isReplay$0,lambda$getTokenAtReset$2,lambda$replayContext$1,replayContext",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$registerDispatchInterceptor$4,injectAggregateIdentifier,lambda$doAppendEvents$1,lambda$doAppendEvents$2,doAppendEvents,lambda$publish$0,openStream,lambda$subscribe$3",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"lambda$registerHandlerInterceptor$7,createRepository,initializeInvokerThreads,dispatch,lambda$dispatch$2,lambda$initializeInvokerThreads$1,initializePublisherThreads,lambda$registerDispatchInterceptor$6,lambda$subscribe$5,lambda$doDispatch$3,doDispatch,lambda$initializePublisherThreads$0,lambda$subscribe$4",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"initActiveIfRequired,nextSequenceNumber,next",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"markError,isErrorState,advancedTo",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isMerging,isErrorState,isReplaying,getTrackingToken,isCaughtUp,getError,getResetPosition,mergeCompletedPosition,getCurrentPosition,getSegment,split",11,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"storeSnapshot,getEventSerializer,readEventData,getSnapshotSerializer,isFirstDomainEvent,readSnapshotData,appendEvents,lambda$readSnapshot$1,buildExceptionMessage,lambda$readSnapshot$0",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"lambda$getLastSequenceNumber$0,next,hasNext",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"stopTailingGlobalStream,peekPrivateStream,lastToken,nextAvailable,lambda$closePrivateStream$0,behindGlobalCache,closePrivateStream,nextNode,peek,peekGlobalStream",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"lastToken,behindGlobalCache,peekGlobalStream,peekPrivateStream,nextNode,stopTailingGlobalStream,nextAvailable,closePrivateStream,peek,lambda$closePrivateStream$0",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"withMetaData,getPayload,findExceptionResult,isExceptional,andMetaData",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getSagaIdentifier,isActive,getAssociationValues,root",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getCurrentDateTime,getScheduledDeadlines,getTriggeredDeadlines",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$makeCurrent$0,lambda$recordException$1",2,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",18,"setIdFields,setDomainEventFields,setEventFields,sequenceSizeStatement,setTrackedEventFields,setDeadLetterFields",8,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"fetchSegments,initializeTokenSegments,lambda$storeToken$0,lambda$fetchSegments$1",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$0,stagedDomainEventMessages,lambda$readEvents$3,lambda$stagedDomainEventMessages$2,handleSnapshotReadingError",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"readNext,next",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$000,access$100",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$0,lambda$handle$3,lambda$handle$2,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"lambda$new$0,queryResultType,upperBound,unwrapType",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$getSpanMessage$4,lambda$createHandlerSpan$1,lambda$createDispatchSpan$2,lambda$getSpanMessage$3,lambda$createInternalSpan$7,lambda$null$6,lambda$null$5,lambda$createRootTrace$0,getSpanMessage,lambda$createInternalSpan$8",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$removeAll$2,purgeItems,lambda$get$1,lambda$containsKey$3,lambda$computeIfPresent$4,lambda$registerCacheEntryListener$0",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"ensureInitialized,initialize,processingGroup,lambda$initialize$1,lambda$ensureInitialized$3,lambda$eventProcessor$0,lambda$initialize$2",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$registerHandlerInterceptor$2,dispatchInterceptors,lambda$runOnPrepareCommitOrNow$0,lambda$registerDispatchInterceptor$1",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"doAdvance,mergePosition,lambda$mergePosition$1,lambda$mergePosition$0",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"messageSource,lambda$peekForMessages$2,lambda$doConsumeNext$1,doConsumeNext,peekForMessages,lambda$setOnAvailableCallback$5,lambda$skipMessagesWithPayloadTypeOf$3,lambda$setOnAvailableCallback$4,nextAvailable,lambda$new$0,skipMessagesWithPayloadTypeOf",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getTrackingToken,getSegment,split",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getTrackingToken,split,getSegment",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken,getSegment",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"handlerDefinition,spanFactory,eventBus,parameterResolverFactory,repository,eventStore,getComponent,commandBus",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatch,deadlineNameMatchesAll",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"getName,lambda$null$1,getSpanName,lambda$registerHandlerInterceptor$0,lambda$processInUnitOfWork$3,lambda$null$2,processInUnitOfWork",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"lowerSegmentToken,mergePosition,isMergeInProgress,position,upperSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"lowerBound,getTokenAtReset,createReplayToken,isReplay,position",6,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",16,"getSequenceIdentifier,getIdentifier,getSequenceIndex",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$handle$3,lambda$new$1,lambda$canHandle$2,lambda$new$0",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"optionalExceptionResult,withMetaData,andMetaData,isExceptional",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"publish,doApply,publishOnEventBus",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asResponseMessage,asNullableResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType,getData",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,routingKey",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"handle,lambda$handle$0,canHandle,prepareReset,lambda$canHandleType$2,lambda$canHandleType$3,lambda$canHandle$1,lambda$prepareReset$4",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"getType,andMetaData,getSequenceNumber,getAggregateIdentifier,withMetaData",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"andMetaData,trackingToken,withMetaData,withTrackingToken",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"hasNextAvailable,peek,close,setOnAvailableCallback,access$300,skipMessagesWithPayloadTypeOf",7,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",15,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getId,getSequenceIdentifier,getIndex",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getId,getSequenceIdentifier,getIndex",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"checkAndRethrowForExceptionOrError,typeMatches,parametersMatch,resolveParameterValues",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"canHandle,handle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isParameterizedTypeOfExpectedType,isWildcardTypeWithMatchingUpperBound,isGenericArrayType,isAssignableFrom,isTypeVariable,isWildcardType,isParameterizedType,isGenericAssignableFrom,isArray",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"getVersion,declaredType,type",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"isDeleted,version,initialize,identifier",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"access$500,getAggregate,newInstance,access$300,load,send,access$200",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createHandlerSpan$1,lambda$createInternalSpan$4,lambda$registerSpanAttributeProvider$5,lambda$createDispatchSpan$2,lambda$createInternalSpan$3,lambda$createRootTrace$0",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"lambda$registerDispatchInterceptor$2,updateFilter,intercept,dispatch,lambda$subscribe$1,shutdownDispatching,localSegment,lambda$dispatch$0,disconnect",9,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"lambda$asDeadlineMessage$1,asDeadlineMessage,andMetaData,lambda$asDeadlineMessage$0,withMetaData",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"performReset,lambda$performReset$2,flatten,delegates,canHandle,lambda$canHandleType$1,lambda$canHandle$0",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"andMetaData,optionalExceptionResult,withMetaData,exceptionDetails,isExceptional",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$0,lambda$new$1",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"types,type",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"loadAssociationValues,getSagaTypeName,removeAssociationValue,sagaEntryEntityName,storeAssociationValue,addNamedQueriesTo,serializedSagaAsString,serializedObjectType,createSagaEntry",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"serializedObjectType,loadAssociationValues,sagaEntryEntityName,addNamedQueriesTo,createSagaEntry,serializedSagaAsString,removeAssociationValue,storeAssociationValue,getSagaTypeName",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"withMetaData,getQueryName,andMetaData,getResponseType",4,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"handlerDefinition,resourceInjector,spanFactory,parameterResolverFactory,eventProcessingConfiguration",5,1,""
"org.axonframework.eventhandling.EventMessage",13,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"withTrackingToken,trackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"lowerSegmentToken,isLowerSegmentAdvanced,upperSegmentToken,isUpperSegmentAdvanced",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"invokeHandlers,lambda$new$0,lambda$canHandleType$1,performReset,hasHandler,sequencingPolicyMatchesSegment,sequenceIdentifier,detectList",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$0,lambda$readEvents$1",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"lambda$new$0,cause,diagnostics,enqueuedAt,message",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"addCachedAssociations,removeAssociationValueFromCache,lambda$removeAssociationValueFromCache$2,lambda$addCachedAssociations$3,lambda$deleteSaga$1,cacheKey,lambda$findSagas$0,lambda$updateSaga$4",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"validateIdentifier,canResolve,load,lambda$getAggregate$4,lambda$load$2,lambda$load$3,lambda$loadOrCreate$0,lambda$newInstance$1",8,1,""
"org.axonframework.test.saga.EventValidator",13,"handle,lambda$startRecording$0,unwrapEvent,createEqualToMatchers,assertPublishedEventsMatching",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"andMetaData,withMetaData,getCommandName",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"lambda$load$0,removeFromCache,load,newInstance,canResolve",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"withMetaData,andMetaData,getTimestamp",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"shutdown,buildJobDetail,lambda$schedule$0,initialize,buildTrigger,lambda$cancelSchedule$1,schedule",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"readEvents,lambda$readEvents$0",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"version,isLockHeld,getWrappedAggregate",3,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",12,"getResponseType",1,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"advanceTimeTo,initializeAt,getCurrentDateTime,advanceTimeBy",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"builder,subscribe,dispatch,registerDispatchInterceptor,registerHandlerInterceptor",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"lambda$send$0,asRuntime,send",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"load,loadOrCreate,newInstance",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"lambda$send$1,canResolve,load,send,lambda$send$2,lambda$send$0",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.queryhandling.QueryGateway",11,"subscriptionQuery,query,streamingQuery,scatterGather",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"andMetaData,withMetaData,getQueryName",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$800",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"registerConverters,doDeserialize,typeIdentifierOf,revisionOf,getConverter,classForType,typeForClass,doSerialize",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"registerConverters,builder,resolveClassName,getReader,getWriter,typeForClass,classForType",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"lambda$newInstance$0,load,newInstance,canResolve",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.test.saga.EventValidator",11,"assertPublishedEvents,startRecording,assertPublishedEventsMatching",3,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"doRegisterListener,createListenerAdapter,lambda$registerCacheEntryListener$0",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"snapshotFilter,repository,aggregateType,aggregateFactory",4,1,""
"org.axonframework.config.Configuration",10,"eventProcessingConfiguration,findModules",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored,canHandle,processInUnitOfWork",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData",1,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"nextAvailable,skipMessagesWithPayloadTypeOf",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"invokeHandlers,eventHandlers,performReset,sequencingPolicyMatchesSegment,sequenceIdentifier",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"processingStatus,resetTokens,lambda$isReplaying$0",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,serializePayload",2,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,getIdentifier,describeType,getMetaData,describeTo",5,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"getAll,isEmpty,contains,get,mergedWith",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"revisionOf,classForType,getSerializedType",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configurer",9,"registerComponent,configureEmbeddedEventStore",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"getGlobalIndex,next,offsetBy",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,compareTo,lambda$upperBound$1,lambda$covers$2,lambda$lowerBound$0",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"sourceId,createTailToken,createHeadToken,createTokenAt,createTokenSince",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"nextAvailable,alterToken",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$500,access$300,access$600,access$400",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$constructHandlerAttributesFor$1,prefixedKey,constructHandlerAttributesFor,lambda$null$0",4,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName,loadAssociations",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"access$100,hashes,equals,toString",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateType,aggregateFactory",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"cancelAllWithinScope,schedule",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2400,access$1900,access$2300,access$2200,access$2100",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$1900,access$2100",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"advancedTo,unwrap,lowerBound,upperBound",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"size,findSagas",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"canConvert,registerConverter",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getType,getSequenceNumber,getAggregateIdentifier",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"supportsReset,prepareReset,handle",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"advancedTo,getTokenForStream",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",7,"lambda$process$1,lambda$handle$0,lambda$registerHandlerInterceptor$2",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"handle,canHandle,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"handle,lambda$handle$0,canHandle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"getHandlerName,createProperty,lambda$getProperty$0,getProperty",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$subscribe$0,lambda$registerHandlerInterceptor$1",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"name,lambda$hashes$0",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"isHeldBy,queuedThreads,lock",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"prepareReset,handle",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"sourceId,openStream",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"lambda$unexpectedEvents$0,unexpectedEvents",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,resolveReturnValue",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$600,access$500",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$700",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$600,access$500",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.Repository",6,"load,newInstance,loadOrCreate",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$resolveAssociation$0,lambda$findHandlerMethods$1",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$0,lambda$findSagas$1",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getData,getType,getContentType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"checkForDeadlock,disposeIfUnused",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getIndex,getGaps",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"builder",1,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0,lambda$onMessageIngested$1",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"bytesFrom,convert",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
