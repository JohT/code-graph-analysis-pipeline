"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp,getIdentifier",2,9,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getType,getSequenceNumber",3,6,""
"org.axonframework.messaging.ResultMessage",9,"exceptionResult,isExceptional",2,6,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,5,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,5,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,3,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getAggregateIdentifier,getType,getSequenceNumber",3,3,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"getIndex,withGapsTruncatedAt,advanceTo,newInstance,getGaps",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.serialization.SimpleSerializedType",5,"emptyType",1,3,""
"org.axonframework.eventhandling.TrackerStatus",17,"getTrackingToken,getSegment,split",3,2,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initialize,initSequence,getAggregateRoot",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getAggregateIdentifier,getSequenceNumber",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken,withTrackingToken",2,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.messaging.ResultMessage",10,"exceptionResult,isExceptional",2,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",160,"lambda$new$4,subscribingEventProcessor,lambda$null$45,lambda$static$1,lambda$null$38,lambda$null$20,lambda$null$37,trackingEventProcessor,trackingEventProcessorConfig,lambda$null$35,lambda$static$0,lambda$pooledStreamingEventProcessor$71,lambda$null$34,pooledStreamingEventProcessor,lambda$null$13,lambda$null$33,defaultExecutor,annotatedProcessingGroupOfType,lambda$null$44,lambda$null$21,lambda$null$43,lambda$pooledStreamingEventProcessor$72,lambda$null$28,lambda$annotatedProcessingGroupOfType$73,lambda$new$3,lambda$sagaConfigurations$51,lambda$new$8,lambda$new$19,lambda$new$10,lambda$new$18,deadLetterPolicy,defaultEventProcessor,sequencingPolicy,lambda$registerTrackingEventProcessor$54,eventProcessors,lambda$new$16,lambda$registerListenerInvocationErrorHandler$53,registerSagaManagers,lambda$new$15,lambda$registerEventHandlerInvokers$39,lambda$new$6,lambda$registerSagaManagers$46,lambda$new$12,retrieveHandlerDefinition,lambda$registerPooledStreamingEventProcessor$68,lambda$registerDeadLetterPolicy$70,lambda$registerHandlerInterceptor$62,selectProcessingGroupByType,lambda$registerEventHandlerInvokers$32,messageMonitor,lambda$new$22,lambda$new$17,transactionManager,lambda$new$24,lambda$registerEventHandler$52,lambda$selectProcessingGroupByType$30,lambda$registerSequencingPolicy$63,noTepCustomization,lambda$usingPooledStreamingEventProcessors$59,lambda$registerTrackingEventProcessorConfiguration$67,lambda$new$7,registerPooledStreamingEventProcessorConfiguration,registerTrackingEventProcessorConfiguration,lambda$deadLetteringInvoker$41,lambda$initializeProcessors$29,tokenStore,deadLetterQueue,listenerInvocationErrorHandler,initializeProcessors,lambda$addInterceptors$48,addInterceptors,lambda$new$2,lambda$registerDefaultDeadLetterQueueIfPresent$40,simpleInvoker,lambda$new$26,lambda$deadLetteringInvoker$42,deadLetteringInvoker,lambda$new$9,packageOfObject,lambda$registerRollbackConfiguration$64,registerDefaultDeadLetterQueueIfPresent,lambda$registerErrorHandler$61,lambda$registerDeadLetterQueue$69,lambda$addInterceptors$49,lambda$new$11,lambda$selectProcessingGroupByType$31,lambda$new$5,lambda$registerTokenStore$56,registerDeadLetterQueue,processorNameForProcessingGroup,errorHandler,lambda$eventProcessors$50,lambda$buildEventProcessor$47,noPsepCustomization,lambda$registerTransactionManager$65,lambda$new$23,lambda$new$14,rollbackConfiguration,lambda$registerEventHandlerInvokers$36,lambda$registerSubscribingEventProcessor$60,lambda$registerTrackingEventProcessorConfiguration$66,lambda$new$25,registerEventProcessor,buildEventProcessor,validateConfigInitialization,registerTrackingEventProcessor,lambda$usingSubscribingEventProcessors$57,lambda$usingTrackingEventProcessors$58,registerEventHandlerInvokers,lambda$new$27,lambda$registerTrackingEventProcessor$55",111,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$null$12,lambda$null$17,lambda$static$0,lambda$defaultEventBus$22,lambda$null$43,prepareModules,jpaConfiguration,lambda$new$3,lambda$null$25,lambda$configureMessageMonitor$29,lambda$defaultCommandGateway$10,lambda$onShutdown$54,lambda$invokeInitHandlers$48,lambda$defaultSerializer$24,lambda$null$32,registerComponent,eventProcessing,lambda$jpaConfiguration$6,lambda$registerCommandHandler$30,lambda$eventProcessing$27,lambda$registerCommandHandler$33,lambda$registerMessageHandler$41,defaultEventGateway,invokeShutdownHandlers,lambda$null$36,lambda$registerHandlerDefinition$44,defaultHandlerDefinition,lambda$invokeShutdownHandlers$50,defaultQueryGateway,lambda$new$1,lambda$null$46,lambda$onStart$53,lambda$jpaConfiguration$8,retrieveHandlerDefinition,registerQueryHandler,defaultComponent,lambda$registerMessageHandler$39,lambda$configureEmbeddedEventStore$42,defaultScopeAwareProvider,lambda$registerMessageHandler$40,lambda$defaultQueryGateway$11,lambda$registerMessageHandler$38,defaultParameterResolverFactory,lambda$defaultResourceInjector$19,defaultUpcasterChain,registerCommandHandler,lambda$registerQueryHandler$37,lambda$jpaConfiguration$9,registerModule,lambda$defaultQueryBus$13,lambda$registerQueryHandler$34,lambda$jpaConfiguration$7,lambda$invokeStartHandlers$49,prepareMessageHandlerRegistrars,lambda$defaultSnapshotter$26,defaultCommandBus,lambda$null$31,lambda$defaultEventGateway$23,defaultSerializer,lambda$defaultCommandBus$18,lambda$jpaConfiguration$5,invokeInitHandlers,lambda$defaultQueryUpdateEmitter$14,defaultSnapshotter,defaultQueryBus,defaultEventBus,lambda$defaultScopeAwareProvider$20,defaultCommandGateway,defaultDeadlineManager,lambda$new$2,lambda$defaultParameterResolverFactory$15,lambda$defaultConfiguration$4,defaultConfiguration,lambda$defaultDeadlineManager$21,lambda$prepareModules$45,lambda$invokeLifecycleHandlers$52,defaultResourceInjector,lambda$invokeLifecycleHandlers$51,verifyIdentifierFactory,lambda$prepareMessageHandlerRegistrars$47,lambda$null$35,invokeLifecycleHandlers,lambda$defaultHandlerDefinition$16,defaultQueryUpdateEmitter,lambda$eventProcessing$28,defaultSpanFactory",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"lambda$whenInvoking$6,ensureValuesEqual,lambda$null$3,aggregateModel,detectIllegalStateChanges,lambda$buildResultValidator$9,lambda$when$8,failIllegalStateChange,assertValidWorkingAggregateState,lambda$when$7,lambda$null$5,andGivenCommands,getParameterResolverFactory,getRepositoryProvider,executeAtSimulatedTime,andGiven,registerAggregateCommandHandlers,clearGivenWhenState,ensureRepositoryConfiguration,getHandlerDefinition,whenTimeAdvancesTo,registerRepository,givenCommands,lambda$whenConstructing$4,handleDeadline,useStateStorage,currentTime,given,registerCommandHandler,when,whenTimeElapses,finalizeConfiguration,lambda$andGivenCommands$1,lambda$givenState$0,lambda$when$2,andGivenCurrentTime,registerFieldFilter,registerRepositoryProvider,buildResultValidator",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"lambda$expectNoScheduledDeadlineWithName$6,verifyPayloadEquality,expectNoScheduledDeadlineMatching,expectTriggeredDeadlines,recordException,expectExceptionDetails,expectExceptionMessage,expectEvents,expectScheduledDeadlineMatching,expectException,lambda$expectNoScheduledDeadlineWithName$4,lambda$expectNoScheduledDeadlineMatching$5,expectTriggeredDeadlinesMatching,lambda$expectScheduledDeadlineWithName$1,lambda$expectScheduledDeadlineWithName$0,expectResultMessageMatching,lambda$expectNoScheduledDeadlineMatching$3,expectResultMessagePayload,lambda$expectNoScheduledDeadlineWithName$2,verifyMetaDataEquality",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$5,expectTriggeredDeadlines,lambda$expectNoScheduledDeadlineWithName$3,lambda$expectNoScheduledDeadlineMatching$6,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$7,expectNoScheduledEventMatching,expectTriggeredDeadlinesMatching,expectScheduledEventMatching,lambda$expectScheduledDeadlineWithName$2,lambda$registerStartRecordingCallback$0,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineMatching$4",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"invokeStartHandlers,access$1000,access$400,access$1400,access$200,access$900,access$1300,invokeShutdownHandlers,access$800,access$500,access$300,defaultComponent,access$1500,access$700,access$1200,access$600,access$1100",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"lambda$registerLifecycleHandler$2,isEarlierPhaseDuringShutdown,lambda$null$0,isEarlierPhaseDuringStartUp,lambda$getComponent$1,registerLifecycleHandler",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"startRecording,registerStartRecordingCallback",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"getCommandBus,lambda$null$0,ensureSagaResourcesInitialized,timeCorrectedEventMessage,handleDeadline,lambda$handleInSaga$1,givenAggregate,registerCommandGateway,handleInSaga,registerResource,getResourceInjector,getParameterResolverFactory,getPublisherFor,currentTime,getHandlerDefinition,registerFieldFilter",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"assertValidRecording,recordException",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$800,access$900,access$700,access$600,access$602",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"lambda$commit$5,commitAsRoot,delegateAfterCommitToParent,setRollbackCause,commitAsNested,lambda$start$1,lambda$commitAsNested$6,lambda$rollback$8,phase,changePhase,notifyHandlers,setPhase,lambda$commit$4,lambda$start$0,onRollback,lambda$null$2,lambda$start$3,lambda$rollback$7,addHandler",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"calculateIdentifier,resetTokens,lambda$null$9,lambda$statusUpdater$13,start,spawnWorker,lambda$null$8,lambda$null$11,supportsReset,lambda$resetTokens$5,singleStatusUpdater,lambda$null$7,lambda$resetTokens$10,lambda$new$2,lambda$resetTokens$6,isRunning,statusUpdater,releaseSegment,shutdownAsync,lambda$calculateIdentifier$4,lambda$null$1,lambda$getTokenStoreIdentifier$3,lambda$new$0,lambda$singleStatusUpdater$12",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"getNextIndexForSequence,lambda$findNextDeadLetter$11,lambda$toLetter$7,amountOfSequences,findFirstLetterOfEachAvailableSequence,getMaxIndexForSequence,lambda$processLetterAndFollowing$9,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$getMaxIndexForSequence$17,processLetterAndFollowing,findNextDeadLetter,claimDeadLetter,lambda$toLetter$8,lambda$size$15,getProcessingStartedLimit,lambda$amountOfSequences$16,lambda$claimDeadLetter$12,lambda$clear$13,lambda$deadLetterSequence$5,sequenceSize,lambda$enqueue$0,toStringSequenceIdentifier,lambda$enqueue$2,lambda$deadLetters$6,toLetter,lambda$evict$4,requeue,evict,entityManager,lambda$enqueue$1,isFull,lambda$enqueue$3,lambda$sequenceSize$14",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$toLetter$7,processLetterAndFollowing,requeue,lambda$enqueue$0,lambda$processLetterAndFollowing$9,claimDeadLetter,lambda$evict$4,findFirstLetterOfEachAvailableSequence,lambda$sequenceSize$14,getMaxIndexForSequence,lambda$clear$13,toStringSequenceIdentifier,lambda$enqueue$3,getNextIndexForSequence,lambda$amountOfSequences$16,entityManager,lambda$findFirstLetterOfEachAvailableSequence$10,sequenceSize,lambda$deadLetterSequence$5,getProcessingStartedLimit,isFull,lambda$deadLetters$6,findNextDeadLetter,evict,lambda$claimDeadLetter$12,amountOfSequences,lambda$size$15,lambda$enqueue$2,toLetter,lambda$findNextDeadLetter$11,lambda$getMaxIndexForSequence$17,lambda$toLetter$8,lambda$enqueue$1",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$payloadMatchesQueryResponseType$15,lambda$null$16,lambda$registerUpdateHandler$2,inStartedPhaseOfUnitOfWork,lambda$registerUpdateHandler$3,doComplete,lambda$queryUpdateHandlerRegistered$0,intercept,lambda$null$7,doCompleteExceptionally,lambda$null$13,lambda$doEmit$12,lambda$null$18,lambda$registerDispatchInterceptor$11,lambda$emit$8,lambda$doEmit$14,lambda$null$20,lambda$completeExceptionally$10,lambda$doCompleteExceptionally$19,lambda$registerUpdateHandler$1,doEmit,lambda$runOnAfterCommitOrNow$21,emitError,lambda$emit$5,runOnAfterCommitOrNow,lambda$complete$9,lambda$null$6,payloadMatchesQueryResponseType,lambda$doComplete$17,lambda$registerUpdateHandler$4",31,1,""
"org.axonframework.test.saga.SagaTestFixture",37,"handleInSaga,access$300,currentTime",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"initialize,lambda$handle$6,lambda$handle$5,lambda$handle$4,createMessage,lambda$handle$7,lambda$createMessage$12,lambda$execute$2,lambda$null$8,publish,handle,applyMessageOrPayload,registerRoot,lambda$andThenApply$13,findHandlerAndHandleCommand,lambda$registerRoot$0,publishOnEventBus,rootType,lambda$invoke$1,lambda$doApply$11,doApply,lambda$findHandlerAndHandleCommand$9,lambda$findHandlerAndHandleCommand$10,lambda$handle$3,andThen,initSequence",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"getModules,lambda$eventProcessingConfiguration$4,lambda$aggregateConfiguration$5,aggregateConfiguration,getComponent,lambda$aggregateConfiguration$6,lambda$findModules$0,lambda$findModules$1,findModules,lambda$eventProcessingConfiguration$3,lambda$getComponent$8,lambda$resourceInjector$2,lambda$aggregateConfiguration$7,eventBus",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$700,access$1200,access$1800,getState,access$1000,doSleepFor,access$2200,access$600,access$1600,access$1300,access$800,access$2100,access$1700,access$1100,access$2000,access$1400,access$900,access$1500",18,1,""
"org.axonframework.config.Configurer",29,"eventProcessing,buildConfiguration,configureAggregate,configureMessageMonitor,lambda$configureMessageMonitor$1,lambda$configureMessageMonitor$0,registerModule,registerQueryHandler,registerComponent,registerCommandHandler",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1200,getState,access$1000,access$1300,access$800,access$1100,access$1400,access$900,access$1500,processingLoop",10,1,""
"org.axonframework.config.Configuration",27,"correlationDataProviders,messageMonitor,spanFactory,handlerDefinition,getComponent,parameterResolverFactory,eventBus",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$700,access$600",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,access$800,access$2000",3,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,releaseSegment,access$800,access$2000",4,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$handle$6,lambda$handle$8,canHandle,getAssociationValues,lambda$null$5,lambda$invoke$1,lambda$handle$7,lambda$new$0,handle,lambda$null$3,lambda$execute$2,lambda$canHandle$4",13,1,""
"org.axonframework.config.Configuration",25,"serializer,eventSerializer,queryBus,correlationDataProviders,getComponent,messageMonitor,spanFactory,messageSerializer,upcasterChain,repository,handlerDefinition,findModules,scopeAwareProvider,snapshotFilter,commandBus,eventStore,parameterResolverFactory,eventBus",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"lambda$process$6,lambda$process$3,lambda$process$5,lambda$requeue$2,getLastTouchedSequence,maximumNumberOfSequencesReached,lambda$process$4,builder,isFull,lambda$evict$1,evict,toIdentifier,lambda$enqueue$0,contains,lambda$clear$7,requeue,maximumSequenceSizeReached",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$getSubscriptionQueryResult$5,getSubscriptionQueryResult,lambda$query$2,lambda$query$0,lambda$streamingQuery$3,lambda$query$1,lambda$getSubscriptionQueryResult$6,lambda$registerDispatchInterceptor$8,lambda$getSubscriptionQueryResult$7,lambda$streamingQuery$4,getSubscriptionQueryMessage,processInterceptors",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"unmarkError,isCaughtUp,getSegment,caughtUp,markError,isErrorState,advancedTo",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"publishEventMessage,addDetailsFromEvent,schedule,createMessage,lambda$publishEventMessage$0,publish,publishWithRevision,lambda$addDetailsFromObject$98640057$1,lambda$addDetailsFromEvent$1f732a71$1,shutdown,lambda$addDetailsFromEvent$8cace316$1,addDetailsFromObject,lambda$addDetailsFromObject$515c35f2$1",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"getConfig,initializeTokenSegments,lambda$fetchSegments$0,lambda$fetchAvailableSegments$2,loadToken,lambda$fetchAvailableSegments$1,validateSegment,fetchSegments,lambda$retrieveStorageIdentifier$3",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"lambda$fetchAvailableSegments$1,lambda$fetchAvailableSegments$2,loadToken,lambda$retrieveStorageIdentifier$3,getConfig,lambda$fetchSegments$0,fetchSegments,initializeTokenSegments,validateSegment",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"lambda$cancelSchedule$0,lambda$cancelAllWithinScope$2,lambda$cancelAll$1,lambda$registerDispatchInterceptor$3,advanceTimeTo,advanceToNextTrigger,lambda$registerHandlerInterceptor$4,consumeDeadline,schedule,processDispatchInterceptors,lambda$consumeDeadline$5",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"createReplayToken,advancedTo,context,isReplay,lambda$replayContext$1,getTokenAtReset,lambda$getTokenAtReset$2,replayContext,lambda$isReplay$0",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$registerDispatchInterceptor$4,injectAggregateIdentifier,doAppendEvents,lambda$subscribe$3,lambda$doAppendEvents$2,lambda$doAppendEvents$1,lambda$publish$0,openStream",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"createRepository,lambda$subscribe$5,lambda$subscribe$4,initializeInvokerThreads,initializePublisherThreads,lambda$doDispatch$3,lambda$initializeInvokerThreads$1,lambda$registerHandlerInterceptor$7,lambda$registerDispatchInterceptor$6,dispatch,doDispatch,lambda$dispatch$2,lambda$initializePublisherThreads$0",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"nextSequenceNumber,initActiveIfRequired,next",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isMerging,getTrackingToken,mergeCompletedPosition,isCaughtUp,getSegment,getCurrentPosition,getResetPosition,isErrorState,getError,isReplaying,split",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"markError,isErrorState,advancedTo",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"isFirstDomainEvent,appendEvents,readEventData,lambda$readSnapshot$1,buildExceptionMessage,lambda$readSnapshot$0,getEventSerializer,getSnapshotSerializer,storeSnapshot,readSnapshotData",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"hasNext,next,lambda$getLastSequenceNumber$0",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"peek,nextAvailable,peekGlobalStream,lambda$closePrivateStream$0,nextNode,peekPrivateStream,stopTailingGlobalStream,lastToken,behindGlobalCache,closePrivateStream",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"behindGlobalCache,peekGlobalStream,lastToken,peek,nextNode,peekPrivateStream,nextAvailable,stopTailingGlobalStream,lambda$closePrivateStream$0,closePrivateStream",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"andMetaData,isExceptional,withMetaData,getPayload,findExceptionResult",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getAssociationValues,root,getSagaIdentifier,isActive",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getScheduledDeadlines,getCurrentDateTime,getTriggeredDeadlines",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$recordException$1,lambda$makeCurrent$0",2,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",18,"sequenceSizeStatement,setTrackedEventFields,setIdFields,setDeadLetterFields,setEventFields,setDomainEventFields",8,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"lambda$storeToken$0,lambda$fetchSegments$1,initializeTokenSegments,fetchSegments",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"stagedDomainEventMessages,handleSnapshotReadingError,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$0,lambda$readEvents$3,lambda$stagedDomainEventMessages$2",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"next,readNext",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$100,access$000",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$3,lambda$handle$0,lambda$handle$2,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"upperBound,unwrapType,lambda$new$0,queryResultType",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$null$6,lambda$null$5,lambda$getSpanMessage$4,lambda$getSpanMessage$3,lambda$createDispatchSpan$2,lambda$createHandlerSpan$1,lambda$createInternalSpan$8,lambda$createInternalSpan$7,lambda$createRootTrace$0,getSpanMessage",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$removeAll$2,lambda$registerCacheEntryListener$0,lambda$get$1,purgeItems,lambda$computeIfPresent$4,lambda$containsKey$3",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"processingGroup,ensureInitialized,initialize,lambda$eventProcessor$0,lambda$ensureInitialized$3,lambda$initialize$1,lambda$initialize$2",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$runOnPrepareCommitOrNow$0,dispatchInterceptors,lambda$registerDispatchInterceptor$1,lambda$registerHandlerInterceptor$2",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"lambda$mergePosition$1,mergePosition,doAdvance,lambda$mergePosition$0",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"nextAvailable,lambda$setOnAvailableCallback$4,lambda$skipMessagesWithPayloadTypeOf$3,peekForMessages,skipMessagesWithPayloadTypeOf,doConsumeNext,messageSource,lambda$peekForMessages$2,lambda$doConsumeNext$1,lambda$new$0,lambda$setOnAvailableCallback$5",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken,getSegment",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"spanFactory,repository,handlerDefinition,getComponent,commandBus,eventStore,parameterResolverFactory,eventBus",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatch,deadlineNameMatchesAll",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$null$1,getSpanName,processInUnitOfWork,getName,lambda$processInUnitOfWork$3,lambda$registerHandlerInterceptor$0,lambda$null$2",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"position,lowerSegmentToken,mergePosition,isMergeInProgress,upperSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"position,getTokenAtReset,lowerBound,createReplayToken,isReplay",6,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",16,"getSequenceIndex,getSequenceIdentifier,getIdentifier",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$new$0,lambda$handle$3,lambda$canHandle$2,lambda$new$1",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"isExceptional,andMetaData,optionalExceptionResult,withMetaData",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"publish,publishOnEventBus,doApply",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asNullableResponseMessage,asResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getData,getType",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"routingKey,commandName",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"canHandle,lambda$prepareReset$4,lambda$canHandle$1,lambda$canHandleType$2,prepareReset,lambda$canHandleType$3,lambda$handle$0,handle",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"withMetaData,getAggregateIdentifier,getType,getSequenceNumber,andMetaData",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"withTrackingToken,trackingToken,withMetaData,andMetaData",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"hasNextAvailable,peek,setOnAvailableCallback,skipMessagesWithPayloadTypeOf,close,access$300",7,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",15,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getIndex,getSequenceIdentifier,getId",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getSequenceIdentifier,getId,getIndex",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"checkAndRethrowForExceptionOrError,parametersMatch,resolveParameterValues,typeMatches",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"canHandle,handle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isGenericAssignableFrom,isAssignableFrom,isWildcardTypeWithMatchingUpperBound,isGenericArrayType,isTypeVariable,isParameterizedType,isParameterizedTypeOfExpectedType,isArray,isWildcardType",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"type,getVersion,declaredType",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"isDeleted,identifier,version,initialize",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"access$500,access$300,load,getAggregate,newInstance,access$200,send",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createHandlerSpan$1,lambda$createInternalSpan$3,lambda$registerSpanAttributeProvider$5,lambda$createInternalSpan$4,lambda$createDispatchSpan$2,lambda$createRootTrace$0",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"disconnect,lambda$subscribe$1,updateFilter,intercept,shutdownDispatching,localSegment,lambda$dispatch$0,lambda$registerDispatchInterceptor$2,dispatch",9,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"asDeadlineMessage,lambda$asDeadlineMessage$1,andMetaData,withMetaData,lambda$asDeadlineMessage$0",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"canHandle,delegates,lambda$canHandle$0,lambda$canHandleType$1,flatten,lambda$performReset$2,performReset",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"withMetaData,exceptionDetails,andMetaData,isExceptional,optionalExceptionResult",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$0,lambda$new$1",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"type,types",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"addNamedQueriesTo,sagaEntryEntityName,loadAssociationValues,removeAssociationValue,getSagaTypeName,storeAssociationValue,createSagaEntry,serializedSagaAsString,serializedObjectType",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"createSagaEntry,serializedObjectType,removeAssociationValue,addNamedQueriesTo,loadAssociationValues,sagaEntryEntityName,getSagaTypeName,serializedSagaAsString,storeAssociationValue",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"andMetaData,getResponseType,withMetaData,getQueryName",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getQueryName,getResultType",2,1,""
"org.axonframework.config.Configuration",13,"spanFactory,handlerDefinition,eventProcessingConfiguration,parameterResolverFactory,resourceInjector",5,1,""
"org.axonframework.eventhandling.EventMessage",13,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"trackingToken,withTrackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"isUpperSegmentAdvanced,lowerSegmentToken,isLowerSegmentAdvanced,upperSegmentToken",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"invokeHandlers,sequencingPolicyMatchesSegment,hasHandler,lambda$canHandleType$1,lambda$new$0,sequenceIdentifier,performReset,detectList",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$1,lambda$readEvents$0",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"enqueuedAt,diagnostics,lambda$new$0,message,cause",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$addCachedAssociations$3,addCachedAssociations,removeAssociationValueFromCache,lambda$removeAssociationValueFromCache$2,lambda$deleteSaga$1,lambda$findSagas$0,lambda$updateSaga$4,cacheKey",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"validateIdentifier,lambda$newInstance$1,lambda$getAggregate$4,lambda$load$3,lambda$load$2,lambda$loadOrCreate$0,load,canResolve",8,1,""
"org.axonframework.test.saga.EventValidator",13,"lambda$startRecording$0,assertPublishedEventsMatching,unwrapEvent,createEqualToMatchers,handle",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"andMetaData,getCommandName,withMetaData",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"removeFromCache,lambda$load$0,canResolve,load,newInstance",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"getTimestamp,withMetaData,andMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"buildTrigger,shutdown,schedule,lambda$cancelSchedule$1,initialize,buildJobDetail,lambda$schedule$0",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"readEvents,lambda$readEvents$0",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"version,isLockHeld,getWrappedAggregate",3,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",12,"getResponseType",1,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"advanceTimeTo,advanceTimeBy,getCurrentDateTime,initializeAt",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"dispatch,builder,subscribe,registerHandlerInterceptor,registerDispatchInterceptor",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"lambda$send$0,send,asRuntime",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"loadOrCreate,load,newInstance",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"lambda$send$0,lambda$send$1,load,send,lambda$send$2,canResolve",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.queryhandling.QueryGateway",11,"query,scatterGather,subscriptionQuery,streamingQuery",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"withMetaData,andMetaData,getQueryName",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$800",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"doDeserialize,typeIdentifierOf,doSerialize,typeForClass,getConverter,classForType,registerConverters,revisionOf",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"builder,typeForClass,resolveClassName,getReader,getWriter,classForType,registerConverters",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"lambda$newInstance$0,canResolve,load,newInstance",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"createListenerAdapter,lambda$registerCacheEntryListener$0,doRegisterListener",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"snapshotFilter,repository,aggregateType,aggregateFactory",4,1,""
"org.axonframework.config.Configuration",10,"findModules,eventProcessingConfiguration",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored,canHandle,processInUnitOfWork",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData",1,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"invokeHandlers,sequencingPolicyMatchesSegment,sequenceIdentifier,performReset,eventHandlers",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"processingStatus,lambda$isReplaying$0,resetTokens",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2800,access$2700",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.messaging.MessageDecorator",10,"describeType,getIdentifier,getPayload,getMetaData,describeTo",5,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"isEmpty,mergedWith,get,getAll,contains",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"revisionOf,classForType,getSerializedType",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,getGlobalIndex,next",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,lambda$lowerBound$0,lambda$covers$2,compareTo,lambda$upperBound$1",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createHeadToken,createTokenSince,sourceId,createTokenAt,createTailToken",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"alterToken,nextAvailable",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$300,access$600,access$400,access$500",4,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$constructHandlerAttributesFor$1,constructHandlerAttributesFor,prefixedKey,lambda$null$0",4,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"loadAssociations,sagaTypeName",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"access$100,toString,equals,hashes",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateType,aggregateFactory",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2400,access$2300,access$2200,access$2100,access$1900",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"upperBound,lowerBound,advancedTo,unwrap",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"size,findSagas",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"canConvert,registerConverter",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getAggregateIdentifier,getSequenceNumber,getType",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"supportsReset,handle,prepareReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"advancedTo,getTokenForStream",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",7,"lambda$registerHandlerInterceptor$2,lambda$process$1,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"canHandle,handle,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"canHandle,lambda$handle$0,handle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"getProperty,createProperty,getHandlerName,lambda$getProperty$0",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$subscribe$0,lambda$registerHandlerInterceptor$1",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"queuedThreads,isHeldBy,lock",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"handle,prepareReset",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"sourceId,openStream",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"lambda$unexpectedEvents$0,unexpectedEvents",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"isEmpty,getAll",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$700,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$400,access$600",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,resolveReturnValue",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.Repository",6,"load,loadOrCreate,newInstance",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$findHandlerMethods$1,lambda$resolveAssociation$0",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$0,lambda$findSagas$1",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getContentType,getType,getData",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"checkForDeadlock,disposeIfUnused",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getIndex,getGaps",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"builder",1,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0,lambda$onMessageIngested$1",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"bytesFrom,convert",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
