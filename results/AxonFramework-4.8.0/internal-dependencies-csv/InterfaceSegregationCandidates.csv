"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.messaging.ResultMessage",9,"exceptionResult,isExceptional",2,12,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier,getTimestamp",2,10,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType,getSequenceNumber,getAggregateIdentifier",3,6,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,5,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,5,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,3,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getType,getSequenceNumber,getAggregateIdentifier",3,3,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber,getAggregateIdentifier",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"newInstance,getIndex,getGaps,withGapsTruncatedAt,advanceTo",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,split,getTrackingToken",3,2,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initialize,getAggregateRoot,initSequence",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName,isFactoryHandler",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getSequenceNumber,getAggregateIdentifier",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"withTrackingToken,trackingToken",2,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.messaging.ResultMessage",10,"exceptionResult,isExceptional",2,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName,getResponseType",2,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",160,"deadLetterQueue,lambda$registerDeadLetterQueue$69,registerEventProcessor,trackingEventProcessor,lambda$static$0,lambda$pooledStreamingEventProcessor$72,lambda$registerTrackingEventProcessorConfiguration$67,lambda$null$38,lambda$registerSubscribingEventProcessor$60,lambda$registerTrackingEventProcessorConfiguration$66,lambda$null$21,lambda$annotatedProcessingGroupOfType$73,lambda$null$33,lambda$static$1,registerDeadLetterQueue,lambda$null$34,lambda$null$13,lambda$registerDeadLetterPolicy$70,registerTrackingEventProcessor,annotatedProcessingGroupOfType,lambda$registerHandlerInterceptor$62,lambda$null$43,lambda$registerTransactionManager$65,pooledStreamingEventProcessor,registerPooledStreamingEventProcessorConfiguration,lambda$null$37,subscribingEventProcessor,lambda$registerTrackingEventProcessor$55,defaultExecutor,lambda$null$20,lambda$registerPooledStreamingEventProcessor$68,lambda$registerTrackingEventProcessor$54,lambda$usingTrackingEventProcessors$58,lambda$pooledStreamingEventProcessor$71,lambda$registerSequencingPolicy$63,lambda$usingSubscribingEventProcessors$57,lambda$registerTokenStore$56,lambda$null$35,lambda$null$45,lambda$registerErrorHandler$61,lambda$usingPooledStreamingEventProcessors$59,lambda$registerRollbackConfiguration$64,registerTrackingEventProcessorConfiguration,lambda$null$28,lambda$null$44,trackingEventProcessorConfig,lambda$new$23,lambda$registerEventHandlerInvokers$39,lambda$new$7,lambda$new$11,retrieveHandlerDefinition,rollbackConfiguration,lambda$selectProcessingGroupByType$30,lambda$new$5,registerDefaultDeadLetterQueueIfPresent,buildEventProcessor,lambda$new$25,errorHandler,lambda$new$8,lambda$initializeProcessors$29,lambda$new$15,lambda$new$22,lambda$registerEventHandlerInvokers$32,lambda$registerEventHandlerInvokers$36,sequencingPolicy,lambda$registerListenerInvocationErrorHandler$53,registerSagaManagers,lambda$new$19,lambda$eventProcessors$50,lambda$new$18,lambda$selectProcessingGroupByType$31,lambda$new$16,lambda$sagaConfigurations$51,lambda$new$27,listenerInvocationErrorHandler,lambda$deadLetteringInvoker$42,lambda$new$24,eventProcessors,lambda$registerEventHandler$52,lambda$new$6,tokenStore,deadLetterPolicy,addInterceptors,lambda$registerSagaManagers$46,lambda$new$14,processorNameForProcessingGroup,defaultEventProcessor,initializeProcessors,lambda$addInterceptors$49,lambda$new$4,lambda$new$26,lambda$new$12,simpleInvoker,lambda$new$2,transactionManager,lambda$deadLetteringInvoker$41,lambda$new$9,lambda$registerDefaultDeadLetterQueueIfPresent$40,messageMonitor,validateConfigInitialization,selectProcessingGroupByType,noTepCustomization,lambda$new$3,registerEventHandlerInvokers,lambda$addInterceptors$48,lambda$new$10,packageOfObject,deadLetteringInvoker,lambda$new$17,noPsepCustomization,lambda$buildEventProcessor$47",111,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$invokeShutdownHandlers$50,lambda$prepareMessageHandlerRegistrars$47,prepareMessageHandlerRegistrars,lambda$registerHandlerDefinition$44,lambda$registerMessageHandler$39,lambda$registerCommandHandler$30,invokeLifecycleHandlers,lambda$null$12,registerQueryHandler,lambda$invokeStartHandlers$49,lambda$invokeInitHandlers$48,lambda$registerMessageHandler$38,lambda$registerQueryHandler$34,lambda$null$46,lambda$invokeLifecycleHandlers$51,lambda$invokeLifecycleHandlers$52,lambda$null$35,lambda$null$25,invokeInitHandlers,registerCommandHandler,verifyIdentifierFactory,lambda$static$0,lambda$null$36,lambda$registerQueryHandler$37,prepareModules,lambda$null$31,lambda$null$17,lambda$null$43,lambda$configureEmbeddedEventStore$42,lambda$prepareModules$45,lambda$registerCommandHandler$33,lambda$onShutdown$54,lambda$onStart$53,lambda$registerMessageHandler$41,lambda$registerMessageHandler$40,lambda$null$32,lambda$jpaConfiguration$6,lambda$defaultConfiguration$4,defaultSpanFactory,defaultQueryBus,lambda$defaultResourceInjector$19,defaultEventBus,lambda$eventProcessing$28,lambda$defaultEventBus$22,lambda$new$3,defaultCommandBus,defaultQueryUpdateEmitter,lambda$defaultDeadlineManager$21,lambda$configureMessageMonitor$29,lambda$defaultSnapshotter$26,defaultHandlerDefinition,invokeShutdownHandlers,registerComponent,lambda$defaultHandlerDefinition$16,lambda$defaultQueryBus$13,lambda$new$2,lambda$defaultScopeAwareProvider$20,lambda$defaultQueryUpdateEmitter$14,lambda$eventProcessing$27,jpaConfiguration,lambda$defaultEventGateway$23,lambda$jpaConfiguration$7,lambda$defaultQueryGateway$11,defaultCommandGateway,registerModule,lambda$new$1,lambda$defaultParameterResolverFactory$15,defaultComponent,defaultParameterResolverFactory,defaultSerializer,defaultScopeAwareProvider,lambda$jpaConfiguration$9,lambda$jpaConfiguration$5,defaultSnapshotter,lambda$defaultCommandBus$18,retrieveHandlerDefinition,defaultUpcasterChain,defaultDeadlineManager,eventProcessing,defaultEventGateway,lambda$jpaConfiguration$8,defaultQueryGateway,defaultResourceInjector,lambda$defaultSerializer$24,defaultConfiguration,lambda$defaultCommandGateway$10",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"failIllegalStateChange,when,assertValidWorkingAggregateState,lambda$buildResultValidator$9,useStateStorage,getHandlerDefinition,clearGivenWhenState,getRepositoryProvider,getParameterResolverFactory,handleDeadline,ensureRepositoryConfiguration,lambda$null$5,lambda$andGivenCommands$1,ensureValuesEqual,given,buildResultValidator,andGivenCurrentTime,detectIllegalStateChanges,registerFieldFilter,currentTime,lambda$when$8,andGivenCommands,registerRepository,whenTimeAdvancesTo,finalizeConfiguration,givenCommands,lambda$when$2,lambda$when$7,lambda$whenConstructing$4,whenTimeElapses,registerRepositoryProvider,registerCommandHandler,andGiven,lambda$whenInvoking$6,lambda$null$3,registerAggregateCommandHandlers,lambda$givenState$0,executeAtSimulatedTime,aggregateModel",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectExceptionMessage,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectNoScheduledDeadlineMatching$3,lambda$expectNoScheduledDeadlineWithName$2,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$5,lambda$expectNoScheduledDeadlineWithName$4,expectTriggeredDeadlines,expectScheduledDeadlineMatching,verifyPayloadEquality,lambda$expectScheduledDeadlineWithName$0,verifyMetaDataEquality,expectException,recordException,lambda$expectScheduledDeadlineWithName$1,expectEvents,expectResultMessageMatching,expectExceptionDetails,expectResultMessagePayload,expectTriggeredDeadlinesMatching",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"expectScheduledDeadlineMatching,expectNoScheduledDeadlineMatching,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineWithName$5,expectNoScheduledEventMatching,lambda$expectNoScheduledDeadlineWithName$7,lambda$expectNoScheduledDeadlineWithName$3,lambda$expectScheduledDeadlineWithName$2,expectTriggeredDeadlines,lambda$expectNoScheduledDeadlineMatching$6,lambda$registerStartRecordingCallback$0,expectScheduledEventMatching,lambda$expectNoScheduledDeadlineMatching$4,expectTriggeredDeadlinesMatching",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$1500,access$200,access$1400,access$400,access$800,invokeStartHandlers,access$500,access$1000,access$1300,invokeShutdownHandlers,access$1200,access$600,defaultComponent,access$900,access$300,access$1100,access$700",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"isEarlierPhaseDuringStartUp,isEarlierPhaseDuringShutdown,lambda$registerLifecycleHandler$2,lambda$null$0,registerLifecycleHandler,lambda$getComponent$1",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"startRecording,registerStartRecordingCallback",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"currentTime,getParameterResolverFactory,handleInSaga,registerFieldFilter,getHandlerDefinition,handleDeadline,givenAggregate,lambda$null$0,lambda$handleInSaga$1,getResourceInjector,getPublisherFor,registerCommandGateway,registerResource,timeCorrectedEventMessage,getCommandBus,ensureSagaResourcesInitialized",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"assertValidRecording,recordException",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$602,access$900,access$700,access$600,access$800",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"lambda$rollback$8,lambda$start$1,lambda$start$0,lambda$rollback$7,notifyHandlers,commitAsNested,lambda$commit$4,setRollbackCause,lambda$commitAsNested$6,addHandler,onRollback,lambda$start$3,lambda$null$2,setPhase,lambda$commit$5,changePhase,commitAsRoot,phase,delegateAfterCommitToParent",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"lambda$null$9,start,lambda$null$1,lambda$resetTokens$5,statusUpdater,resetTokens,lambda$getTokenStoreIdentifier$3,lambda$statusUpdater$13,lambda$resetTokens$10,supportsReset,lambda$calculateIdentifier$4,lambda$null$8,lambda$null$7,calculateIdentifier,singleStatusUpdater,isRunning,lambda$new$0,lambda$resetTokens$6,spawnWorker,lambda$new$2,releaseSegment,lambda$null$11,lambda$singleStatusUpdater$12,shutdownAsync",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"processLetterAndFollowing,getProcessingStartedLimit,evict,findNextDeadLetter,requeue,toLetter,lambda$findNextDeadLetter$11,lambda$enqueue$1,sequenceSize,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$enqueue$0,lambda$deadLetterSequence$5,lambda$claimDeadLetter$12,toStringSequenceIdentifier,lambda$toLetter$7,isFull,entityManager,lambda$amountOfSequences$16,lambda$evict$4,lambda$size$15,lambda$clear$13,lambda$enqueue$2,lambda$enqueue$3,lambda$getMaxIndexForSequence$17,getMaxIndexForSequence,lambda$toLetter$8,claimDeadLetter,lambda$sequenceSize$14,getNextIndexForSequence,findFirstLetterOfEachAvailableSequence,amountOfSequences,lambda$deadLetters$6,lambda$processLetterAndFollowing$9",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"getNextIndexForSequence,amountOfSequences,lambda$findFirstLetterOfEachAvailableSequence$10,toLetter,findNextDeadLetter,lambda$clear$13,getProcessingStartedLimit,lambda$toLetter$8,lambda$deadLetterSequence$5,lambda$amountOfSequences$16,processLetterAndFollowing,lambda$size$15,findFirstLetterOfEachAvailableSequence,lambda$claimDeadLetter$12,lambda$sequenceSize$14,lambda$processLetterAndFollowing$9,lambda$getMaxIndexForSequence$17,lambda$toLetter$7,lambda$findNextDeadLetter$11,lambda$deadLetters$6,isFull,toStringSequenceIdentifier,requeue,lambda$evict$4,entityManager,sequenceSize,lambda$enqueue$2,lambda$enqueue$3,evict,lambda$enqueue$0,lambda$enqueue$1,claimDeadLetter,getMaxIndexForSequence",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"doEmit,lambda$doComplete$17,lambda$completeExceptionally$10,runOnAfterCommitOrNow,lambda$null$7,lambda$runOnAfterCommitOrNow$21,inStartedPhaseOfUnitOfWork,lambda$emit$5,lambda$doCompleteExceptionally$19,lambda$registerDispatchInterceptor$11,lambda$payloadMatchesQueryResponseType$15,lambda$emit$8,payloadMatchesQueryResponseType,emitError,lambda$null$16,lambda$doEmit$12,lambda$registerUpdateHandler$3,lambda$doEmit$14,lambda$complete$9,lambda$queryUpdateHandlerRegistered$0,lambda$registerUpdateHandler$2,lambda$registerUpdateHandler$1,lambda$null$18,lambda$registerUpdateHandler$4,lambda$null$6,intercept,doCompleteExceptionally,doComplete,lambda$null$20,lambda$null$13",31,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$null$8,initialize,applyMessageOrPayload,lambda$handle$4,findHandlerAndHandleCommand,handle,registerRoot,initSequence,lambda$createMessage$12,lambda$handle$3,lambda$findHandlerAndHandleCommand$10,lambda$andThenApply$13,lambda$registerRoot$0,createMessage,lambda$handle$5,andThen,publishOnEventBus,lambda$invoke$1,lambda$findHandlerAndHandleCommand$9,lambda$handle$7,lambda$handle$6,lambda$doApply$11,lambda$execute$2,rootType,doApply,publish",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$getComponent$8,lambda$eventProcessingConfiguration$4,getComponent,lambda$resourceInjector$2,findModules,lambda$eventProcessingConfiguration$3,lambda$aggregateConfiguration$7,getModules,eventBus,lambda$aggregateConfiguration$5,lambda$findModules$1,lambda$findModules$0,aggregateConfiguration,lambda$aggregateConfiguration$6",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$900,access$1200,access$1600,doSleepFor,access$2000,access$700,access$600,access$800,access$2100,access$1100,access$1800,access$1500,access$1700,access$1000,getState,access$1300,access$2200,access$1400",18,1,""
"org.axonframework.config.Configurer",29,"buildConfiguration,registerQueryHandler,configureMessageMonitor,eventProcessing,configureAggregate,registerCommandHandler,lambda$configureMessageMonitor$0,lambda$configureMessageMonitor$1,registerModule,registerComponent",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$900,access$1200,processingLoop,access$800,access$1100,access$1500,access$1000,getState,access$1300,access$1400",10,1,""
"org.axonframework.config.Configuration",27,"correlationDataProviders,messageMonitor,getComponent,spanFactory,eventBus,parameterResolverFactory,handlerDefinition",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$700,access$600",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$2000,access$800,releaseSegment,access$1000",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$2000,access$800,access$1000",3,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$handle$8,getAssociationValues,lambda$handle$6,lambda$handle$7,lambda$execute$2,lambda$canHandle$4,lambda$null$3,lambda$null$5,canHandle,handle,lambda$invoke$1,lambda$new$0",13,1,""
"org.axonframework.config.Configuration",25,"messageSerializer,scopeAwareProvider,serializer,upcasterChain,correlationDataProviders,snapshotFilter,eventSerializer,messageMonitor,getComponent,findModules,eventStore,spanFactory,eventBus,queryBus,parameterResolverFactory,handlerDefinition,commandBus,repository",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"getLastTouchedSequence,builder,lambda$evict$1,lambda$clear$7,lambda$process$5,lambda$process$4,maximumSequenceSizeReached,toIdentifier,isFull,lambda$requeue$2,lambda$process$6,evict,lambda$process$3,maximumNumberOfSequencesReached,lambda$enqueue$0,contains,requeue",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$getSubscriptionQueryResult$5,lambda$streamingQuery$4,lambda$query$1,lambda$registerDispatchInterceptor$8,getSubscriptionQueryResult,getSubscriptionQueryMessage,lambda$query$0,lambda$streamingQuery$3,lambda$query$2,lambda$getSubscriptionQueryResult$6,processInterceptors,lambda$getSubscriptionQueryResult$7",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"caughtUp,getSegment,unmarkError,isCaughtUp,advancedTo,markError,isErrorState",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"createMessage,publishWithRevision,shutdown,lambda$addDetailsFromEvent$1f732a71$1,lambda$publishEventMessage$0,addDetailsFromEvent,lambda$addDetailsFromEvent$8cace316$1,publish,schedule,addDetailsFromObject,publishEventMessage,lambda$addDetailsFromObject$515c35f2$1,lambda$addDetailsFromObject$98640057$1",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"getConfig,initializeTokenSegments,validateSegment,loadToken,fetchSegments,lambda$fetchSegments$0,lambda$fetchAvailableSegments$2,lambda$fetchAvailableSegments$1,lambda$retrieveStorageIdentifier$3",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"lambda$fetchSegments$0,lambda$fetchAvailableSegments$1,getConfig,lambda$retrieveStorageIdentifier$3,initializeTokenSegments,validateSegment,loadToken,fetchSegments,lambda$fetchAvailableSegments$2",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"lambda$cancelSchedule$0,lambda$registerDispatchInterceptor$3,schedule,lambda$cancelAll$1,processDispatchInterceptors,lambda$registerHandlerInterceptor$4,advanceToNextTrigger,advanceTimeTo,consumeDeadline,lambda$consumeDeadline$5,lambda$cancelAllWithinScope$2",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"createReplayToken,isReplay,lambda$replayContext$1,context,getTokenAtReset,lambda$getTokenAtReset$2,replayContext,lambda$isReplay$0,advancedTo",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$subscribe$3,lambda$doAppendEvents$1,doAppendEvents,openStream,lambda$registerDispatchInterceptor$4,lambda$doAppendEvents$2,lambda$publish$0,injectAggregateIdentifier",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"lambda$registerHandlerInterceptor$7,lambda$registerDispatchInterceptor$6,lambda$subscribe$4,createRepository,lambda$initializePublisherThreads$0,lambda$subscribe$5,dispatch,lambda$initializeInvokerThreads$1,initializeInvokerThreads,doDispatch,initializePublisherThreads,lambda$dispatch$2,lambda$doDispatch$3",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"nextSequenceNumber,initActiveIfRequired,next",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"getSegment,getCurrentPosition,mergeCompletedPosition,isMerging,split,isCaughtUp,getError,getResetPosition,getTrackingToken,isReplaying,isErrorState",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"advancedTo,markError,isErrorState",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"getSnapshotSerializer,getEventSerializer,isFirstDomainEvent,lambda$readSnapshot$0,readSnapshotData,readEventData,storeSnapshot,appendEvents,buildExceptionMessage,lambda$readSnapshot$1",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"lambda$getLastSequenceNumber$0,hasNext,next",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"stopTailingGlobalStream,lambda$closePrivateStream$0,closePrivateStream,lastToken,behindGlobalCache,nextAvailable,peekGlobalStream,nextNode,peek,peekPrivateStream",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"behindGlobalCache,lastToken,peek,lambda$closePrivateStream$0,nextAvailable,peekPrivateStream,nextNode,closePrivateStream,stopTailingGlobalStream,peekGlobalStream",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"findExceptionResult,withMetaData,isExceptional,getPayload,andMetaData",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getSagaIdentifier,getAssociationValues,isActive,root",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getCurrentDateTime,getTriggeredDeadlines,getScheduledDeadlines",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$recordException$1,lambda$makeCurrent$0",2,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",18,"setTrackedEventFields,setDeadLetterFields,sequenceSizeStatement,setIdFields,setDomainEventFields,setEventFields",8,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"initializeTokenSegments,lambda$storeToken$0,lambda$fetchSegments$1,fetchSegments",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"lambda$stagedDomainEventMessages$0,lambda$readEvents$3,stagedDomainEventMessages,handleSnapshotReadingError,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$2",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"readNext,next",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$000,access$100",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$3,lambda$handle$2,lambda$handle$0,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"unwrapType,lambda$new$0,queryResultType,upperBound",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$null$5,lambda$getSpanMessage$4,lambda$createInternalSpan$7,lambda$null$6,lambda$createInternalSpan$8,lambda$getSpanMessage$3,lambda$createDispatchSpan$2,lambda$createRootTrace$0,lambda$createHandlerSpan$1,getSpanMessage",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$registerCacheEntryListener$0,lambda$removeAll$2,lambda$containsKey$3,lambda$computeIfPresent$4,lambda$get$1,purgeItems",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"lambda$initialize$1,lambda$initialize$2,lambda$eventProcessor$0,lambda$ensureInitialized$3,initialize,processingGroup,ensureInitialized",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$registerHandlerInterceptor$2,dispatchInterceptors,lambda$runOnPrepareCommitOrNow$0,lambda$registerDispatchInterceptor$1",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"lambda$mergePosition$0,doAdvance,lambda$mergePosition$1,mergePosition",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"lambda$doConsumeNext$1,lambda$setOnAvailableCallback$5,lambda$skipMessagesWithPayloadTypeOf$3,lambda$peekForMessages$2,doConsumeNext,lambda$new$0,peekForMessages,nextAvailable,messageSource,skipMessagesWithPayloadTypeOf,lambda$setOnAvailableCallback$4",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken,getSegment",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"eventStore,getComponent,spanFactory,eventBus,parameterResolverFactory,handlerDefinition,commandBus,repository",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatch,deadlineNameMatchesAll",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"getSpanName,lambda$null$2,lambda$null$1,getName,processInUnitOfWork,lambda$registerHandlerInterceptor$0,lambda$processInUnitOfWork$3",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"upperSegmentToken,mergePosition,position,isMergeInProgress,lowerSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"createReplayToken,isReplay,position,getTokenAtReset,lowerBound",6,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",16,"getIdentifier,getSequenceIndex,getSequenceIdentifier",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$canHandle$2,lambda$new$1,lambda$handle$3,lambda$new$0",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"optionalExceptionResult,isExceptional,andMetaData,withMetaData",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"publishOnEventBus,doApply,publish",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asResponseMessage,asNullableResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType,getData",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,isFactoryHandler",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,routingKey",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$canHandle$1,handle,lambda$handle$0,lambda$prepareReset$4,prepareReset,canHandle,lambda$canHandleType$2,lambda$canHandleType$3",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"getSequenceNumber,andMetaData,getAggregateIdentifier,withMetaData,getType",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"withTrackingToken,withMetaData,trackingToken,andMetaData",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"skipMessagesWithPayloadTypeOf,peek,close,access$300,hasNextAvailable,setOnAvailableCallback",7,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",15,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getIndex,getId,getSequenceIdentifier",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getSequenceIdentifier,getId,getIndex",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"parametersMatch,checkAndRethrowForExceptionOrError,resolveParameterValues,typeMatches",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"canHandle,handle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isWildcardType,isGenericArrayType,isWildcardTypeWithMatchingUpperBound,isParameterizedType,isAssignableFrom,isArray,isParameterizedTypeOfExpectedType,isTypeVariable,isGenericAssignableFrom",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"getVersion,declaredType,type",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"isDeleted,identifier,version,initialize",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"load,newInstance,access$300,access$200,send,access$500,getAggregate",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createRootTrace$0,lambda$createDispatchSpan$2,lambda$registerSpanAttributeProvider$5,lambda$createHandlerSpan$1,lambda$createInternalSpan$4,lambda$createInternalSpan$3",6,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"lambda$subscribe$1,localSegment,updateFilter,dispatch,lambda$registerDispatchInterceptor$2,intercept,shutdownDispatching,disconnect,lambda$dispatch$0",9,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"lambda$asDeadlineMessage$0,andMetaData,asDeadlineMessage,withMetaData,lambda$asDeadlineMessage$1",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"lambda$performReset$2,performReset,delegates,lambda$canHandleType$1,lambda$canHandle$0,flatten,canHandle",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"optionalExceptionResult,andMetaData,isExceptional,withMetaData,exceptionDetails",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$0,lambda$new$1",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"type,types",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"storeAssociationValue,createSagaEntry,serializedObjectType,addNamedQueriesTo,serializedSagaAsString,getSagaTypeName,removeAssociationValue,loadAssociationValues,sagaEntryEntityName",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"getSagaTypeName,serializedObjectType,addNamedQueriesTo,storeAssociationValue,serializedSagaAsString,sagaEntryEntityName,removeAssociationValue,loadAssociationValues,createSagaEntry",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"getQueryName,andMetaData,withMetaData,getResponseType",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getQueryName,getResponseType",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"resourceInjector,eventProcessingConfiguration,spanFactory,parameterResolverFactory,handlerDefinition",5,1,""
"org.axonframework.eventhandling.EventMessage",13,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"withTrackingToken,trackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"isUpperSegmentAdvanced,upperSegmentToken,isLowerSegmentAdvanced,lowerSegmentToken",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"hasHandler,sequencingPolicyMatchesSegment,invokeHandlers,lambda$new$0,detectList,sequenceIdentifier,lambda$canHandleType$1,performReset",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$1,lambda$readEvents$0",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"message,cause,lambda$new$0,enqueuedAt,diagnostics",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$findSagas$0,addCachedAssociations,lambda$removeAssociationValueFromCache$2,removeAssociationValueFromCache,lambda$updateSaga$4,cacheKey,lambda$deleteSaga$1,lambda$addCachedAssociations$3",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"validateIdentifier,canResolve,load,lambda$load$3,lambda$loadOrCreate$0,lambda$getAggregate$4,lambda$newInstance$1,lambda$load$2",8,1,""
"org.axonframework.test.saga.EventValidator",13,"lambda$startRecording$0,createEqualToMatchers,handle,unwrapEvent,assertPublishedEventsMatching",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"withMetaData,andMetaData,getCommandName",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"canResolve,lambda$load$0,load,newInstance,removeFromCache",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"getTimestamp,andMetaData,withMetaData",3,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"lambda$schedule$0,schedule,buildTrigger,buildJobDetail,lambda$cancelSchedule$1,initialize,shutdown",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"readEvents,lambda$readEvents$0",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"isLockHeld,version,getWrappedAggregate",3,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"advanceTimeTo,initializeAt,advanceTimeBy,getCurrentDateTime",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"registerHandlerInterceptor,registerDispatchInterceptor,dispatch,builder,subscribe",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"send,lambda$send$0,asRuntime",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"load,newInstance,loadOrCreate",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"canResolve,send,lambda$send$1,lambda$send$0,lambda$send$2,load",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.modelling.saga.Saga",11,"getSagaIdentifier,getAssociationValues,isActive",3,1,""
"org.axonframework.queryhandling.QueryGateway",11,"subscriptionQuery,query,streamingQuery,scatterGather",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"withMetaData,getQueryName,andMetaData",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$800",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"typeIdentifierOf,typeForClass,doSerialize,getConverter,doDeserialize,classForType,revisionOf,registerConverters",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"typeForClass,registerConverters,builder,getReader,classForType,getWriter,resolveClassName",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"load,lambda$newInstance$0,canResolve,newInstance",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.test.saga.EventValidator",11,"assertPublishedEvents,assertPublishedEventsMatching,startRecording",3,1,""
"org.axonframework.commandhandling.CommandMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"lambda$registerCacheEntryListener$0,doRegisterListener,createListenerAdapter",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"aggregateFactory,snapshotFilter,repository,aggregateType",4,1,""
"org.axonframework.config.Configuration",10,"findModules,eventProcessingConfiguration",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored,canHandle,processInUnitOfWork",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData",1,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"sequencingPolicyMatchesSegment,invokeHandlers,eventHandlers,sequenceIdentifier,performReset",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"lambda$isReplaying$0,resetTokens,processingStatus",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,getIdentifier,getMetaData,describeType,describeTo",5,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,serializePayload",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"mergedWith,get,getAll,isEmpty,contains",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"classForType,revisionOf,getSerializedType",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"lambda$upperBound$1,lambda$lowerBound$0,lambda$covers$2,offsetBy,compareTo",5,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"next,getGlobalIndex,offsetBy",3,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"sourceId,createHeadToken,createTailToken,createTokenSince,createTokenAt",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"nextAvailable,alterToken",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$500,access$400,access$600,access$300",4,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$constructHandlerAttributesFor$1,lambda$null$0,constructHandlerAttributesFor,prefixedKey",4,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName,loadAssociations",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"toString,access$100,hashes,equals",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateFactory,aggregateType",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900,access$2300,access$2400,access$2200",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"advancedTo,lowerBound,upperBound,unwrap",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"size,findSagas",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"canConvert,registerConverter",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.test.utils.RecordingCommandBus",8,"clearCommands,getDispatchedCommands",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getSequenceNumber,getAggregateIdentifier,getType",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"supportsReset,prepareReset,handle",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"getTokenForStream,advancedTo",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",7,"lambda$registerHandlerInterceptor$2,lambda$process$1,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"subscribe,builder",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"handle,canHandle,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"canHandle,handle,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"getHandlerName,createProperty,lambda$getProperty$0,getProperty",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"handle",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"lock,queuedThreads,isHeldBy",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"prepareReset,handle",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"sourceId,openStream",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"lambda$unexpectedEvents$0,unexpectedEvents",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"subscribe,builder",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"resolveReturnValue,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$500,access$600",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$700",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.Repository",6,"loadOrCreate,newInstance,load",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$resolveAssociation$0,lambda$findHandlerMethods$1",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$0,lambda$findSagas$1",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getContentType,getData,getType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.test.utils.RecordingCommandBus",6,"setCallbackBehavior",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"disposeIfUnused,checkForDeadlock",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getIndex,getGaps",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"builder",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$onMessageIngested$1,lambda$new$0",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"convert,bytesFrom",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
