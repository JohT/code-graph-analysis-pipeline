"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.messaging.ResultMessage",9,"exceptionResult,isExceptional",2,12,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp,getIdentifier",2,10,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType,getSequenceNumber,getAggregateIdentifier",3,6,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,5,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,5,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,3,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getType,getSequenceNumber,getAggregateIdentifier",3,3,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber,getAggregateIdentifier",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"getIndex,newInstance,withGapsTruncatedAt,advanceTo,getGaps",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initialize,getAggregateRoot,initSequence",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName,isFactoryHandler",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getSequenceNumber,getAggregateIdentifier",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken,withTrackingToken",2,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.messaging.ResultMessage",10,"exceptionResult,isExceptional",2,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",160,"lambda$static$0,lambda$usingSubscribingEventProcessors$57,lambda$registerTokenStore$56,lambda$registerSubscribingEventProcessor$60,lambda$null$21,lambda$pooledStreamingEventProcessor$72,lambda$registerDeadLetterQueue$69,lambda$usingPooledStreamingEventProcessors$59,lambda$null$37,trackingEventProcessor,lambda$usingTrackingEventProcessors$58,lambda$registerRollbackConfiguration$64,lambda$registerTrackingEventProcessor$55,lambda$pooledStreamingEventProcessor$71,lambda$registerHandlerInterceptor$62,lambda$registerPooledStreamingEventProcessor$68,trackingEventProcessorConfig,lambda$null$33,subscribingEventProcessor,registerDeadLetterQueue,lambda$registerErrorHandler$61,lambda$null$34,lambda$registerTrackingEventProcessorConfiguration$67,registerTrackingEventProcessorConfiguration,registerPooledStreamingEventProcessorConfiguration,defaultExecutor,lambda$null$38,lambda$null$20,registerEventProcessor,lambda$static$1,lambda$registerDeadLetterPolicy$70,lambda$registerSequencingPolicy$63,lambda$annotatedProcessingGroupOfType$73,lambda$null$44,annotatedProcessingGroupOfType,lambda$null$28,lambda$null$13,pooledStreamingEventProcessor,lambda$null$45,lambda$registerTransactionManager$65,lambda$null$35,lambda$null$43,lambda$registerTrackingEventProcessorConfiguration$66,lambda$deadLetteringInvoker$41,registerTrackingEventProcessor,lambda$new$4,lambda$new$14,rollbackConfiguration,lambda$new$15,lambda$new$17,lambda$new$8,messageMonitor,simpleInvoker,transactionManager,lambda$new$22,lambda$sagaConfigurations$51,lambda$registerSagaManagers$46,deadLetterPolicy,sequencingPolicy,lambda$new$26,lambda$new$27,registerDefaultDeadLetterQueueIfPresent,lambda$buildEventProcessor$47,lambda$registerListenerInvocationErrorHandler$53,registerEventHandlerInvokers,lambda$new$24,defaultEventProcessor,registerSagaManagers,lambda$new$2,lambda$new$12,lambda$new$23,lambda$eventProcessors$50,eventProcessors,deadLetteringInvoker,noTepCustomization,lambda$new$5,tokenStore,buildEventProcessor,lambda$addInterceptors$49,lambda$deadLetteringInvoker$42,lambda$new$16,packageOfObject,lambda$registerEventHandlerInvokers$39,lambda$registerTrackingEventProcessor$54,validateConfigInitialization,lambda$registerEventHandlerInvokers$36,lambda$new$19,lambda$registerDefaultDeadLetterQueueIfPresent$40,deadLetterQueue,lambda$new$10,lambda$selectProcessingGroupByType$30,lambda$new$11,processorNameForProcessingGroup,listenerInvocationErrorHandler,errorHandler,lambda$initializeProcessors$29,addInterceptors,lambda$addInterceptors$48,lambda$new$9,selectProcessingGroupByType,lambda$selectProcessingGroupByType$31,retrieveHandlerDefinition,lambda$new$25,initializeProcessors,lambda$registerEventHandlerInvokers$32,lambda$new$18,lambda$new$3,lambda$new$6,lambda$new$7,noPsepCustomization,lambda$registerEventHandler$52",111,1,""
"org.axonframework.config.DefaultConfigurer",97,"defaultQueryGateway,lambda$static$0,lambda$null$43,lambda$onShutdown$54,lambda$configureEmbeddedEventStore$42,registerQueryHandler,lambda$invokeLifecycleHandlers$52,lambda$registerCommandHandler$33,lambda$onStart$53,lambda$registerQueryHandler$34,lambda$registerMessageHandler$38,invokeInitHandlers,prepareModules,lambda$registerMessageHandler$40,lambda$registerQueryHandler$37,lambda$registerMessageHandler$41,lambda$null$32,lambda$invokeInitHandlers$48,lambda$prepareModules$45,verifyIdentifierFactory,lambda$invokeShutdownHandlers$50,lambda$invokeLifecycleHandlers$51,lambda$null$46,lambda$null$31,lambda$registerHandlerDefinition$44,lambda$null$36,lambda$null$17,lambda$null$25,prepareMessageHandlerRegistrars,lambda$registerMessageHandler$39,invokeLifecycleHandlers,lambda$prepareMessageHandlerRegistrars$47,lambda$invokeStartHandlers$49,lambda$null$12,registerCommandHandler,lambda$registerCommandHandler$30,lambda$null$35,defaultQueryUpdateEmitter,jpaConfiguration,lambda$defaultQueryGateway$11,lambda$jpaConfiguration$6,eventProcessing,lambda$jpaConfiguration$8,lambda$defaultResourceInjector$19,defaultScopeAwareProvider,invokeShutdownHandlers,defaultEventBus,lambda$jpaConfiguration$9,lambda$new$2,defaultDeadlineManager,lambda$jpaConfiguration$7,lambda$new$1,lambda$defaultHandlerDefinition$16,defaultSerializer,lambda$defaultSnapshotter$26,lambda$defaultSerializer$24,defaultParameterResolverFactory,lambda$defaultConfiguration$4,lambda$eventProcessing$28,lambda$defaultEventGateway$23,lambda$configureMessageMonitor$29,lambda$eventProcessing$27,lambda$defaultQueryBus$13,lambda$defaultDeadlineManager$21,lambda$defaultCommandBus$18,lambda$defaultScopeAwareProvider$20,defaultComponent,lambda$defaultParameterResolverFactory$15,defaultCommandGateway,defaultEventGateway,defaultCommandBus,lambda$jpaConfiguration$5,registerComponent,lambda$defaultEventBus$22,lambda$defaultCommandGateway$10,defaultHandlerDefinition,lambda$new$3,defaultResourceInjector,defaultSnapshotter,defaultConfiguration,defaultSpanFactory,defaultQueryBus,lambda$defaultQueryUpdateEmitter$14,registerModule,retrieveHandlerDefinition,defaultUpcasterChain",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"assertValidWorkingAggregateState,lambda$when$2,failIllegalStateChange,givenCommands,buildResultValidator,currentTime,when,handleDeadline,andGiven,whenTimeAdvancesTo,andGivenCommands,getHandlerDefinition,lambda$null$5,detectIllegalStateChanges,lambda$null$3,executeAtSimulatedTime,lambda$givenState$0,ensureRepositoryConfiguration,whenTimeElapses,getParameterResolverFactory,lambda$when$8,lambda$andGivenCommands$1,registerFieldFilter,finalizeConfiguration,registerRepository,registerAggregateCommandHandlers,aggregateModel,ensureValuesEqual,lambda$when$7,registerRepositoryProvider,registerCommandHandler,clearGivenWhenState,lambda$whenInvoking$6,andGivenCurrentTime,lambda$buildResultValidator$9,useStateStorage,lambda$whenConstructing$4,getRepositoryProvider,given",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectNoScheduledDeadlineMatching,expectTriggeredDeadlinesMatching,expectException,expectExceptionMessage,lambda$expectScheduledDeadlineWithName$1,expectResultMessageMatching,lambda$expectScheduledDeadlineWithName$0,verifyPayloadEquality,expectScheduledDeadlineMatching,expectResultMessagePayload,expectExceptionDetails,verifyMetaDataEquality,expectEvents,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectNoScheduledDeadlineMatching$5,lambda$expectNoScheduledDeadlineMatching$3,lambda$expectNoScheduledDeadlineWithName$4,expectTriggeredDeadlines,recordException,lambda$expectNoScheduledDeadlineWithName$2",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"lambda$expectNoScheduledDeadlineMatching$4,expectNoScheduledEventMatching,lambda$expectNoScheduledDeadlineWithName$5,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$6,lambda$expectNoScheduledDeadlineWithName$7,lambda$expectScheduledDeadlineWithName$2,expectScheduledDeadlineMatching,lambda$registerStartRecordingCallback$0,expectScheduledEventMatching,lambda$expectNoScheduledDeadlineWithName$3,expectTriggeredDeadlinesMatching,lambda$expectScheduledDeadlineWithName$1,expectTriggeredDeadlines",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$300,access$500,invokeShutdownHandlers,access$600,access$1400,access$200,access$1500,access$1300,access$1100,access$700,defaultComponent,invokeStartHandlers,access$800,access$900,access$1000,access$1200,access$400",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"registerLifecycleHandler,lambda$getComponent$1,isEarlierPhaseDuringShutdown,lambda$null$0,isEarlierPhaseDuringStartUp,lambda$registerLifecycleHandler$2",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"registerStartRecordingCallback,startRecording",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"registerCommandGateway,registerFieldFilter,getResourceInjector,getHandlerDefinition,getParameterResolverFactory,handleInSaga,givenAggregate,timeCorrectedEventMessage,handleDeadline,currentTime,getPublisherFor,lambda$handleInSaga$1,registerResource,getCommandBus,ensureSagaResourcesInitialized,lambda$null$0",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"assertValidRecording,recordException",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$602,access$600,access$900,access$700,access$800",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"lambda$start$0,lambda$commit$4,lambda$rollback$8,commitAsNested,phase,lambda$start$1,notifyHandlers,lambda$start$3,changePhase,onRollback,commitAsRoot,addHandler,lambda$commit$5,setPhase,lambda$commitAsNested$6,lambda$rollback$7,lambda$null$2,setRollbackCause,delegateAfterCommitToParent",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"lambda$resetTokens$5,supportsReset,lambda$statusUpdater$13,lambda$null$8,shutdownAsync,lambda$new$2,lambda$null$9,calculateIdentifier,releaseSegment,lambda$null$7,resetTokens,lambda$singleStatusUpdater$12,lambda$getTokenStoreIdentifier$3,singleStatusUpdater,lambda$new$0,start,lambda$resetTokens$10,isRunning,statusUpdater,lambda$resetTokens$6,lambda$calculateIdentifier$4,spawnWorker,lambda$null$1,lambda$null$11",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"lambda$toLetter$8,lambda$amountOfSequences$16,amountOfSequences,sequenceSize,lambda$enqueue$0,lambda$deadLetters$6,getMaxIndexForSequence,lambda$enqueue$1,toLetter,isFull,lambda$getMaxIndexForSequence$17,lambda$findFirstLetterOfEachAvailableSequence$10,getProcessingStartedLimit,findFirstLetterOfEachAvailableSequence,lambda$toLetter$7,lambda$processLetterAndFollowing$9,lambda$claimDeadLetter$12,lambda$findNextDeadLetter$11,toStringSequenceIdentifier,entityManager,lambda$clear$13,getNextIndexForSequence,lambda$enqueue$3,processLetterAndFollowing,lambda$size$15,findNextDeadLetter,lambda$deadLetterSequence$5,lambda$sequenceSize$14,claimDeadLetter,lambda$evict$4,lambda$enqueue$2,requeue,evict",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"getMaxIndexForSequence,lambda$findNextDeadLetter$11,lambda$findFirstLetterOfEachAvailableSequence$10,findNextDeadLetter,lambda$getMaxIndexForSequence$17,processLetterAndFollowing,getNextIndexForSequence,lambda$amountOfSequences$16,getProcessingStartedLimit,lambda$deadLetterSequence$5,lambda$size$15,lambda$toLetter$8,toLetter,findFirstLetterOfEachAvailableSequence,lambda$processLetterAndFollowing$9,lambda$toLetter$7,claimDeadLetter,lambda$enqueue$1,lambda$deadLetters$6,requeue,lambda$enqueue$0,lambda$enqueue$3,lambda$evict$4,lambda$enqueue$2,toStringSequenceIdentifier,isFull,entityManager,sequenceSize,evict,amountOfSequences,lambda$claimDeadLetter$12,lambda$sequenceSize$14,lambda$clear$13",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$doEmit$12,inStartedPhaseOfUnitOfWork,runOnAfterCommitOrNow,lambda$null$6,lambda$doComplete$17,emitError,intercept,lambda$null$18,lambda$null$7,lambda$completeExceptionally$10,payloadMatchesQueryResponseType,doEmit,lambda$emit$5,lambda$doEmit$14,lambda$runOnAfterCommitOrNow$21,lambda$payloadMatchesQueryResponseType$15,lambda$registerUpdateHandler$3,lambda$registerUpdateHandler$2,lambda$registerUpdateHandler$1,lambda$queryUpdateHandlerRegistered$0,lambda$registerDispatchInterceptor$11,lambda$null$20,lambda$doCompleteExceptionally$19,lambda$complete$9,lambda$emit$8,doCompleteExceptionally,doComplete,lambda$registerUpdateHandler$4,lambda$null$16,lambda$null$13",31,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"createMessage,andThen,lambda$null$8,lambda$handle$3,lambda$handle$6,publishOnEventBus,handle,initSequence,applyMessageOrPayload,doApply,lambda$execute$2,registerRoot,lambda$andThenApply$13,lambda$doApply$11,lambda$registerRoot$0,lambda$findHandlerAndHandleCommand$10,lambda$createMessage$12,rootType,initialize,publish,lambda$handle$4,lambda$handle$5,lambda$handle$7,lambda$invoke$1,lambda$findHandlerAndHandleCommand$9,findHandlerAndHandleCommand",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$getComponent$8,lambda$findModules$0,lambda$eventProcessingConfiguration$3,eventBus,getModules,findModules,aggregateConfiguration,lambda$aggregateConfiguration$6,lambda$findModules$1,getComponent,lambda$eventProcessingConfiguration$4,lambda$aggregateConfiguration$5,lambda$resourceInjector$2,lambda$aggregateConfiguration$7",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$900,access$1200,access$2000,access$1000,access$700,access$1800,access$2200,access$1300,access$600,access$800,access$2100,getState,access$1400,access$1500,access$1600,doSleepFor,access$1100,access$1700",18,1,""
"org.axonframework.config.Configurer",29,"lambda$configureMessageMonitor$1,eventProcessing,configureAggregate,configureMessageMonitor,registerQueryHandler,registerCommandHandler,registerModule,lambda$configureMessageMonitor$0,buildConfiguration,registerComponent",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$900,access$1200,processingLoop,access$1000,access$1300,access$800,getState,access$1400,access$1500,access$1100",10,1,""
"org.axonframework.config.Configuration",27,"spanFactory,correlationDataProviders,messageMonitor,eventBus,parameterResolverFactory,getComponent,handlerDefinition",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$700,access$600",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$2000,access$1000,access$800,releaseSegment",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$2000,access$1000,access$800",3,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$handle$6,lambda$canHandle$4,getAssociationValues,handle,lambda$null$5,lambda$handle$7,canHandle,lambda$handle$8,lambda$execute$2,lambda$new$0,lambda$invoke$1,lambda$null$3",13,1,""
"org.axonframework.config.Configuration",25,"spanFactory,snapshotFilter,scopeAwareProvider,serializer,eventSerializer,upcasterChain,messageSerializer,correlationDataProviders,messageMonitor,queryBus,eventBus,parameterResolverFactory,findModules,repository,getComponent,commandBus,eventStore,handlerDefinition",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"lambda$evict$1,builder,getLastTouchedSequence,lambda$process$5,lambda$process$4,maximumNumberOfSequencesReached,lambda$process$3,lambda$process$6,maximumSequenceSizeReached,lambda$clear$7,isFull,lambda$requeue$2,evict,lambda$enqueue$0,requeue,toIdentifier,contains",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$getSubscriptionQueryResult$7,lambda$streamingQuery$3,lambda$getSubscriptionQueryResult$5,lambda$getSubscriptionQueryResult$6,getSubscriptionQueryResult,getSubscriptionQueryMessage,lambda$query$0,lambda$streamingQuery$4,lambda$query$1,lambda$registerDispatchInterceptor$8,lambda$query$2,processInterceptors",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"isErrorState,unmarkError,isCaughtUp,caughtUp,markError,getSegment,advancedTo",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"createMessage,publishWithRevision,lambda$addDetailsFromEvent$8cace316$1,lambda$publishEventMessage$0,addDetailsFromObject,publishEventMessage,schedule,shutdown,publish,lambda$addDetailsFromObject$98640057$1,lambda$addDetailsFromEvent$1f732a71$1,addDetailsFromEvent,lambda$addDetailsFromObject$515c35f2$1",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"lambda$fetchAvailableSegments$1,loadToken,initializeTokenSegments,lambda$fetchSegments$0,validateSegment,lambda$fetchAvailableSegments$2,fetchSegments,getConfig,lambda$retrieveStorageIdentifier$3",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"getConfig,loadToken,initializeTokenSegments,lambda$fetchSegments$0,fetchSegments,lambda$fetchAvailableSegments$1,lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$2,validateSegment",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"advanceToNextTrigger,schedule,lambda$cancelSchedule$0,advanceTimeTo,lambda$registerHandlerInterceptor$4,consumeDeadline,processDispatchInterceptors,lambda$cancelAllWithinScope$2,lambda$registerDispatchInterceptor$3,lambda$cancelAll$1,lambda$consumeDeadline$5",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"isReplay,lambda$getTokenAtReset$2,advancedTo,context,getTokenAtReset,createReplayToken,lambda$replayContext$1,replayContext,lambda$isReplay$0",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"openStream,lambda$doAppendEvents$1,lambda$publish$0,lambda$doAppendEvents$2,injectAggregateIdentifier,doAppendEvents,lambda$subscribe$3,lambda$registerDispatchInterceptor$4",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"lambda$registerHandlerInterceptor$7,lambda$registerDispatchInterceptor$6,lambda$subscribe$4,createRepository,lambda$initializePublisherThreads$0,lambda$subscribe$5,dispatch,lambda$initializeInvokerThreads$1,initializeInvokerThreads,doDispatch,initializePublisherThreads,lambda$dispatch$2,lambda$doDispatch$3",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"nextSequenceNumber,initActiveIfRequired,next",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState,markError,advancedTo",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState,split,isMerging,mergeCompletedPosition,isCaughtUp,getCurrentPosition,getResetPosition,getTrackingToken,getSegment,getError,isReplaying",11,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"getSnapshotSerializer,getEventSerializer,isFirstDomainEvent,lambda$readSnapshot$0,readSnapshotData,readEventData,storeSnapshot,appendEvents,buildExceptionMessage,lambda$readSnapshot$1",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"lambda$getLastSequenceNumber$0,hasNext,next",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"stopTailingGlobalStream,lambda$closePrivateStream$0,closePrivateStream,lastToken,behindGlobalCache,nextAvailable,peekGlobalStream,nextNode,peek,peekPrivateStream",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"behindGlobalCache,lastToken,peek,lambda$closePrivateStream$0,nextAvailable,peekPrivateStream,nextNode,closePrivateStream,stopTailingGlobalStream,peekGlobalStream",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"getPayload,isExceptional,withMetaData,findExceptionResult,andMetaData",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getAssociationValues,root,isActive,getSagaIdentifier",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getScheduledDeadlines,getTriggeredDeadlines,getCurrentDateTime",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$makeCurrent$0,lambda$recordException$1",2,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",18,"setDeadLetterFields,setDomainEventFields,setTrackedEventFields,setEventFields,setIdFields,sequenceSizeStatement",8,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"initializeTokenSegments,lambda$fetchSegments$1,lambda$storeToken$0,fetchSegments",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"lambda$stagedDomainEventMessages$0,lambda$readEvents$3,stagedDomainEventMessages,handleSnapshotReadingError,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$2",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"readNext,next",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$100,access$000",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$3,lambda$handle$2,lambda$handle$0,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"queryResultType,lambda$new$0,unwrapType,upperBound",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$createHandlerSpan$1,lambda$createInternalSpan$8,lambda$null$5,lambda$null$6,lambda$createDispatchSpan$2,lambda$getSpanMessage$3,getSpanMessage,lambda$createInternalSpan$7,lambda$createRootTrace$0,lambda$getSpanMessage$4",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$removeAll$2,purgeItems,lambda$containsKey$3,lambda$computeIfPresent$4,lambda$registerCacheEntryListener$0,lambda$get$1",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"lambda$eventProcessor$0,lambda$initialize$2,lambda$initialize$1,ensureInitialized,processingGroup,lambda$ensureInitialized$3,initialize",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$runOnPrepareCommitOrNow$0,lambda$registerHandlerInterceptor$2,dispatchInterceptors,lambda$registerDispatchInterceptor$1",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"mergePosition,lambda$mergePosition$1,lambda$mergePosition$0,doAdvance",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"skipMessagesWithPayloadTypeOf,nextAvailable,lambda$skipMessagesWithPayloadTypeOf$3,lambda$setOnAvailableCallback$4,lambda$setOnAvailableCallback$5,lambda$new$0,messageSource,lambda$doConsumeNext$1,lambda$peekForMessages$2,peekForMessages,doConsumeNext",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"split,getTrackingToken,getSegment",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken,getSegment",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getTrackingToken,getSegment,split",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"spanFactory,eventBus,parameterResolverFactory,repository,commandBus,eventStore,getComponent,handlerDefinition",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll,deadlineNameMatch",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$processInUnitOfWork$3,getName,getSpanName,lambda$null$2,processInUnitOfWork,lambda$null$1,lambda$registerHandlerInterceptor$0",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"mergePosition,lowerSegmentToken,position,isMergeInProgress,upperSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"isReplay,position,getTokenAtReset,createReplayToken,lowerBound",6,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",16,"getIdentifier,getSequenceIndex,getSequenceIdentifier",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$canHandle$2,lambda$new$0,lambda$handle$3,lambda$new$1",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"withMetaData,optionalExceptionResult,andMetaData,isExceptional",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"publishOnEventBus,doApply,publish",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asResponseMessage,asNullableResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType,getData",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,isFactoryHandler",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,routingKey",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$canHandleType$3,prepareReset,handle,lambda$prepareReset$4,lambda$canHandle$1,lambda$handle$0,canHandle,lambda$canHandleType$2",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"andMetaData,getType,getAggregateIdentifier,withMetaData,getSequenceNumber",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"trackingToken,andMetaData,withTrackingToken,withMetaData",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"hasNextAvailable,close,setOnAvailableCallback,skipMessagesWithPayloadTypeOf,access$300,peek",7,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",15,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getIndex,getSequenceIdentifier,getId",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getId,getSequenceIdentifier,getIndex",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"parametersMatch,checkAndRethrowForExceptionOrError,resolveParameterValues,typeMatches",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"canHandle,handle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isGenericAssignableFrom,isArray,isGenericArrayType,isAssignableFrom,isWildcardType,isTypeVariable,isParameterizedType,isWildcardTypeWithMatchingUpperBound,isParameterizedTypeOfExpectedType",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"getVersion,declaredType,type",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"version,identifier,initialize,isDeleted",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"access$300,access$500,newInstance,getAggregate,load,send,access$200",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createDispatchSpan$2,lambda$createRootTrace$0,lambda$registerSpanAttributeProvider$5,lambda$createHandlerSpan$1,lambda$createInternalSpan$4,lambda$createInternalSpan$3",6,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"lambda$subscribe$1,localSegment,updateFilter,dispatch,lambda$registerDispatchInterceptor$2,intercept,shutdownDispatching,disconnect,lambda$dispatch$0",9,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"lambda$asDeadlineMessage$0,andMetaData,withMetaData,lambda$asDeadlineMessage$1,asDeadlineMessage",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"lambda$performReset$2,lambda$canHandle$0,canHandle,performReset,delegates,lambda$canHandleType$1,flatten",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"exceptionDetails,optionalExceptionResult,isExceptional,withMetaData,andMetaData",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$1,lambda$new$0",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"types,type",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"storeAssociationValue,getSagaTypeName,serializedSagaAsString,serializedObjectType,sagaEntryEntityName,createSagaEntry,addNamedQueriesTo,loadAssociationValues,removeAssociationValue",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"sagaEntryEntityName,getSagaTypeName,serializedSagaAsString,removeAssociationValue,serializedObjectType,storeAssociationValue,createSagaEntry,addNamedQueriesTo,loadAssociationValues",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"withMetaData,getQueryName,getResponseType,andMetaData",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getQueryName,getResultType",2,1,""
"org.axonframework.config.Configuration",13,"spanFactory,eventProcessingConfiguration,parameterResolverFactory,resourceInjector,handlerDefinition",5,1,""
"org.axonframework.eventhandling.EventMessage",13,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"withTrackingToken,trackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"lowerSegmentToken,isLowerSegmentAdvanced,upperSegmentToken,isUpperSegmentAdvanced",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"sequencingPolicyMatchesSegment,invokeHandlers,detectList,sequenceIdentifier,lambda$new$0,lambda$canHandleType$1,performReset,hasHandler",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$1,lambda$readEvents$0",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"diagnostics,lambda$new$0,message,enqueuedAt,cause",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"addCachedAssociations,lambda$findSagas$0,removeAssociationValueFromCache,lambda$deleteSaga$1,lambda$removeAssociationValueFromCache$2,lambda$updateSaga$4,cacheKey,lambda$addCachedAssociations$3",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"validateIdentifier,lambda$newInstance$1,lambda$load$2,lambda$getAggregate$4,load,canResolve,lambda$load$3,lambda$loadOrCreate$0",8,1,""
"org.axonframework.test.saga.EventValidator",13,"handle,unwrapEvent,createEqualToMatchers,assertPublishedEventsMatching,lambda$startRecording$0",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"withMetaData,andMetaData,getCommandName",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"canResolve,lambda$load$0,load,newInstance,removeFromCache",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"getTimestamp,withMetaData,andMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"shutdown,buildJobDetail,buildTrigger,initialize,schedule,lambda$cancelSchedule$1,lambda$schedule$0",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"readEvents,lambda$readEvents$0",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"version,isLockHeld,getWrappedAggregate",3,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"getCurrentDateTime,initializeAt,advanceTimeTo,advanceTimeBy",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"registerHandlerInterceptor,registerDispatchInterceptor,dispatch,builder,subscribe",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"send,lambda$send$0,asRuntime",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"load,newInstance,loadOrCreate",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"canResolve,send,lambda$send$1,lambda$send$0,lambda$send$2,load",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.modelling.saga.Saga",11,"isActive,getSagaIdentifier,getAssociationValues",3,1,""
"org.axonframework.queryhandling.QueryGateway",11,"streamingQuery,scatterGather,subscriptionQuery,query",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"andMetaData,withMetaData,getQueryName",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$800",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"doDeserialize,classForType,typeIdentifierOf,typeForClass,getConverter,doSerialize,registerConverters,revisionOf",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"builder,getReader,registerConverters,getWriter,classForType,typeForClass,resolveClassName",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"load,newInstance,canResolve,lambda$newInstance$0",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.test.saga.EventValidator",11,"assertPublishedEventsMatching,assertPublishedEvents,startRecording",3,1,""
"org.axonframework.commandhandling.CommandMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"createListenerAdapter,lambda$registerCacheEntryListener$0,doRegisterListener",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"aggregateFactory,repository,aggregateType,snapshotFilter",4,1,""
"org.axonframework.config.Configuration",10,"eventProcessingConfiguration,findModules",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"processInUnitOfWork,canHandle,reportIgnored",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData",1,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"sequencingPolicyMatchesSegment,invokeHandlers,eventHandlers,sequenceIdentifier,performReset",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"processingStatus,lambda$isReplaying$0,resetTokens",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.MessageDecorator",10,"serializePayload,getPayload",2,1,""
"org.axonframework.messaging.MessageDecorator",10,"describeType,getMetaData,getIdentifier,getPayload,describeTo",5,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"mergedWith,isEmpty,getAll,contains,get",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"classForType,getSerializedType,revisionOf",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,getGlobalIndex,next",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,lambda$lowerBound$0,compareTo,lambda$covers$2,lambda$upperBound$1",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTailToken,createTokenSince,createHeadToken,sourceId,createTokenAt",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"nextAvailable,alterToken",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$600,access$400,access$500,access$300",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$constructHandlerAttributesFor$1,lambda$null$0,constructHandlerAttributesFor,prefixedKey",4,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName,loadAssociations",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"toString,access$100,hashes,equals",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateFactory,aggregateType",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900,access$2300,access$2400,access$2200",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"unwrap,advancedTo,upperBound,lowerBound",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"size,findSagas",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"registerConverter,canConvert",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.test.utils.RecordingCommandBus",8,"clearCommands,getDispatchedCommands",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getAggregateIdentifier,getSequenceNumber,getType",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"supportsReset,handle,prepareReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"getTokenForStream,advancedTo",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",7,"lambda$handle$0,lambda$process$1,lambda$registerHandlerInterceptor$2",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"handle,canHandle,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"canHandle,lambda$handle$0,handle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"lambda$getProperty$0,getHandlerName,getProperty,createProperty",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"handle",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"lock,queuedThreads,isHeldBy",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"handle,prepareReset",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"openStream,sourceId",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"lambda$unexpectedEvents$0,unexpectedEvents",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"isEmpty,getAll",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$600,access$500,access$400",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$600,access$500",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"resolveReturnValue,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$700",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.Repository",6,"newInstance,load,loadOrCreate",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$findHandlerMethods$1,lambda$resolveAssociation$0",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$1,lambda$findSagas$0",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getContentType,getData,getType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.test.utils.RecordingCommandBus",6,"setCallbackBehavior",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"disposeIfUnused,checkForDeadlock",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getIndex,getGaps",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"builder",1,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0,lambda$onMessageIngested$1",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"convert,bytesFrom",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
