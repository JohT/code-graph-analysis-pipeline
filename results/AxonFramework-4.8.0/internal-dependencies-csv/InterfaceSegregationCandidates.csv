"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp,getIdentifier",2,9,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType,getAggregateIdentifier,getSequenceNumber",3,6,""
"org.axonframework.messaging.ResultMessage",9,"isExceptional,exceptionResult",2,6,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,5,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,5,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,3,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getType,getAggregateIdentifier,getSequenceNumber",3,3,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"getGaps,newInstance,withGapsTruncatedAt,getIndex,advanceTo",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.eventhandling.TrackerStatus",17,"split,getTrackingToken,getSegment",3,2,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initialize,initSequence,getAggregateRoot",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getAggregateIdentifier,getSequenceNumber",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken,withTrackingToken",2,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.messaging.ResultMessage",10,"isExceptional,exceptionResult",2,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",160,"lambda$new$6,trackingEventProcessor,annotatedProcessingGroupOfType,subscribingEventProcessor,lambda$null$44,lambda$null$37,lambda$static$1,lambda$null$43,lambda$pooledStreamingEventProcessor$71,lambda$null$28,lambda$null$34,lambda$null$35,lambda$null$13,pooledStreamingEventProcessor,defaultExecutor,lambda$null$45,trackingEventProcessorConfig,lambda$null$21,lambda$null$38,lambda$null$33,lambda$null$20,lambda$static$0,lambda$pooledStreamingEventProcessor$72,lambda$annotatedProcessingGroupOfType$73,lambda$new$4,eventProcessors,lambda$new$19,lambda$registerEventHandler$52,registerTrackingEventProcessor,lambda$new$10,lambda$deadLetteringInvoker$42,lambda$addInterceptors$49,lambda$new$8,lambda$registerDeadLetterQueue$69,lambda$eventProcessors$50,lambda$new$17,processorNameForProcessingGroup,lambda$usingTrackingEventProcessors$58,lambda$addInterceptors$48,lambda$registerTransactionManager$65,sequencingPolicy,tokenStore,listenerInvocationErrorHandler,registerPooledStreamingEventProcessorConfiguration,selectProcessingGroupByType,lambda$new$14,lambda$registerHandlerInterceptor$62,lambda$registerSubscribingEventProcessor$60,noPsepCustomization,registerDefaultDeadLetterQueueIfPresent,lambda$registerTrackingEventProcessor$55,validateConfigInitialization,lambda$new$22,lambda$registerRollbackConfiguration$64,registerTrackingEventProcessorConfiguration,lambda$new$25,lambda$selectProcessingGroupByType$31,lambda$registerTrackingEventProcessor$54,lambda$new$2,lambda$new$11,transactionManager,registerDeadLetterQueue,lambda$deadLetteringInvoker$41,lambda$initializeProcessors$29,lambda$registerDeadLetterPolicy$70,lambda$registerErrorHandler$61,lambda$new$18,registerEventHandlerInvokers,lambda$registerEventHandlerInvokers$36,lambda$new$5,lambda$new$7,deadLetterQueue,initializeProcessors,deadLetteringInvoker,retrieveHandlerDefinition,buildEventProcessor,lambda$usingSubscribingEventProcessors$57,lambda$registerSagaManagers$46,lambda$registerPooledStreamingEventProcessor$68,defaultEventProcessor,lambda$new$3,lambda$registerSequencingPolicy$63,registerEventProcessor,lambda$new$23,lambda$new$12,simpleInvoker,packageOfObject,lambda$selectProcessingGroupByType$30,errorHandler,messageMonitor,lambda$registerTrackingEventProcessorConfiguration$67,lambda$registerDefaultDeadLetterQueueIfPresent$40,lambda$registerEventHandlerInvokers$39,lambda$registerTokenStore$56,noTepCustomization,lambda$new$27,lambda$new$16,lambda$registerEventHandlerInvokers$32,lambda$registerListenerInvocationErrorHandler$53,rollbackConfiguration,lambda$sagaConfigurations$51,registerSagaManagers,lambda$new$15,lambda$registerTrackingEventProcessorConfiguration$66,lambda$new$26,lambda$buildEventProcessor$47,lambda$new$24,lambda$new$9,lambda$usingPooledStreamingEventProcessors$59,addInterceptors,deadLetterPolicy",111,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$null$12,lambda$static$0,lambda$null$17,defaultUpcasterChain,lambda$null$43,lambda$defaultEventBus$22,lambda$prepareModules$45,defaultCommandBus,lambda$invokeInitHandlers$48,lambda$jpaConfiguration$5,defaultScopeAwareProvider,lambda$invokeLifecycleHandlers$52,prepareModules,lambda$defaultParameterResolverFactory$15,lambda$defaultHandlerDefinition$16,lambda$defaultEventGateway$23,lambda$invokeLifecycleHandlers$51,lambda$defaultConfiguration$4,lambda$null$36,lambda$new$3,lambda$defaultQueryUpdateEmitter$14,lambda$registerCommandHandler$30,lambda$null$32,lambda$registerHandlerDefinition$44,lambda$jpaConfiguration$8,lambda$eventProcessing$28,lambda$jpaConfiguration$6,registerQueryHandler,lambda$eventProcessing$27,registerCommandHandler,defaultParameterResolverFactory,lambda$onStart$53,invokeShutdownHandlers,lambda$invokeShutdownHandlers$50,defaultSpanFactory,defaultEventGateway,lambda$null$31,eventProcessing,registerComponent,lambda$registerQueryHandler$34,lambda$registerMessageHandler$41,lambda$configureEmbeddedEventStore$42,defaultQueryBus,lambda$defaultSerializer$24,lambda$registerMessageHandler$40,lambda$defaultQueryGateway$11,defaultSerializer,lambda$registerQueryHandler$37,lambda$defaultScopeAwareProvider$20,invokeInitHandlers,lambda$configureMessageMonitor$29,defaultCommandGateway,defaultDeadlineManager,lambda$invokeStartHandlers$49,prepareMessageHandlerRegistrars,lambda$registerMessageHandler$38,retrieveHandlerDefinition,defaultEventBus,lambda$onShutdown$54,lambda$defaultQueryBus$13,jpaConfiguration,lambda$defaultCommandBus$18,registerModule,lambda$defaultResourceInjector$19,defaultResourceInjector,lambda$registerMessageHandler$39,lambda$null$25,defaultHandlerDefinition,lambda$jpaConfiguration$7,lambda$defaultDeadlineManager$21,lambda$jpaConfiguration$9,lambda$new$1,lambda$defaultSnapshotter$26,defaultConfiguration,lambda$defaultCommandGateway$10,defaultSnapshotter,lambda$prepareMessageHandlerRegistrars$47,lambda$registerCommandHandler$33,defaultComponent,verifyIdentifierFactory,defaultQueryUpdateEmitter,invokeLifecycleHandlers,lambda$null$35,lambda$null$46,defaultQueryGateway,lambda$new$2",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"currentTime,ensureValuesEqual,lambda$buildResultValidator$9,lambda$null$3,lambda$null$5,detectIllegalStateChanges,lambda$when$8,failIllegalStateChange,lambda$when$7,aggregateModel,lambda$whenInvoking$6,assertValidWorkingAggregateState,andGiven,when,andGivenCurrentTime,getParameterResolverFactory,clearGivenWhenState,registerRepositoryProvider,whenTimeElapses,ensureRepositoryConfiguration,getHandlerDefinition,whenTimeAdvancesTo,useStateStorage,registerCommandHandler,givenCommands,andGivenCommands,handleDeadline,given,registerAggregateCommandHandlers,buildResultValidator,lambda$when$2,executeAtSimulatedTime,finalizeConfiguration,lambda$andGivenCommands$1,lambda$whenConstructing$4,lambda$givenState$0,getRepositoryProvider,registerFieldFilter,registerRepository",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectException,verifyMetaDataEquality,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineMatching$5,expectResultMessagePayload,lambda$expectNoScheduledDeadlineWithName$4,expectResultMessageMatching,recordException,lambda$expectNoScheduledDeadlineMatching$3,expectTriggeredDeadlines,expectTriggeredDeadlinesMatching,lambda$expectNoScheduledDeadlineWithName$2,lambda$expectScheduledDeadlineWithName$0,expectNoScheduledDeadlineMatching,expectScheduledDeadlineMatching,expectExceptionMessage,expectEvents,lambda$expectNoScheduledDeadlineWithName$6,verifyPayloadEquality,expectExceptionDetails",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"expectNoScheduledEventMatching,lambda$expectNoScheduledDeadlineWithName$3,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$5,lambda$expectNoScheduledDeadlineMatching$4,lambda$expectScheduledDeadlineWithName$2,expectTriggeredDeadlinesMatching,expectScheduledEventMatching,expectTriggeredDeadlines,lambda$expectNoScheduledDeadlineMatching$6,expectScheduledDeadlineMatching,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineWithName$7,lambda$registerStartRecordingCallback$0",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$1200,access$600,invokeStartHandlers,access$1500,access$500,access$1300,access$1000,access$900,invokeShutdownHandlers,access$400,access$200,access$300,access$1100,access$700,access$800,access$1400,defaultComponent",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"lambda$null$0,isEarlierPhaseDuringShutdown,isEarlierPhaseDuringStartUp,lambda$registerLifecycleHandler$2,registerLifecycleHandler,lambda$getComponent$1",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"startRecording,registerStartRecordingCallback",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"getCommandBus,lambda$null$0,registerFieldFilter,ensureSagaResourcesInitialized,handleInSaga,handleDeadline,givenAggregate,getPublisherFor,registerResource,getParameterResolverFactory,lambda$handleInSaga$1,getResourceInjector,registerCommandGateway,currentTime,timeCorrectedEventMessage,getHandlerDefinition",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"assertValidRecording,recordException",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$800,access$700,access$600,access$900,access$602",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"changePhase,addHandler,lambda$start$3,commitAsNested,lambda$start$1,lambda$commit$4,lambda$commit$5,lambda$start$0,setPhase,phase,delegateAfterCommitToParent,lambda$rollback$7,notifyHandlers,commitAsRoot,onRollback,lambda$null$2,lambda$commitAsNested$6,lambda$rollback$8,setRollbackCause",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"resetTokens,supportsReset,lambda$calculateIdentifier$4,lambda$getTokenStoreIdentifier$3,lambda$statusUpdater$13,lambda$new$2,lambda$resetTokens$6,lambda$null$7,calculateIdentifier,lambda$null$1,lambda$singleStatusUpdater$12,statusUpdater,releaseSegment,singleStatusUpdater,lambda$null$11,isRunning,lambda$null$8,lambda$resetTokens$10,spawnWorker,lambda$resetTokens$5,start,shutdownAsync,lambda$new$0,lambda$null$9",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"getNextIndexForSequence,lambda$findNextDeadLetter$11,lambda$toLetter$7,amountOfSequences,findFirstLetterOfEachAvailableSequence,getMaxIndexForSequence,lambda$processLetterAndFollowing$9,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$getMaxIndexForSequence$17,processLetterAndFollowing,findNextDeadLetter,claimDeadLetter,lambda$toLetter$8,lambda$size$15,getProcessingStartedLimit,lambda$amountOfSequences$16,lambda$claimDeadLetter$12,lambda$clear$13,lambda$enqueue$0,requeue,isFull,lambda$enqueue$3,entityManager,sequenceSize,toStringSequenceIdentifier,lambda$enqueue$1,evict,lambda$enqueue$2,lambda$deadLetters$6,lambda$deadLetterSequence$5,toLetter,lambda$evict$4,lambda$sequenceSize$14",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$deadLetters$6,findFirstLetterOfEachAvailableSequence,lambda$claimDeadLetter$12,lambda$enqueue$3,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$sequenceSize$14,findNextDeadLetter,lambda$toLetter$7,toStringSequenceIdentifier,amountOfSequences,lambda$enqueue$1,claimDeadLetter,lambda$enqueue$2,lambda$evict$4,entityManager,requeue,isFull,lambda$toLetter$8,lambda$processLetterAndFollowing$9,processLetterAndFollowing,getMaxIndexForSequence,lambda$getMaxIndexForSequence$17,toLetter,lambda$findNextDeadLetter$11,getProcessingStartedLimit,lambda$amountOfSequences$16,sequenceSize,lambda$size$15,getNextIndexForSequence,lambda$enqueue$0,lambda$deadLetterSequence$5,lambda$clear$13,evict",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"doEmit,inStartedPhaseOfUnitOfWork,lambda$payloadMatchesQueryResponseType$15,lambda$registerUpdateHandler$1,lambda$null$13,lambda$registerDispatchInterceptor$11,lambda$emit$8,doComplete,lambda$emit$5,lambda$doCompleteExceptionally$19,lambda$runOnAfterCommitOrNow$21,lambda$registerUpdateHandler$4,lambda$registerUpdateHandler$2,lambda$complete$9,payloadMatchesQueryResponseType,lambda$queryUpdateHandlerRegistered$0,lambda$registerUpdateHandler$3,lambda$null$16,lambda$null$20,lambda$null$6,lambda$doComplete$17,intercept,doCompleteExceptionally,runOnAfterCommitOrNow,lambda$doEmit$12,lambda$doEmit$14,lambda$completeExceptionally$10,lambda$null$18,emitError,lambda$null$7",31,1,""
"org.axonframework.test.saga.SagaTestFixture",37,"handleInSaga,access$300,currentTime",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"initSequence,handle,rootType,lambda$handle$7,doApply,lambda$handle$3,registerRoot,createMessage,lambda$createMessage$12,lambda$null$8,lambda$doApply$11,lambda$registerRoot$0,publishOnEventBus,lambda$andThenApply$13,lambda$invoke$1,applyMessageOrPayload,publish,lambda$findHandlerAndHandleCommand$9,lambda$execute$2,lambda$handle$6,lambda$handle$5,lambda$findHandlerAndHandleCommand$10,andThen,lambda$handle$4,findHandlerAndHandleCommand,initialize",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$resourceInjector$2,lambda$getComponent$8,lambda$aggregateConfiguration$7,aggregateConfiguration,lambda$eventProcessingConfiguration$3,findModules,lambda$aggregateConfiguration$5,lambda$aggregateConfiguration$6,lambda$findModules$0,lambda$findModules$1,getComponent,getModules,eventBus,lambda$eventProcessingConfiguration$4",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$1300,access$900,access$1000,access$800,doSleepFor,access$1800,access$1400,access$1100,access$1600,getState,access$1500,access$2100,access$600,access$2200,access$700,access$1200,access$1700,access$2000",18,1,""
"org.axonframework.config.Configurer",29,"lambda$configureMessageMonitor$0,eventProcessing,buildConfiguration,configureAggregate,registerModule,configureMessageMonitor,registerComponent,registerQueryHandler,lambda$configureMessageMonitor$1,registerCommandHandler",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1300,access$900,access$1000,access$800,access$1400,access$1100,getState,access$1500,access$1200,processingLoop",10,1,""
"org.axonframework.config.Configuration",27,"messageMonitor,parameterResolverFactory,correlationDataProviders,spanFactory,eventBus,handlerDefinition,getComponent",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$600,access$700",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,access$800,releaseSegment,access$2000",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,access$800,access$2000",3,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$handle$8,lambda$null$5,lambda$null$3,handle,canHandle,lambda$canHandle$4,lambda$invoke$1,getAssociationValues,lambda$execute$2,lambda$new$0,lambda$handle$7,lambda$handle$6",13,1,""
"org.axonframework.config.Configuration",25,"messageMonitor,parameterResolverFactory,eventSerializer,repository,findModules,serializer,correlationDataProviders,queryBus,scopeAwareProvider,commandBus,getComponent,spanFactory,messageSerializer,eventBus,upcasterChain,eventStore,snapshotFilter,handlerDefinition",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"contains,lambda$requeue$2,lambda$clear$7,lambda$process$6,lambda$process$4,maximumNumberOfSequencesReached,lambda$process$5,getLastTouchedSequence,lambda$enqueue$0,lambda$evict$1,evict,isFull,builder,toIdentifier,requeue,lambda$process$3,maximumSequenceSizeReached",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$query$1,lambda$getSubscriptionQueryResult$7,lambda$query$0,getSubscriptionQueryResult,lambda$streamingQuery$3,lambda$getSubscriptionQueryResult$6,processInterceptors,lambda$streamingQuery$4,lambda$getSubscriptionQueryResult$5,lambda$query$2,lambda$registerDispatchInterceptor$8,getSubscriptionQueryMessage",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"caughtUp,markError,isCaughtUp,advancedTo,unmarkError,getSegment,isErrorState",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"publish,createMessage,publishWithRevision,lambda$addDetailsFromEvent$8cace316$1,addDetailsFromObject,lambda$addDetailsFromObject$515c35f2$1,publishEventMessage,addDetailsFromEvent,lambda$publishEventMessage$0,shutdown,lambda$addDetailsFromObject$98640057$1,lambda$addDetailsFromEvent$1f732a71$1,schedule",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$1,lambda$fetchAvailableSegments$2,fetchSegments,loadToken,lambda$fetchSegments$0,initializeTokenSegments,validateSegment,getConfig",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"validateSegment,loadToken,lambda$fetchAvailableSegments$1,lambda$fetchAvailableSegments$2,getConfig,lambda$fetchSegments$0,initializeTokenSegments,fetchSegments,lambda$retrieveStorageIdentifier$3",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"advanceTimeTo,lambda$consumeDeadline$5,consumeDeadline,lambda$registerHandlerInterceptor$4,lambda$cancelSchedule$0,advanceToNextTrigger,lambda$cancelAll$1,processDispatchInterceptors,schedule,lambda$registerDispatchInterceptor$3,lambda$cancelAllWithinScope$2",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"isReplay,getTokenAtReset,replayContext,createReplayToken,context,lambda$replayContext$1,advancedTo,lambda$isReplay$0,lambda$getTokenAtReset$2",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$doAppendEvents$1,openStream,injectAggregateIdentifier,lambda$publish$0,lambda$doAppendEvents$2,doAppendEvents,lambda$subscribe$3,lambda$registerDispatchInterceptor$4",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"lambda$doDispatch$3,lambda$registerDispatchInterceptor$6,createRepository,lambda$subscribe$4,lambda$initializeInvokerThreads$1,dispatch,initializePublisherThreads,lambda$initializePublisherThreads$0,doDispatch,lambda$registerHandlerInterceptor$7,initializeInvokerThreads,lambda$dispatch$2,lambda$subscribe$5",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"nextSequenceNumber,initActiveIfRequired,next",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"markError,advancedTo,isErrorState",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isReplaying,getError,getCurrentPosition,isCaughtUp,isMerging,split,getTrackingToken,mergeCompletedPosition,getSegment,isErrorState,getResetPosition",11,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"appendEvents,readSnapshotData,lambda$readSnapshot$1,getSnapshotSerializer,buildExceptionMessage,lambda$readSnapshot$0,readEventData,getEventSerializer,isFirstDomainEvent,storeSnapshot",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"hasNext,next,lambda$getLastSequenceNumber$0",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"nextNode,peek,lambda$closePrivateStream$0,stopTailingGlobalStream,peekGlobalStream,closePrivateStream,behindGlobalCache,lastToken,peekPrivateStream,nextAvailable",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"nextNode,stopTailingGlobalStream,lambda$closePrivateStream$0,closePrivateStream,peek,behindGlobalCache,peekGlobalStream,peekPrivateStream,nextAvailable,lastToken",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"withMetaData,isExceptional,andMetaData,getPayload,findExceptionResult",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getSagaIdentifier,isActive,getAssociationValues,root",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getCurrentDateTime,getTriggeredDeadlines,getScheduledDeadlines",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$makeCurrent$0,lambda$recordException$1",2,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",18,"setIdFields,setDomainEventFields,sequenceSizeStatement,setTrackedEventFields,setDeadLetterFields,setEventFields",8,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"lambda$fetchSegments$1,fetchSegments,lambda$storeToken$0,initializeTokenSegments",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"stagedDomainEventMessages,handleSnapshotReadingError,lambda$readEvents$3,lambda$stagedDomainEventMessages$0,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$2",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"hasNext,next",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"readNext,next",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$000,access$100",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$2,lambda$handle$1,lambda$handle$3,lambda$handle$0",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"upperBound,unwrapType,lambda$new$0,queryResultType",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$createDispatchSpan$2,getSpanMessage,lambda$createHandlerSpan$1,lambda$createInternalSpan$8,lambda$getSpanMessage$4,lambda$null$5,lambda$createInternalSpan$7,lambda$getSpanMessage$3,lambda$null$6,lambda$createRootTrace$0",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$registerCacheEntryListener$0,lambda$removeAll$2,lambda$containsKey$3,lambda$get$1,purgeItems,lambda$computeIfPresent$4",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"processingGroup,initialize,lambda$eventProcessor$0,lambda$ensureInitialized$3,lambda$initialize$2,ensureInitialized,lambda$initialize$1",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$runOnPrepareCommitOrNow$0,lambda$registerHandlerInterceptor$2,dispatchInterceptors,lambda$registerDispatchInterceptor$1",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"lambda$mergePosition$0,lambda$mergePosition$1,doAdvance,mergePosition",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"lambda$skipMessagesWithPayloadTypeOf$3,messageSource,lambda$setOnAvailableCallback$5,lambda$doConsumeNext$1,doConsumeNext,lambda$peekForMessages$2,skipMessagesWithPayloadTypeOf,nextAvailable,lambda$new$0,lambda$setOnAvailableCallback$4,peekForMessages",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,getInternalTrackingToken",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"parameterResolverFactory,repository,commandBus,spanFactory,eventBus,eventStore,handlerDefinition,getComponent",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll,deadlineNameMatch",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$registerHandlerInterceptor$0,lambda$null$2,lambda$null$1,processInUnitOfWork,getSpanName,lambda$processInUnitOfWork$3,getName",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"upperSegmentToken,position,isMergeInProgress,mergePosition,lowerSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"isReplay,getTokenAtReset,lowerBound,position,createReplayToken",6,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",16,"getSequenceIndex,getSequenceIdentifier,getIdentifier",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$new$0,lambda$handle$3,lambda$new$1,lambda$canHandle$2",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"isExceptional,withMetaData,andMetaData,optionalExceptionResult",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"doApply,publishOnEventBus,publish",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asResponseMessage,asNullableResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType,getData",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"routingKey,commandName",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$prepareReset$4,canHandle,prepareReset,lambda$canHandle$1,lambda$canHandleType$2,lambda$canHandleType$3,lambda$handle$0,handle",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"getSequenceNumber,getAggregateIdentifier,getType,andMetaData,withMetaData",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"andMetaData,withTrackingToken,withMetaData,trackingToken",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"peek,close,setOnAvailableCallback,hasNextAvailable,skipMessagesWithPayloadTypeOf,access$300",7,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",15,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getSequenceIdentifier,getIndex,getId",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getSequenceIdentifier,getId,getIndex",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"checkAndRethrowForExceptionOrError,resolveParameterValues,parametersMatch,typeMatches",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"canHandle,handle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isGenericArrayType,isParameterizedTypeOfExpectedType,isAssignableFrom,isArray,isWildcardType,isParameterizedType,isTypeVariable,isWildcardTypeWithMatchingUpperBound,isGenericAssignableFrom",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"type,getVersion,declaredType",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"identifier,version,isDeleted,initialize",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"send,load,getAggregate,access$200,access$300,access$500,newInstance",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createRootTrace$0,lambda$createDispatchSpan$2,lambda$registerSpanAttributeProvider$5,lambda$createInternalSpan$4,lambda$createHandlerSpan$1,lambda$createInternalSpan$3",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"disconnect,lambda$subscribe$1,updateFilter,intercept,shutdownDispatching,localSegment,lambda$dispatch$0,lambda$registerDispatchInterceptor$2,dispatch",9,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"andMetaData,asDeadlineMessage,withMetaData,lambda$asDeadlineMessage$0,lambda$asDeadlineMessage$1",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"delegates,canHandle,lambda$canHandleType$1,lambda$canHandle$0,performReset,lambda$performReset$2,flatten",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"isExceptional,exceptionDetails,optionalExceptionResult,withMetaData,andMetaData",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$1,lambda$new$0",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"type,types",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"storeAssociationValue,loadAssociationValues,createSagaEntry,addNamedQueriesTo,serializedSagaAsString,removeAssociationValue,sagaEntryEntityName,serializedObjectType,getSagaTypeName",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"storeAssociationValue,addNamedQueriesTo,getSagaTypeName,serializedObjectType,removeAssociationValue,sagaEntryEntityName,loadAssociationValues,createSagaEntry,serializedSagaAsString",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"withMetaData,getResponseType,getQueryName,andMetaData",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"parameterResolverFactory,resourceInjector,eventProcessingConfiguration,spanFactory,handlerDefinition",5,1,""
"org.axonframework.eventhandling.EventMessage",13,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"withTrackingToken,trackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"isLowerSegmentAdvanced,isUpperSegmentAdvanced,upperSegmentToken,lowerSegmentToken",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"lambda$canHandleType$1,invokeHandlers,hasHandler,lambda$new$0,sequencingPolicyMatchesSegment,detectList,performReset,sequenceIdentifier",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$0,lambda$readEvents$1",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"enqueuedAt,lambda$new$0,diagnostics,cause,message",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"removeAssociationValueFromCache,lambda$updateSaga$4,lambda$findSagas$0,lambda$removeAssociationValueFromCache$2,cacheKey,lambda$deleteSaga$1,addCachedAssociations,lambda$addCachedAssociations$3",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"validateIdentifier,lambda$newInstance$1,lambda$loadOrCreate$0,load,lambda$load$3,lambda$load$2,lambda$getAggregate$4,canResolve",8,1,""
"org.axonframework.test.saga.EventValidator",13,"handle,createEqualToMatchers,lambda$startRecording$0,assertPublishedEventsMatching,unwrapEvent",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"andMetaData,getCommandName,withMetaData",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"canResolve,lambda$load$0,newInstance,load,removeFromCache",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"getTimestamp,withMetaData,andMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"buildJobDetail,shutdown,schedule,initialize,lambda$schedule$0,buildTrigger,lambda$cancelSchedule$1",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"lambda$readEvents$0,readEvents",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"getWrappedAggregate,version,isLockHeld",3,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",12,"getResponseType",1,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"advanceTimeTo,initializeAt,getCurrentDateTime,advanceTimeBy",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"dispatch,builder,subscribe,registerHandlerInterceptor,registerDispatchInterceptor",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"lambda$send$0,send,asRuntime",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"loadOrCreate,newInstance,load",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"load,send,lambda$send$1,lambda$send$0,lambda$send$2,canResolve",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.queryhandling.QueryGateway",11,"subscriptionQuery,query,streamingQuery,scatterGather",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"withMetaData,andMetaData,getQueryName",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$800",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"registerConverters,typeIdentifierOf,doDeserialize,doSerialize,typeForClass,getConverter,revisionOf,classForType",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"registerConverters,getWriter,classForType,resolveClassName,builder,getReader,typeForClass",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"lambda$newInstance$0,load,canResolve,newInstance",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"createListenerAdapter,doRegisterListener,lambda$registerCacheEntryListener$0",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"aggregateType,repository,aggregateFactory,snapshotFilter",4,1,""
"org.axonframework.config.Configuration",10,"findModules,eventProcessingConfiguration",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored,processInUnitOfWork,canHandle",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData",1,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"eventHandlers,invokeHandlers,sequencingPolicyMatchesSegment,performReset,sequenceIdentifier",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"lambda$isReplaying$0,processingStatus,resetTokens",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2800,access$2700",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.messaging.MessageDecorator",10,"describeTo,getIdentifier,getPayload,getMetaData,describeType",5,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"get,contains,isEmpty,getAll,mergedWith",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"classForType,getSerializedType,revisionOf",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"lambda$upperBound$1,compareTo,lambda$lowerBound$0,lambda$covers$2,offsetBy",5,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"next,getGlobalIndex,offsetBy",3,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTokenSince,createTailToken,sourceId,createTokenAt,createHeadToken",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"nextAvailable,alterToken",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$300,access$600,access$500,access$400",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"schedule,shutdown",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"constructHandlerAttributesFor,lambda$constructHandlerAttributesFor$1,prefixedKey,lambda$null$0",4,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName,loadAssociations",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"access$100,toString,equals,hashes",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateType,aggregateFactory",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$2300,access$2400,access$1900,access$2200",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"upperBound,lowerBound,advancedTo,unwrap",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"findSagas,size",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"registerConverter,canConvert",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getAggregateIdentifier,getType,getSequenceNumber",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"supportsReset,handle,prepareReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"getTokenForStream,advancedTo",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",7,"lambda$registerHandlerInterceptor$2,lambda$handle$0,lambda$process$1",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"subscribe,builder",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"canHandle,handle,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"lambda$handle$0,handle,canHandle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"getProperty,getHandlerName,lambda$getProperty$0,createProperty",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"queuedThreads,isHeldBy,lock",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"prepareReset,handle",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"sourceId,openStream",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"unexpectedEvents,lambda$unexpectedEvents$0",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"isEmpty,getAll",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$700,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"subscribe,builder",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"resolveReturnValue,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$600,access$500",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$600,access$400,access$500",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.Repository",6,"newInstance,loadOrCreate,load",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$findHandlerMethods$1,lambda$resolveAssociation$0",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$0,lambda$findSagas$1",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getData,getContentType,getType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"checkForDeadlock,disposeIfUnused",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getGaps,getIndex",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"builder",1,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0,lambda$onMessageIngested$1",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"bytesFrom,convert",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
