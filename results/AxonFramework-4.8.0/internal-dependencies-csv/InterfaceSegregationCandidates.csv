"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp,getIdentifier",2,9,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber,getType",3,6,""
"org.axonframework.messaging.ResultMessage",9,"exceptionResult,isExceptional",2,6,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,5,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,5,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,3,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getAggregateIdentifier,getSequenceNumber,getType",3,3,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"withGapsTruncatedAt,advanceTo,newInstance,getGaps,getIndex",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initialize,getAggregateRoot,initSequence",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getAggregateIdentifier,getSequenceNumber",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"withTrackingToken,trackingToken",2,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.messaging.ResultMessage",10,"exceptionResult,isExceptional",2,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName,getResponseType",2,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",160,"lambda$new$4,lambda$annotatedProcessingGroupOfType$73,pooledStreamingEventProcessor,lambda$static$1,lambda$pooledStreamingEventProcessor$72,lambda$null$35,lambda$null$33,lambda$null$45,trackingEventProcessor,trackingEventProcessorConfig,lambda$null$21,subscribingEventProcessor,lambda$null$13,lambda$null$28,lambda$static$0,lambda$pooledStreamingEventProcessor$71,defaultExecutor,lambda$null$20,lambda$null$38,lambda$null$34,lambda$null$43,annotatedProcessingGroupOfType,lambda$null$37,lambda$null$44,lambda$buildEventProcessor$47,lambda$new$8,lambda$new$17,registerTrackingEventProcessor,registerPooledStreamingEventProcessorConfiguration,lambda$registerDeadLetterPolicy$70,lambda$new$15,packageOfObject,lambda$registerDeadLetterQueue$69,sequencingPolicy,registerDeadLetterQueue,deadLetterPolicy,messageMonitor,lambda$new$16,errorHandler,lambda$usingPooledStreamingEventProcessors$59,registerEventHandlerInvokers,lambda$new$12,lambda$registerEventHandlerInvokers$36,lambda$new$5,lambda$new$10,rollbackConfiguration,lambda$new$11,retrieveHandlerDefinition,validateConfigInitialization,lambda$registerRollbackConfiguration$64,buildEventProcessor,lambda$new$22,initializeProcessors,lambda$new$19,lambda$new$25,lambda$registerErrorHandler$61,lambda$usingTrackingEventProcessors$58,lambda$initializeProcessors$29,lambda$new$7,lambda$registerPooledStreamingEventProcessor$68,lambda$new$26,registerSagaManagers,lambda$sagaConfigurations$51,defaultEventProcessor,lambda$new$14,lambda$deadLetteringInvoker$42,registerEventProcessor,lambda$addInterceptors$48,addInterceptors,lambda$eventProcessors$50,noTepCustomization,lambda$new$3,lambda$new$24,lambda$registerTokenStore$56,lambda$deadLetteringInvoker$41,lambda$new$18,lambda$new$6,lambda$new$2,lambda$registerEventHandler$52,selectProcessingGroupByType,lambda$registerTrackingEventProcessor$55,lambda$registerTrackingEventProcessorConfiguration$67,lambda$addInterceptors$49,lambda$new$9,lambda$registerDefaultDeadLetterQueueIfPresent$40,lambda$registerEventHandlerInvokers$32,registerTrackingEventProcessorConfiguration,tokenStore,lambda$registerListenerInvocationErrorHandler$53,eventProcessors,registerDefaultDeadLetterQueueIfPresent,deadLetterQueue,lambda$registerSagaManagers$46,lambda$registerTransactionManager$65,lambda$new$23,lambda$registerTrackingEventProcessorConfiguration$66,lambda$registerTrackingEventProcessor$54,noPsepCustomization,listenerInvocationErrorHandler,lambda$registerHandlerInterceptor$62,deadLetteringInvoker,lambda$registerEventHandlerInvokers$39,lambda$registerSubscribingEventProcessor$60,processorNameForProcessingGroup,lambda$registerSequencingPolicy$63,simpleInvoker,lambda$usingSubscribingEventProcessors$57,lambda$selectProcessingGroupByType$31,transactionManager,lambda$new$27,lambda$selectProcessingGroupByType$30",111,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$static$0,lambda$null$12,lambda$null$17,lambda$registerHandlerDefinition$44,lambda$defaultResourceInjector$19,defaultQueryUpdateEmitter,invokeShutdownHandlers,verifyIdentifierFactory,defaultParameterResolverFactory,lambda$new$1,lambda$prepareModules$45,lambda$invokeShutdownHandlers$50,defaultDeadlineManager,lambda$defaultQueryGateway$11,lambda$defaultParameterResolverFactory$15,lambda$new$2,defaultQueryBus,lambda$null$32,lambda$prepareMessageHandlerRegistrars$47,lambda$defaultEventGateway$23,lambda$defaultCommandBus$18,registerComponent,retrieveHandlerDefinition,jpaConfiguration,eventProcessing,lambda$registerMessageHandler$38,lambda$invokeStartHandlers$49,registerCommandHandler,lambda$defaultConfiguration$4,lambda$onStart$53,lambda$configureEmbeddedEventStore$42,lambda$configureMessageMonitor$29,defaultQueryGateway,lambda$invokeLifecycleHandlers$52,defaultScopeAwareProvider,lambda$null$35,defaultEventGateway,lambda$jpaConfiguration$6,defaultHandlerDefinition,lambda$registerMessageHandler$39,lambda$registerMessageHandler$40,lambda$defaultCommandGateway$10,lambda$registerQueryHandler$37,lambda$defaultDeadlineManager$21,lambda$eventProcessing$28,lambda$eventProcessing$27,lambda$new$3,lambda$registerMessageHandler$41,lambda$registerCommandHandler$33,lambda$null$46,lambda$registerCommandHandler$30,lambda$jpaConfiguration$7,defaultConfiguration,registerQueryHandler,defaultEventBus,defaultComponent,lambda$invokeInitHandlers$48,prepareModules,defaultSnapshotter,lambda$defaultQueryUpdateEmitter$14,defaultSerializer,lambda$null$43,lambda$defaultEventBus$22,lambda$jpaConfiguration$8,lambda$registerQueryHandler$34,invokeInitHandlers,lambda$defaultQueryBus$13,defaultCommandGateway,defaultCommandBus,registerModule,defaultUpcasterChain,defaultResourceInjector,lambda$defaultSerializer$24,defaultSpanFactory,lambda$defaultScopeAwareProvider$20,prepareMessageHandlerRegistrars,lambda$invokeLifecycleHandlers$51,lambda$jpaConfiguration$5,lambda$onShutdown$54,lambda$null$31,lambda$null$25,invokeLifecycleHandlers,lambda$null$36,lambda$defaultSnapshotter$26,lambda$jpaConfiguration$9,lambda$defaultHandlerDefinition$16",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"lambda$buildResultValidator$9,lambda$when$7,ensureValuesEqual,aggregateModel,assertValidWorkingAggregateState,detectIllegalStateChanges,lambda$when$8,lambda$whenInvoking$6,lambda$null$3,failIllegalStateChange,lambda$null$5,whenTimeAdvancesTo,andGivenCurrentTime,getParameterResolverFactory,whenTimeElapses,andGivenCommands,lambda$givenState$0,givenCommands,registerFieldFilter,andGiven,currentTime,lambda$andGivenCommands$1,given,registerAggregateCommandHandlers,lambda$when$2,getHandlerDefinition,executeAtSimulatedTime,registerCommandHandler,useStateStorage,when,getRepositoryProvider,clearGivenWhenState,registerRepositoryProvider,lambda$whenConstructing$4,buildResultValidator,registerRepository,ensureRepositoryConfiguration,finalizeConfiguration,handleDeadline",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectTriggeredDeadlinesMatching,expectExceptionMessage,expectResultMessagePayload,expectNoScheduledDeadlineMatching,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$5,lambda$expectNoScheduledDeadlineMatching$3,expectTriggeredDeadlines,lambda$expectScheduledDeadlineWithName$1,expectEvents,lambda$expectNoScheduledDeadlineWithName$4,lambda$expectScheduledDeadlineWithName$0,verifyMetaDataEquality,expectExceptionDetails,expectException,verifyPayloadEquality,lambda$expectNoScheduledDeadlineWithName$2,recordException,lambda$expectNoScheduledDeadlineWithName$6,expectResultMessageMatching",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"lambda$expectNoScheduledDeadlineWithName$5,expectNoScheduledDeadlineMatching,lambda$registerStartRecordingCallback$0,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineMatching$4,expectTriggeredDeadlines,expectNoScheduledEventMatching,expectScheduledEventMatching,expectTriggeredDeadlinesMatching,expectScheduledDeadlineMatching,lambda$expectScheduledDeadlineWithName$2,lambda$expectNoScheduledDeadlineWithName$7,lambda$expectNoScheduledDeadlineWithName$3,lambda$expectNoScheduledDeadlineMatching$6",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$500,invokeShutdownHandlers,access$900,access$300,access$700,access$600,access$200,access$800,defaultComponent,access$1400,access$1000,access$400,access$1100,access$1300,access$1200,access$1500,invokeStartHandlers",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"registerLifecycleHandler,lambda$registerLifecycleHandler$2,isEarlierPhaseDuringShutdown,lambda$null$0,isEarlierPhaseDuringStartUp,lambda$getComponent$1",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"startRecording,registerStartRecordingCallback",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"lambda$null$0,getCommandBus,getPublisherFor,currentTime,handleDeadline,getResourceInjector,ensureSagaResourcesInitialized,timeCorrectedEventMessage,givenAggregate,registerResource,getHandlerDefinition,lambda$handleInSaga$1,getParameterResolverFactory,registerFieldFilter,handleInSaga,registerCommandGateway",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"assertValidRecording,recordException",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$600,access$602,access$800,access$700,access$900",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"commitAsRoot,addHandler,commitAsNested,changePhase,setRollbackCause,lambda$commitAsNested$6,lambda$commit$5,lambda$rollback$7,onRollback,lambda$start$3,lambda$null$2,lambda$commit$4,phase,delegateAfterCommitToParent,lambda$rollback$8,notifyHandlers,lambda$start$0,lambda$start$1,setPhase",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"lambda$null$7,lambda$singleStatusUpdater$12,resetTokens,lambda$null$9,shutdownAsync,lambda$statusUpdater$13,lambda$null$1,lambda$getTokenStoreIdentifier$3,releaseSegment,lambda$calculateIdentifier$4,singleStatusUpdater,lambda$resetTokens$6,start,lambda$new$2,lambda$resetTokens$10,lambda$resetTokens$5,statusUpdater,spawnWorker,lambda$new$0,supportsReset,calculateIdentifier,isRunning,lambda$null$8,lambda$null$11",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"amountOfSequences,claimDeadLetter,lambda$toLetter$7,findFirstLetterOfEachAvailableSequence,processLetterAndFollowing,lambda$sequenceSize$14,lambda$amountOfSequences$16,lambda$processLetterAndFollowing$9,lambda$claimDeadLetter$12,lambda$clear$13,lambda$size$15,getMaxIndexForSequence,lambda$getMaxIndexForSequence$17,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$toLetter$8,getProcessingStartedLimit,lambda$findNextDeadLetter$11,getNextIndexForSequence,lambda$deadLetterSequence$5,sequenceSize,lambda$enqueue$0,toStringSequenceIdentifier,lambda$enqueue$2,lambda$evict$4,toLetter,requeue,evict,entityManager,lambda$enqueue$1,lambda$deadLetters$6,isFull,lambda$enqueue$3,findNextDeadLetter",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"getProcessingStartedLimit,toLetter,lambda$amountOfSequences$16,lambda$size$15,lambda$enqueue$3,sequenceSize,evict,lambda$deadLetterSequence$5,lambda$sequenceSize$14,lambda$getMaxIndexForSequence$17,lambda$enqueue$0,toStringSequenceIdentifier,lambda$processLetterAndFollowing$9,processLetterAndFollowing,lambda$toLetter$8,isFull,lambda$toLetter$7,claimDeadLetter,findNextDeadLetter,lambda$evict$4,lambda$clear$13,getMaxIndexForSequence,lambda$enqueue$2,getNextIndexForSequence,findFirstLetterOfEachAvailableSequence,lambda$findNextDeadLetter$11,requeue,entityManager,lambda$deadLetters$6,lambda$findFirstLetterOfEachAvailableSequence$10,amountOfSequences,lambda$enqueue$1,lambda$claimDeadLetter$12",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"doEmit,lambda$null$20,lambda$null$16,emitError,payloadMatchesQueryResponseType,doComplete,lambda$doEmit$14,lambda$null$6,doCompleteExceptionally,lambda$doEmit$12,lambda$queryUpdateHandlerRegistered$0,runOnAfterCommitOrNow,lambda$doCompleteExceptionally$19,lambda$complete$9,lambda$emit$8,lambda$registerUpdateHandler$1,lambda$null$13,lambda$null$7,lambda$registerUpdateHandler$2,lambda$registerUpdateHandler$3,lambda$completeExceptionally$10,lambda$null$18,lambda$doComplete$17,lambda$emit$5,lambda$registerDispatchInterceptor$11,inStartedPhaseOfUnitOfWork,intercept,lambda$payloadMatchesQueryResponseType$15,lambda$runOnAfterCommitOrNow$21,lambda$registerUpdateHandler$4",31,1,""
"org.axonframework.test.saga.SagaTestFixture",37,"currentTime,handleInSaga,access$300",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$handle$5,lambda$handle$4,lambda$handle$3,rootType,createMessage,initSequence,lambda$registerRoot$0,andThen,registerRoot,lambda$createMessage$12,lambda$andThenApply$13,lambda$doApply$11,lambda$null$8,doApply,handle,lambda$handle$7,lambda$findHandlerAndHandleCommand$10,lambda$findHandlerAndHandleCommand$9,lambda$invoke$1,lambda$handle$6,lambda$execute$2,publish,findHandlerAndHandleCommand,publishOnEventBus,applyMessageOrPayload,initialize",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$eventProcessingConfiguration$4,lambda$findModules$1,findModules,getComponent,aggregateConfiguration,getModules,eventBus,lambda$aggregateConfiguration$6,lambda$eventProcessingConfiguration$3,lambda$getComponent$8,lambda$aggregateConfiguration$5,lambda$resourceInjector$2,lambda$aggregateConfiguration$7,lambda$findModules$0",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$2100,doSleepFor,access$1800,access$1400,getState,access$1700,access$1000,access$900,access$1100,access$2000,access$1600,access$1500,access$2200,access$1300,access$600,access$1200,access$700,access$800",18,1,""
"org.axonframework.config.Configurer",29,"configureAggregate,buildConfiguration,eventProcessing,registerComponent,lambda$configureMessageMonitor$1,registerQueryHandler,configureMessageMonitor,registerCommandHandler,lambda$configureMessageMonitor$0,registerModule",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1400,getState,access$1000,access$900,access$1100,access$1500,access$1300,access$1200,access$800,processingLoop",10,1,""
"org.axonframework.config.Configuration",27,"handlerDefinition,correlationDataProviders,spanFactory,getComponent,eventBus,messageMonitor,parameterResolverFactory",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$600,access$700",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,access$2000,access$800",3,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,access$2000,releaseSegment,access$800",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"canHandle,lambda$invoke$1,lambda$canHandle$4,lambda$null$3,lambda$null$5,getAssociationValues,lambda$handle$8,handle,lambda$execute$2,lambda$new$0,lambda$handle$7,lambda$handle$6",13,1,""
"org.axonframework.config.Configuration",25,"queryBus,handlerDefinition,correlationDataProviders,findModules,spanFactory,upcasterChain,getComponent,serializer,snapshotFilter,messageSerializer,commandBus,eventBus,repository,eventSerializer,messageMonitor,scopeAwareProvider,eventStore,parameterResolverFactory",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"lambda$process$5,lambda$process$4,lambda$clear$7,lambda$requeue$2,contains,maximumNumberOfSequencesReached,requeue,getLastTouchedSequence,isFull,toIdentifier,evict,lambda$enqueue$0,builder,lambda$evict$1,lambda$process$6,lambda$process$3,maximumSequenceSizeReached",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"getSubscriptionQueryResult,lambda$getSubscriptionQueryResult$7,lambda$getSubscriptionQueryResult$5,lambda$getSubscriptionQueryResult$6,lambda$query$2,lambda$streamingQuery$3,processInterceptors,lambda$query$1,getSubscriptionQueryMessage,lambda$streamingQuery$4,lambda$registerDispatchInterceptor$8,lambda$query$0",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"isCaughtUp,unmarkError,isErrorState,markError,getSegment,caughtUp,advancedTo",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"publish,createMessage,shutdown,lambda$addDetailsFromObject$98640057$1,publishEventMessage,addDetailsFromObject,lambda$addDetailsFromObject$515c35f2$1,publishWithRevision,lambda$addDetailsFromEvent$8cace316$1,schedule,lambda$publishEventMessage$0,addDetailsFromEvent,lambda$addDetailsFromEvent$1f732a71$1",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$1,lambda$fetchSegments$0,fetchSegments,lambda$fetchAvailableSegments$2,loadToken,validateSegment,initializeTokenSegments,getConfig",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"fetchSegments,getConfig,lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$1,lambda$fetchSegments$0,loadToken,initializeTokenSegments,validateSegment,lambda$fetchAvailableSegments$2",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"lambda$registerDispatchInterceptor$3,consumeDeadline,lambda$registerHandlerInterceptor$4,processDispatchInterceptors,lambda$cancelAllWithinScope$2,schedule,lambda$cancelAll$1,lambda$consumeDeadline$5,lambda$cancelSchedule$0,advanceToNextTrigger,advanceTimeTo",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"isReplay,context,lambda$getTokenAtReset$2,createReplayToken,lambda$isReplay$0,lambda$replayContext$1,advancedTo,getTokenAtReset,replayContext",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"openStream,lambda$doAppendEvents$2,lambda$registerDispatchInterceptor$4,lambda$publish$0,lambda$doAppendEvents$1,doAppendEvents,injectAggregateIdentifier,lambda$subscribe$3",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"doDispatch,lambda$subscribe$4,lambda$registerHandlerInterceptor$7,createRepository,lambda$initializePublisherThreads$0,lambda$dispatch$2,initializePublisherThreads,initializeInvokerThreads,dispatch,lambda$initializeInvokerThreads$1,lambda$registerDispatchInterceptor$6,lambda$doDispatch$3,lambda$subscribe$5",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"nextSequenceNumber,initActiveIfRequired,next",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isCaughtUp,getError,isErrorState,getTrackingToken,isMerging,isReplaying,split,getResetPosition,getSegment,getCurrentPosition,mergeCompletedPosition",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState,markError,advancedTo",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"readEventData,readSnapshotData,lambda$readSnapshot$0,buildExceptionMessage,isFirstDomainEvent,getEventSerializer,appendEvents,getSnapshotSerializer,lambda$readSnapshot$1,storeSnapshot",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"next,lambda$getLastSequenceNumber$0,hasNext",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"closePrivateStream,nextNode,peekPrivateStream,behindGlobalCache,peekGlobalStream,lastToken,lambda$closePrivateStream$0,stopTailingGlobalStream,peek,nextAvailable",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"lambda$closePrivateStream$0,closePrivateStream,peek,nextAvailable,lastToken,peekPrivateStream,peekGlobalStream,nextNode,stopTailingGlobalStream,behindGlobalCache",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"withMetaData,findExceptionResult,andMetaData,getPayload,isExceptional",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getSagaIdentifier,root,getAssociationValues,isActive",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getScheduledDeadlines,getTriggeredDeadlines,getCurrentDateTime",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$recordException$1,lambda$makeCurrent$0",2,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",18,"setDomainEventFields,setTrackedEventFields,setDeadLetterFields,sequenceSizeStatement,setIdFields,setEventFields",8,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"initializeTokenSegments,fetchSegments,lambda$fetchSegments$1,lambda$storeToken$0",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"handleSnapshotReadingError,stagedDomainEventMessages,lambda$stagedDomainEventMessages$1,lambda$readEvents$3,lambda$stagedDomainEventMessages$2,lambda$stagedDomainEventMessages$0",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"next,readNext",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$100,access$000",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$3,lambda$handle$1,lambda$handle$0,lambda$handle$2",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"unwrapType,queryResultType,upperBound,lambda$new$0",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$getSpanMessage$3,getSpanMessage,lambda$createInternalSpan$8,lambda$createInternalSpan$7,lambda$createRootTrace$0,lambda$getSpanMessage$4,lambda$null$6,lambda$null$5,lambda$createDispatchSpan$2,lambda$createHandlerSpan$1",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$registerCacheEntryListener$0,purgeItems,lambda$containsKey$3,lambda$computeIfPresent$4,lambda$removeAll$2,lambda$get$1",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"ensureInitialized,initialize,lambda$eventProcessor$0,lambda$initialize$2,lambda$ensureInitialized$3,lambda$initialize$1,processingGroup",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$registerHandlerInterceptor$2,lambda$runOnPrepareCommitOrNow$0,lambda$registerDispatchInterceptor$1,dispatchInterceptors",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"mergePosition,lambda$mergePosition$1,lambda$mergePosition$0,doAdvance",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"lambda$peekForMessages$2,lambda$new$0,lambda$skipMessagesWithPayloadTypeOf$3,lambda$setOnAvailableCallback$5,nextAvailable,lambda$doConsumeNext$1,peekForMessages,messageSource,lambda$setOnAvailableCallback$4,doConsumeNext,skipMessagesWithPayloadTypeOf",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getTrackingToken,split,getSegment",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getTrackingToken,getSegment,split",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,getInternalTrackingToken",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"handlerDefinition,spanFactory,getComponent,commandBus,eventBus,repository,eventStore,parameterResolverFactory",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll,deadlineNameMatch",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$registerHandlerInterceptor$0,lambda$processInUnitOfWork$3,lambda$null$1,getName,processInUnitOfWork,lambda$null$2,getSpanName",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"lowerSegmentToken,mergePosition,position,isMergeInProgress,upperSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"isReplay,lowerBound,getTokenAtReset,createReplayToken,position",6,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",16,"getSequenceIndex,getSequenceIdentifier,getIdentifier",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$canHandle$2,lambda$new$0,lambda$new$1,lambda$handle$3",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"withMetaData,optionalExceptionResult,andMetaData,isExceptional",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"doApply,publish,publishOnEventBus",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asResponseMessage,asNullableResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType,getData",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"routingKey,commandName",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$canHandleType$3,canHandle,lambda$canHandleType$2,lambda$canHandle$1,prepareReset,lambda$prepareReset$4,lambda$handle$0,handle",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"andMetaData,withMetaData,getType,getSequenceNumber,getAggregateIdentifier",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"withTrackingToken,andMetaData,trackingToken,withMetaData",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"skipMessagesWithPayloadTypeOf,setOnAvailableCallback,peek,hasNextAvailable,access$300,close",7,1,""
"org.axonframework.eventhandling.deadletter.jdbc.DefaultDeadLetterStatementFactory",15,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getSequenceIdentifier,getId,getIndex",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getIndex,getSequenceIdentifier,getId",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"checkAndRethrowForExceptionOrError,resolveParameterValues,parametersMatch,typeMatches",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"handle,canHandle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isWildcardTypeWithMatchingUpperBound,isGenericAssignableFrom,isTypeVariable,isWildcardType,isGenericArrayType,isParameterizedType,isArray,isParameterizedTypeOfExpectedType,isAssignableFrom",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"type,getVersion,declaredType",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"isDeleted,version,identifier,initialize",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"access$300,load,newInstance,access$500,getAggregate,access$200,send",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createInternalSpan$4,lambda$registerSpanAttributeProvider$5,lambda$createRootTrace$0,lambda$createHandlerSpan$1,lambda$createInternalSpan$3,lambda$createDispatchSpan$2",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"disconnect,lambda$subscribe$1,updateFilter,intercept,shutdownDispatching,localSegment,lambda$dispatch$0,lambda$registerDispatchInterceptor$2,dispatch",9,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"withMetaData,asDeadlineMessage,lambda$asDeadlineMessage$0,lambda$asDeadlineMessage$1,andMetaData",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"lambda$canHandleType$1,lambda$performReset$2,performReset,flatten,lambda$canHandle$0,canHandle,delegates",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"optionalExceptionResult,withMetaData,exceptionDetails,isExceptional,andMetaData",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$0,lambda$new$1",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"type,types",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"removeAssociationValue,serializedObjectType,createSagaEntry,sagaEntryEntityName,loadAssociationValues,getSagaTypeName,addNamedQueriesTo,serializedSagaAsString,storeAssociationValue",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"serializedSagaAsString,storeAssociationValue,loadAssociationValues,serializedObjectType,sagaEntryEntityName,removeAssociationValue,getSagaTypeName,addNamedQueriesTo,createSagaEntry",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"andMetaData,getResponseType,getQueryName,withMetaData",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getQueryName,getResponseType",2,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"handlerDefinition,spanFactory,eventProcessingConfiguration,resourceInjector,parameterResolverFactory",5,1,""
"org.axonframework.eventhandling.EventMessage",13,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"withTrackingToken,trackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"isUpperSegmentAdvanced,lowerSegmentToken,upperSegmentToken,isLowerSegmentAdvanced",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"detectList,sequenceIdentifier,performReset,lambda$new$0,sequencingPolicyMatchesSegment,invokeHandlers,hasHandler,lambda$canHandleType$1",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$1,lambda$readEvents$0",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"cause,enqueuedAt,diagnostics,message,lambda$new$0",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$removeAssociationValueFromCache$2,removeAssociationValueFromCache,lambda$addCachedAssociations$3,cacheKey,lambda$deleteSaga$1,lambda$findSagas$0,addCachedAssociations,lambda$updateSaga$4",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$load$2,lambda$getAggregate$4,lambda$load$3,canResolve,load,lambda$newInstance$1,lambda$loadOrCreate$0,validateIdentifier",8,1,""
"org.axonframework.test.saga.EventValidator",13,"assertPublishedEventsMatching,createEqualToMatchers,unwrapEvent,handle,lambda$startRecording$0",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"andMetaData,getCommandName,withMetaData",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"removeFromCache,load,newInstance,lambda$load$0,canResolve",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"getTimestamp,withMetaData,andMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"initialize,buildJobDetail,shutdown,schedule,lambda$schedule$0,lambda$cancelSchedule$1,buildTrigger",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"readEvents,lambda$readEvents$0",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"version,getWrappedAggregate,isLockHeld",3,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",12,"getResponseType",1,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"getCurrentDateTime,initializeAt,advanceTimeTo,advanceTimeBy",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"dispatch,builder,subscribe,registerHandlerInterceptor,registerDispatchInterceptor",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"lambda$send$0,send,asRuntime",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"loadOrCreate,load,newInstance",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"load,lambda$send$2,send,lambda$send$0,canResolve,lambda$send$1",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.queryhandling.QueryGateway",11,"subscriptionQuery,query,scatterGather,streamingQuery",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"andMetaData,withMetaData,getQueryName",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$800",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"typeIdentifierOf,classForType,doDeserialize,registerConverters,typeForClass,revisionOf,getConverter,doSerialize",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"registerConverters,builder,typeForClass,classForType,resolveClassName,getWriter,getReader",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"load,lambda$newInstance$0,canResolve,newInstance",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"lambda$registerCacheEntryListener$0,doRegisterListener,createListenerAdapter",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"aggregateType,aggregateFactory,repository,snapshotFilter",4,1,""
"org.axonframework.config.Configuration",10,"findModules,eventProcessingConfiguration",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored,processInUnitOfWork,canHandle",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData",1,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"sequenceIdentifier,performReset,eventHandlers,sequencingPolicyMatchesSegment,invokeHandlers",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"processingStatus,lambda$isReplaying$0,resetTokens",3,1,""
"org.axonframework.eventhandling.deadletter.jdbc.JdbcDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2800,access$2700",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.messaging.MessageDecorator",10,"getMetaData,describeType,getIdentifier,getPayload,describeTo",5,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"get,getAll,contains,mergedWith,isEmpty",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"getSerializedType,classForType,revisionOf",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configurer",9,"registerComponent,configureEmbeddedEventStore",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,getGlobalIndex,next",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,lambda$upperBound$1,lambda$lowerBound$0,compareTo,lambda$covers$2",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTokenAt,createTokenSince,createTailToken,createHeadToken,sourceId",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"nextAvailable,alterToken",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$300,access$500,access$400,access$600",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$null$0,lambda$constructHandlerAttributesFor$1,constructHandlerAttributesFor,prefixedKey",4,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName,loadAssociations",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"access$100,toString,equals,hashes",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateType,aggregateFactory",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2200,access$2300,access$2100,access$2400,access$1900",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"upperBound,advancedTo,unwrap,lowerBound",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"findSagas,size",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"registerConverter,canConvert",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getType,getAggregateIdentifier,getSequenceNumber",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"prepareReset,handle,supportsReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"advancedTo,getTokenForStream",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",7,"lambda$process$1,lambda$registerHandlerInterceptor$2,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"subscribe,builder",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"handle,lambda$handle$0,canHandle",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"lambda$handle$0,handle,canHandle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"createProperty,getProperty,getHandlerName,lambda$getProperty$0",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$subscribe$0,lambda$registerHandlerInterceptor$1",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"lock,queuedThreads,isHeldBy",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"handle,prepareReset",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"openStream,sourceId",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"lambda$unexpectedEvents$0,unexpectedEvents",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"resolveReturnValue,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"subscribe,builder",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$700",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$500,access$600",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.Repository",6,"newInstance,loadOrCreate,load",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$resolveAssociation$0,lambda$findHandlerMethods$1",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$0,lambda$findSagas$1",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getData,getContentType,getType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"disposeIfUnused,checkForDeadlock",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getGaps,getIndex",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"builder",1,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$onMessageIngested$1,lambda$new$0",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"convert,bytesFrom",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
