"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier,getTimestamp",2,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType,getAggregateIdentifier,getSequenceNumber",3,5,""
"org.axonframework.messaging.ResultMessage",9,"exceptionResult,isExceptional",2,5,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getType,getAggregateIdentifier,getSequenceNumber",3,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"getGaps,withGapsTruncatedAt,advanceTo,getIndex,newInstance",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.eventhandling.TrackerStatus",17,"getTrackingToken,getSegment,split",3,2,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"getAggregateRoot,initSequence,initialize",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName,isFactoryHandler",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getAggregateIdentifier,getSequenceNumber",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken,withTrackingToken",2,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName,getResponseType",2,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",156,"lambda$registerRollbackConfiguration$61,annotatedProcessingGroupOfType,lambda$null$31,lambda$annotatedProcessingGroupOfType$70,defaultExecutor,lambda$pooledStreamingEventProcessor$69,lambda$null$11,lambda$null$19,lambda$registerTransactionManager$62,lambda$null$41,trackingEventProcessorConfig,lambda$registerPooledStreamingEventProcessor$65,lambda$null$33,pooledStreamingEventProcessor,lambda$registerTrackingEventProcessorConfiguration$63,subscribingEventProcessor,lambda$null$42,lambda$null$36,lambda$registerDeadLetterPolicy$67,lambda$registerTrackingEventProcessorConfiguration$64,registerTrackingEventProcessorConfiguration,lambda$null$40,lambda$registerDeadLetterQueue$66,trackingEventProcessor,lambda$null$18,lambda$null$32,lambda$null$35,lambda$static$0,lambda$null$26,lambda$pooledStreamingEventProcessor$68,lambda$new$5,lambda$new$23,lambda$new$25,lambda$registerTokenStore$53,deadLetterQueue,lambda$buildEventProcessor$44,rollbackConfiguration,defaultEventProcessor,lambda$usingPooledStreamingEventProcessors$56,lambda$new$24,lambda$registerEventHandlerInvokers$37,noSagaProcessorCustomization,lambda$registerHandlerInterceptor$59,messageMonitor,lambda$new$2,lambda$sagaConfigurations$48,lambda$buildEventProcessor$45,lambda$new$15,registerEventProcessor,lambda$new$6,lambda$initializeProcessors$27,lambda$new$21,lambda$usingSubscribingEventProcessors$54,lambda$new$22,packageOfObject,lambda$registerListenerInvocationErrorHandler$50,lambda$new$20,lambda$new$10,lambda$registerSubscribingEventProcessor$57,lambda$registerSequencingPolicy$60,lambda$registerTrackingEventProcessor$52,lambda$buildEventProcessor$46,buildEventProcessor,errorHandler,lambda$new$14,lambda$registerEventHandlerInvokers$34,simpleInvoker,lambda$registerSagaManagers$43,lambda$usingTrackingEventProcessors$55,lambda$new$7,lambda$deadLetteringInvoker$38,lambda$new$3,selectProcessingGroupByType,initializeProcessors,processorNameForProcessingGroup,lambda$new$12,deadLetterPolicy,lambda$eventProcessors$47,registerSagaManagers,lambda$new$4,listenerInvocationErrorHandler,lambda$registerTrackingEventProcessor$51,registerEventHandlerInvokers,lambda$new$1,sequencingPolicy,transactionManager,validateConfigInitialization,lambda$new$13,tokenStore,lambda$registerEventHandlerInvokers$30,lambda$new$8,lambda$selectProcessingGroupByType$29,lambda$registerEventHandler$49,retrieveHandlerDefinition,lambda$selectProcessingGroupByType$28,registerTrackingEventProcessor,lambda$registerErrorHandler$58,lambda$deadLetteringInvoker$39,eventProcessors,lambda$new$16,deadLetteringInvoker,lambda$new$9,lambda$new$17",103,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$static$0,lambda$null$43,lambda$onShutdown$54,lambda$null$12,lambda$null$25,lambda$null$17,lambda$null$32,lambda$null$36,lambda$null$46,lambda$onStart$53,lambda$null$31,lambda$null$35,defaultEventBus,lambda$invokeShutdownHandlers$50,lambda$eventProcessing$27,defaultSerializer,lambda$registerMessageHandler$41,lambda$registerMessageHandler$40,lambda$jpaConfiguration$5,lambda$invokeLifecycleHandlers$52,registerComponent,lambda$jpaConfiguration$6,lambda$eventProcessing$28,lambda$defaultQueryUpdateEmitter$14,lambda$registerHandlerDefinition$44,lambda$registerMessageHandler$39,lambda$defaultSnapshotter$26,lambda$invokeInitHandlers$48,defaultQueryUpdateEmitter,lambda$defaultConfiguration$4,lambda$defaultQueryGateway$11,lambda$defaultParameterResolverFactory$15,eventProcessing,lambda$configureMessageMonitor$29,lambda$new$2,lambda$defaultDeadlineManager$21,invokeLifecycleHandlers,lambda$invokeStartHandlers$49,lambda$new$3,registerQueryHandler,lambda$defaultCommandGateway$10,lambda$registerMessageHandler$38,lambda$invokeLifecycleHandlers$51,prepareModules,lambda$jpaConfiguration$8,invokeShutdownHandlers,lambda$jpaConfiguration$7,defaultHandlerDefinition,defaultSnapshotter,retrieveHandlerDefinition,defaultCommandBus,defaultQueryGateway,lambda$registerQueryHandler$34,defaultResourceInjector,jpaConfiguration,defaultUpcasterChain,lambda$defaultHandlerDefinition$16,lambda$defaultCommandBus$18,defaultComponent,defaultCommandGateway,defaultParameterResolverFactory,lambda$new$1,defaultSpanFactory,defaultDeadlineManager,lambda$defaultSerializer$24,lambda$defaultEventBus$22,lambda$defaultScopeAwareProvider$20,verifyIdentifierFactory,lambda$registerCommandHandler$30,lambda$prepareModules$45,defaultEventGateway,lambda$defaultResourceInjector$19,defaultConfiguration,registerModule,lambda$jpaConfiguration$9,lambda$configureEmbeddedEventStore$42,defaultQueryBus,lambda$prepareMessageHandlerRegistrars$47,lambda$registerCommandHandler$33,lambda$defaultEventGateway$23,lambda$registerQueryHandler$37,invokeInitHandlers,lambda$defaultQueryBus$13,prepareMessageHandlerRegistrars,defaultScopeAwareProvider,registerCommandHandler",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"detectIllegalStateChanges,assertValidWorkingAggregateState,lambda$null$5,lambda$buildResultValidator$9,lambda$null$3,failIllegalStateChange,aggregateModel,ensureValuesEqual,lambda$when$2,clearGivenWhenState,registerRepository,registerCommandHandler,lambda$when$8,andGivenCommands,whenTimeElapses,lambda$whenConstructing$4,lambda$when$7,lambda$andGivenCommands$1,when,buildResultValidator,getRepositoryProvider,given,ensureRepositoryConfiguration,givenCommands,finalizeConfiguration,getParameterResolverFactory,registerFieldFilter,handleDeadline,registerRepositoryProvider,whenTimeAdvancesTo,registerAggregateCommandHandlers,andGiven,andGivenCurrentTime,lambda$whenInvoking$6,lambda$givenState$0,useStateStorage,currentTime,getHandlerDefinition,executeAtSimulatedTime",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectNoScheduledDeadlineMatching,expectScheduledDeadlineMatching,expectException,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectNoScheduledDeadlineMatching$3,lambda$expectNoScheduledDeadlineMatching$5,lambda$expectScheduledDeadlineWithName$1,expectResultMessagePayload,lambda$expectNoScheduledDeadlineWithName$4,expectTriggeredDeadlinesMatching,expectExceptionDetails,verifyMetaDataEquality,expectTriggeredDeadlines,expectResultMessageMatching,lambda$expectNoScheduledDeadlineWithName$2,expectEvents,recordException,expectExceptionMessage,verifyPayloadEquality,lambda$expectScheduledDeadlineWithName$0",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"lambda$expectNoScheduledDeadlineMatching$6,lambda$expectNoScheduledDeadlineMatching$4,expectScheduledEventMatching,lambda$registerStartRecordingCallback$0,lambda$expectNoScheduledDeadlineWithName$3,expectNoScheduledEventMatching,expectScheduledDeadlineMatching,lambda$expectScheduledDeadlineWithName$1,expectTriggeredDeadlines,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$5,lambda$expectNoScheduledDeadlineWithName$7,lambda$expectScheduledDeadlineWithName$2,expectTriggeredDeadlinesMatching",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$800,access$400,access$700,access$900,access$1300,invokeShutdownHandlers,access$200,defaultComponent,access$600,access$1500,access$1200,access$1000,access$1400,access$500,access$300,access$1100,invokeStartHandlers",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"registerLifecycleHandler,lambda$getComponent$1,isEarlierPhaseDuringShutdown,lambda$registerLifecycleHandler$2,lambda$null$0,isEarlierPhaseDuringStartUp",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"registerStartRecordingCallback,startRecording",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"lambda$null$0,givenAggregate,getCommandBus,registerCommandGateway,getParameterResolverFactory,ensureSagaResourcesInitialized,registerFieldFilter,getResourceInjector,getPublisherFor,currentTime,handleInSaga,timeCorrectedEventMessage,lambda$handleInSaga$1,handleDeadline,registerResource,getHandlerDefinition",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"recordException,assertValidRecording",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$602,access$700,access$600,access$900,access$800",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"lambda$start$0,lambda$rollback$7,changePhase,notifyHandlers,commitAsRoot,lambda$start$3,onRollback,setPhase,phase,lambda$commit$4,setRollbackCause,delegateAfterCommitToParent,lambda$start$1,commitAsNested,lambda$rollback$8,lambda$commit$5,lambda$commitAsNested$6,lambda$null$2,addHandler",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"lambda$null$8,isRunning,spawnWorker,lambda$null$7,releaseSegment,singleStatusUpdater,lambda$null$1,start,lambda$new$2,lambda$getTokenStoreIdentifier$3,resetTokens,lambda$calculateIdentifier$4,lambda$null$9,supportsReset,lambda$resetTokens$6,lambda$null$11,lambda$new$0,lambda$singleStatusUpdater$12,statusUpdater,calculateIdentifier,shutdownAsync,lambda$resetTokens$10,lambda$statusUpdater$13,lambda$resetTokens$5",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"lambda$claimDeadLetter$12,lambda$amountOfSequences$16,lambda$toLetter$8,lambda$findFirstLetterOfEachAvailableSequence$10,requeue,lambda$enqueue$2,lambda$enqueue$0,entityManager,lambda$evict$4,lambda$findNextDeadLetter$11,findFirstLetterOfEachAvailableSequence,lambda$size$15,getProcessingStartedLimit,lambda$enqueue$3,amountOfSequences,getMaxIndexForSequence,lambda$sequenceSize$14,lambda$getMaxIndexForSequence$17,toStringSequenceIdentifier,findNextDeadLetter,processLetterAndFollowing,isFull,lambda$processLetterAndFollowing$9,lambda$clear$13,lambda$enqueue$1,claimDeadLetter,toLetter,getNextIndexForSequence,lambda$toLetter$7,sequenceSize,evict,lambda$deadLetterSequence$5,lambda$deadLetters$6",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$enqueue$3,lambda$toLetter$8,lambda$sequenceSize$14,lambda$amountOfSequences$16,getProcessingStartedLimit,toStringSequenceIdentifier,getNextIndexForSequence,lambda$getMaxIndexForSequence$17,amountOfSequences,lambda$findFirstLetterOfEachAvailableSequence$10,evict,lambda$deadLetters$6,lambda$clear$13,lambda$toLetter$7,isFull,requeue,findFirstLetterOfEachAvailableSequence,lambda$enqueue$0,processLetterAndFollowing,claimDeadLetter,findNextDeadLetter,lambda$claimDeadLetter$12,lambda$enqueue$1,lambda$deadLetterSequence$5,lambda$processLetterAndFollowing$9,lambda$size$15,lambda$findNextDeadLetter$11,lambda$evict$4,getMaxIndexForSequence,entityManager,lambda$enqueue$2,toLetter,sequenceSize",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$null$7,inStartedPhaseOfUnitOfWork,lambda$null$6,lambda$doCompleteExceptionally$19,lambda$complete$9,lambda$payloadMatchesQueryResponseType$15,lambda$doComplete$17,lambda$registerDispatchInterceptor$11,lambda$null$13,lambda$doEmit$12,doCompleteExceptionally,lambda$completeExceptionally$10,lambda$null$20,intercept,lambda$doEmit$14,payloadMatchesQueryResponseType,lambda$runOnAfterCommitOrNow$21,doEmit,runOnAfterCommitOrNow,lambda$registerUpdateHandler$2,lambda$registerUpdateHandler$1,lambda$registerUpdateHandler$4,lambda$queryUpdateHandlerRegistered$0,lambda$registerUpdateHandler$3,lambda$emit$8,emitError,lambda$null$18,doComplete,lambda$null$16,lambda$emit$5",31,1,""
"org.axonframework.test.saga.SagaTestFixture",37,"currentTime,handleInSaga,access$300",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$andThenApply$13,lambda$findHandlerAndHandleCommand$9,handle,applyMessageOrPayload,andThen,lambda$doApply$11,doApply,lambda$findHandlerAndHandleCommand$10,lambda$null$8,lambda$createMessage$12,createMessage,rootType,lambda$handle$3,publish,initialize,lambda$handle$5,lambda$invoke$1,registerRoot,publishOnEventBus,initSequence,lambda$handle$6,lambda$execute$2,findHandlerAndHandleCommand,lambda$registerRoot$0,lambda$handle$4,lambda$handle$7",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$eventProcessingConfiguration$4,aggregateConfiguration,getComponent,eventBus,lambda$findModules$0,getModules,lambda$resourceInjector$2,lambda$aggregateConfiguration$6,lambda$getComponent$8,lambda$findModules$1,lambda$eventProcessingConfiguration$3,lambda$aggregateConfiguration$5,findModules,lambda$aggregateConfiguration$7",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$700,access$1300,access$1500,access$1600,access$600,access$900,access$1100,access$1200,access$2000,access$1800,access$1700,access$2100,getState,access$1400,access$800,doSleepFor,access$1000,access$2200",18,1,""
"org.axonframework.config.Configurer",29,"registerQueryHandler,configureMessageMonitor,buildConfiguration,lambda$configureMessageMonitor$1,configureAggregate,eventProcessing,registerCommandHandler,lambda$configureMessageMonitor$0,registerComponent,registerModule",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1300,access$1500,processingLoop,access$900,access$1100,access$1200,getState,access$1400,access$800,access$1000",10,1,""
"org.axonframework.config.Configuration",27,"messageMonitor,parameterResolverFactory,spanFactory,eventBus,getComponent,correlationDataProviders,handlerDefinition",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$700,access$600",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"releaseSegment,access$2000,access$800,access$1000",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$2000,access$800,access$1000",3,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$canHandle$4,lambda$handle$8,handle,lambda$handle$6,lambda$null$3,lambda$execute$2,lambda$invoke$1,lambda$null$5,lambda$handle$7,lambda$new$0,canHandle,getAssociationValues",13,1,""
"org.axonframework.config.Configuration",25,"snapshotFilter,messageMonitor,repository,queryBus,parameterResolverFactory,upcasterChain,eventStore,getComponent,spanFactory,eventBus,correlationDataProviders,commandBus,eventSerializer,scopeAwareProvider,handlerDefinition,findModules,serializer,messageSerializer",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"requeue,lambda$enqueue$0,contains,isFull,builder,lambda$requeue$2,lambda$process$4,lambda$process$5,lambda$clear$7,maximumNumberOfSequencesReached,maximumSequenceSizeReached,lambda$process$6,toIdentifier,lambda$evict$1,getLastTouchedSequence,lambda$process$3,evict",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$getSubscriptionQueryResult$6,getSubscriptionQueryMessage,lambda$query$2,lambda$getSubscriptionQueryResult$5,lambda$streamingQuery$4,lambda$registerDispatchInterceptor$8,processInterceptors,lambda$query$1,lambda$streamingQuery$3,lambda$query$0,getSubscriptionQueryResult,lambda$getSubscriptionQueryResult$7",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"unmarkError,getSegment,caughtUp,advancedTo,markError,isCaughtUp,isErrorState",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"schedulePayloadAndMetadata,schedulePayload,publish,createMessage,schedule,lambda$publishEventMessage$0,shutdown,lambda$schedulePayload$edc2443f$1,publishEventMessage,publishWithRevision,lambda$schedulePayloadAndMetadata$efde5fa1$1,lambda$schedulePayload$66ef0dda$1,lambda$schedulePayloadAndMetadata$3b5ac046$1",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"loadToken,lambda$fetchSegments$0,initializeTokenSegments,fetchSegments,lambda$retrieveStorageIdentifier$3,validateSegment,getConfig,lambda$fetchAvailableSegments$2,lambda$fetchAvailableSegments$1",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"lambda$fetchAvailableSegments$1,initializeTokenSegments,loadToken,getConfig,fetchSegments,lambda$fetchSegments$0,validateSegment,lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$2",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"lambda$registerDispatchInterceptor$3,processDispatchInterceptors,lambda$consumeDeadline$5,schedule,lambda$cancelAllWithinScope$2,advanceTimeTo,lambda$cancelAll$1,consumeDeadline,lambda$registerHandlerInterceptor$4,lambda$cancelSchedule$0,advanceToNextTrigger",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"context,lambda$getTokenAtReset$2,isReplay,createReplayToken,advancedTo,lambda$replayContext$1,replayContext,lambda$isReplay$0,getTokenAtReset",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$publish$0,lambda$doAppendEvents$1,lambda$registerDispatchInterceptor$4,doAppendEvents,lambda$doAppendEvents$2,lambda$subscribe$3,injectAggregateIdentifier,openStream",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"lambda$registerDispatchInterceptor$6,dispatch,lambda$registerHandlerInterceptor$7,lambda$initializePublisherThreads$0,initializePublisherThreads,lambda$subscribe$5,lambda$dispatch$2,lambda$doDispatch$3,createRepository,lambda$subscribe$4,doDispatch,initializeInvokerThreads,lambda$initializeInvokerThreads$1",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"next,nextSequenceNumber,initActiveIfRequired",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"getCurrentPosition,isReplaying,getError,getTrackingToken,isMerging,mergeCompletedPosition,getSegment,split,isCaughtUp,isErrorState,getResetPosition",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"advancedTo,markError,isErrorState",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"getSnapshotSerializer,getEventSerializer,isFirstDomainEvent,lambda$readSnapshot$0,readSnapshotData,readEventData,storeSnapshot,appendEvents,buildExceptionMessage,lambda$readSnapshot$1",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"next,lambda$getLastSequenceNumber$0,hasNext",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"peekGlobalStream,peek,lastToken,lambda$closePrivateStream$0,behindGlobalCache,nextNode,closePrivateStream,nextAvailable,peekPrivateStream,stopTailingGlobalStream",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"behindGlobalCache,lastToken,peek,lambda$closePrivateStream$0,nextAvailable,peekPrivateStream,nextNode,closePrivateStream,stopTailingGlobalStream,peekGlobalStream",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"andMetaData,getPayload,withMetaData,isExceptional,findExceptionResult",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"root,getSagaIdentifier,isActive,getAssociationValues",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getCurrentDateTime,getTriggeredDeadlines,getScheduledDeadlines",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$makeCurrent$0,lambda$recordException$1",2,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"initializeTokenSegments,fetchSegments,lambda$storeToken$0,lambda$fetchSegments$1",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"lambda$stagedDomainEventMessages$0,lambda$readEvents$3,stagedDomainEventMessages,handleSnapshotReadingError,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$2",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"next,readNext",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$100,access$000",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$3,lambda$handle$0,lambda$handle$1,lambda$handle$2",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"queryResultType,unwrapType,lambda$new$0,upperBound",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"getSpanMessage,lambda$null$5,lambda$createInternalSpan$8,lambda$createRootTrace$0,lambda$getSpanMessage$4,lambda$createInternalSpan$7,lambda$createDispatchSpan$2,lambda$createHandlerSpan$1,lambda$null$6,lambda$getSpanMessage$3",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$get$1,lambda$computeIfPresent$4,lambda$removeAll$2,lambda$containsKey$3,purgeItems,lambda$registerCacheEntryListener$0",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"processingGroup,lambda$ensureInitialized$3,lambda$initialize$1,lambda$initialize$2,ensureInitialized,initialize,lambda$eventProcessor$0",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$registerHandlerInterceptor$2,dispatchInterceptors,lambda$registerDispatchInterceptor$1,lambda$runOnPrepareCommitOrNow$0",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"mergePosition,doAdvance,lambda$mergePosition$0,lambda$mergePosition$1",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"doConsumeNext,lambda$skipMessagesWithPayloadTypeOf$3,nextAvailable,lambda$setOnAvailableCallback$4,lambda$peekForMessages$2,lambda$setOnAvailableCallback$5,messageSource,peekForMessages,skipMessagesWithPayloadTypeOf,lambda$doConsumeNext$1,lambda$new$0",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken,getSegment",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"repository,parameterResolverFactory,eventStore,spanFactory,eventBus,getComponent,commandBus,handlerDefinition",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll,deadlineNameMatch",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$null$2,lambda$processInUnitOfWork$3,getSpanName,lambda$null$1,processInUnitOfWork,getName,lambda$registerHandlerInterceptor$0",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"upperSegmentToken,isMergeInProgress,lowerSegmentToken,mergePosition,position",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"isReplay,createReplayToken,getTokenAtReset,position,lowerBound",6,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$handle$3,lambda$canHandle$2,lambda$new$1,lambda$new$0",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"withMetaData,andMetaData,optionalExceptionResult,isExceptional",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"doApply,publish,publishOnEventBus",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asNullableResponseMessage,asResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType,getData",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,routingKey",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,isFactoryHandler",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"handle,canHandle,prepareReset,lambda$canHandleType$3,lambda$prepareReset$4,lambda$canHandleType$2,lambda$handle$0,lambda$canHandle$1",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"getType,withMetaData,andMetaData,getSequenceNumber,getAggregateIdentifier",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"withTrackingToken,andMetaData,withMetaData,trackingToken",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"skipMessagesWithPayloadTypeOf,peek,hasNextAvailable,setOnAvailableCallback,access$300,close",7,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getId,getSequenceIdentifier,getIndex",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getSequenceIdentifier,getIndex,getId",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"typeMatches,checkAndRethrowForExceptionOrError,resolveParameterValues,parametersMatch",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"canHandle,handle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isGenericAssignableFrom,isArray,isWildcardType,isGenericArrayType,isParameterizedType,isWildcardTypeWithMatchingUpperBound,isParameterizedTypeOfExpectedType,isTypeVariable,isAssignableFrom",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"declaredType,getVersion,type",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"version,identifier,initialize,isDeleted",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"send,access$300,access$200,access$500,getAggregate,load,newInstance",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createHandlerSpan$1,lambda$registerSpanAttributeProvider$5,lambda$createRootTrace$0,lambda$createDispatchSpan$2,lambda$createInternalSpan$3,lambda$createInternalSpan$4",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"shutdownDispatching,intercept,dispatch,lambda$registerDispatchInterceptor$1,lambda$subscribe$0,localSegment,updateFilter,disconnect",8,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"andMetaData,withMetaData,asDeadlineMessage,lambda$asDeadlineMessage$1,lambda$asDeadlineMessage$0",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"lambda$performReset$2,canHandle,lambda$canHandleType$1,lambda$canHandle$0,performReset,flatten,delegates",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"andMetaData,withMetaData,exceptionDetails,isExceptional,optionalExceptionResult",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$1,lambda$new$0",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"type,types",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"createSagaEntry,serializedSagaAsString,addNamedQueriesTo,serializedObjectType,removeAssociationValue,getSagaTypeName,sagaEntryEntityName,storeAssociationValue,loadAssociationValues",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"storeAssociationValue,removeAssociationValue,sagaEntryEntityName,getSagaTypeName,createSagaEntry,serializedSagaAsString,loadAssociationValues,addNamedQueriesTo,serializedObjectType",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"getQueryName,withMetaData,andMetaData,getResponseType",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getQueryName,getResponseType",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"parameterResolverFactory,spanFactory,eventProcessingConfiguration,resourceInjector,handlerDefinition",5,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"trackingToken,withTrackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"upperSegmentToken,lowerSegmentToken,isUpperSegmentAdvanced,isLowerSegmentAdvanced",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"lambda$new$0,invokeHandlers,sequencingPolicyMatchesSegment,hasHandler,sequenceIdentifier,performReset,detectList,lambda$canHandleType$1",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$1,lambda$readEvents$0",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"enqueuedAt,message,lambda$new$0,cause,diagnostics",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$updateSaga$4,lambda$removeAssociationValueFromCache$2,cacheKey,addCachedAssociations,lambda$addCachedAssociations$3,removeAssociationValueFromCache,lambda$deleteSaga$1,lambda$findSagas$0",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$getAggregate$4,load,canResolve,validateIdentifier,lambda$newInstance$1,lambda$load$3,lambda$load$2,lambda$loadOrCreate$0",8,1,""
"org.axonframework.test.saga.EventValidator",13,"createEqualToMatchers,unwrapEvent,assertPublishedEventsMatching,lambda$startRecording$0,handle",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"withMetaData,getCommandName,andMetaData",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"newInstance,lambda$load$0,load,removeFromCache,canResolve",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"andMetaData,getTimestamp,withMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"schedule,buildJobDetail,initialize,lambda$cancelSchedule$1,lambda$schedule$0,buildTrigger,shutdown",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"lambda$readEvents$0,readEvents",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"version,getWrappedAggregate,isLockHeld",3,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"initializeAt,advanceTimeTo,advanceTimeBy,getCurrentDateTime",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"registerHandlerInterceptor,builder,subscribe,dispatch,registerDispatchInterceptor",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"lambda$send$0,asRuntime,send",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"newInstance,load,loadOrCreate",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"lambda$send$2,canResolve,lambda$send$0,send,load,lambda$send$1",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.messaging.ResultMessage",11,"exceptionResult,isExceptional",2,1,""
"org.axonframework.queryhandling.QueryGateway",11,"subscriptionQuery,query,scatterGather,streamingQuery",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"getQueryName,andMetaData,withMetaData",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"getConverter,doSerialize,classForType,typeForClass,registerConverters,revisionOf,doDeserialize,typeIdentifierOf",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"resolveClassName,getWriter,classForType,getReader,typeForClass,registerConverters,builder",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"load,newInstance,lambda$newInstance$0,canResolve",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"createListenerAdapter,lambda$registerCacheEntryListener$0,doRegisterListener",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"repository,snapshotFilter,aggregateFactory,aggregateType",4,1,""
"org.axonframework.config.Configuration",10,"eventProcessingConfiguration,findModules",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored,processInUnitOfWork,canHandle",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"nextAvailable,skipMessagesWithPayloadTypeOf",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"invokeHandlers,sequencingPolicyMatchesSegment,eventHandlers,sequenceIdentifier,performReset",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"lambda$isReplaying$0,resetTokens,processingStatus",3,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.messaging.MessageDecorator",10,"getIdentifier,describeType,getMetaData,getPayload,describeTo",5,1,""
"org.axonframework.messaging.MessageDecorator",10,"serializePayload,getPayload",2,1,""
"org.axonframework.messaging.ResultMessage",10,"exceptionResult,isExceptional",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"getAll,mergedWith,isEmpty,get,contains",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"getSerializedType,classForType,revisionOf",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configurer",9,"registerComponent,configureEmbeddedEventStore",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"next,getGlobalIndex,offsetBy",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"lambda$covers$2,lambda$upperBound$1,lambda$lowerBound$0,offsetBy,compareTo",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTokenSince,createHeadToken,createTailToken,sourceId,createTokenAt",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"alterToken,nextAvailable",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$400,access$300,access$500,access$600",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"schedule,shutdown",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"constructHandlerAttributesFor,prefixedKey,lambda$constructHandlerAttributesFor$1,lambda$null$0",4,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName,loadAssociations",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"access$100,hashes,toString,equals",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateFactory,aggregateType",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$2200,access$1900,access$2300,access$2400",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"upperBound,lowerBound,advancedTo,unwrap",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"findSagas,size",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"registerConverter,canConvert",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"lambda$and$97c94f44$1,matches",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getSequenceNumber,getType,getAggregateIdentifier",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"supportsReset,handle,prepareReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"getTokenForStream,advancedTo",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"canHandle,lambda$handle$0,handle",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"lambda$handle$0,canHandle,handle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"getProperty,createProperty,lambda$getProperty$0,getHandlerName",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"queuedThreads,isHeldBy,lock",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"handle,prepareReset",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"openStream,sourceId",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"lambda$unexpectedEvents$0,unexpectedEvents",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600,access$400",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$700,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,resolveReturnValue",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.Repository",6,"load,newInstance,loadOrCreate",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$findHandlerMethods$1,lambda$resolveAssociation$0",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$1,lambda$findSagas$0",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getType,getData,getContentType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"checkForDeadlock,disposeIfUnused",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getGaps,getIndex",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$handle$0,lambda$process$1",2,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$onMessageIngested$1,lambda$new$0",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"convert,bytesFrom",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
