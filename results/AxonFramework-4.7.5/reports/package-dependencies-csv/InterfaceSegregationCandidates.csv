"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp","getIdentifier",2,8
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber","getAggregateIdentifier","getType",3,5
"org.axonframework.messaging.ResultMessage",9,"isExceptional","exceptionResult",2,5
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,3
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber","getAggregateIdentifier","getType",3,3
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber","getAggregateIdentifier",2,3
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"getIndex","advanceTo","newInstance","withGapsTruncatedAt","getGaps",5,3
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3
"org.axonframework.eventhandling.TrackerStatus",17,"getTrackingToken","getSegment","split",3,2
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initSequence","getAggregateRoot","initialize",4,2
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler","commandName",2,2
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2
"org.axonframework.eventhandling.DomainEventMessage",13,"getSequenceNumber","getAggregateIdentifier",2,2
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2
"org.axonframework.eventhandling.TrackedEventMessage",11,"withTrackingToken","trackingToken",2,2
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2
"org.axonframework.config.Configuration",9,"getComponent",1,2
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2
"org.axonframework.config.EventProcessingModule",156,"lambda$registerSagaManagers$43","errorHandler","lambda$usingPooledStreamingEventProcessors$56","lambda$buildEventProcessor$46","tokenStore","lambda$registerRollbackConfiguration$61","lambda$null$11","rollbackConfiguration","lambda$null$40","lambda$null$18","lambda$annotatedProcessingGroupOfType$70","trackingEventProcessorConfig","lambda$null$26","lambda$registerSubscribingEventProcessor$57","lambda$registerTokenStore$53","lambda$null$19","lambda$registerHandlerInterceptor$59","lambda$registerDeadLetterQueue$66","lambda$registerListenerInvocationErrorHandler$50","lambda$null$36","lambda$pooledStreamingEventProcessor$69","trackingEventProcessor","pooledStreamingEventProcessor","validateConfigInitialization","defaultExecutor","registerTrackingEventProcessor","lambda$pooledStreamingEventProcessor$68","messageMonitor","subscribingEventProcessor","lambda$null$35","lambda$registerDeadLetterPolicy$67","lambda$null$42","lambda$usingTrackingEventProcessors$55","lambda$buildEventProcessor$44","lambda$registerTrackingEventProcessor$51","lambda$usingSubscribingEventProcessors$54","annotatedProcessingGroupOfType","lambda$registerTrackingEventProcessor$52","lambda$buildEventProcessor$45","lambda$registerTransactionManager$62","eventProcessors","lambda$null$32","lambda$null$41","lambda$null$33","lambda$null$31","registerTrackingEventProcessorConfiguration","lambda$sagaConfigurations$48","lambda$registerTrackingEventProcessorConfiguration$64","lambda$registerTrackingEventProcessorConfiguration$63","processorNameForProcessingGroup","lambda$registerPooledStreamingEventProcessor$65","registerEventProcessor","lambda$registerEventHandler$49","lambda$registerErrorHandler$58","lambda$eventProcessors$47","lambda$static$0","lambda$registerSequencingPolicy$60","lambda$new$6","lambda$registerEventHandlerInvokers$30","lambda$new$4","buildEventProcessor","selectProcessingGroupByType","lambda$registerEventHandlerInvokers$37","lambda$new$1","lambda$new$3","lambda$new$21","defaultEventProcessor","lambda$new$10","lambda$new$14","lambda$new$8","lambda$new$16","registerEventHandlerInvokers","lambda$new$22","packageOfObject","retrieveHandlerDefinition","listenerInvocationErrorHandler","noSagaProcessorCustomization","lambda$selectProcessingGroupByType$28","deadLetteringInvoker","lambda$new$24","lambda$deadLetteringInvoker$39","sequencingPolicy","registerSagaManagers","lambda$new$12","lambda$deadLetteringInvoker$38","transactionManager","lambda$initializeProcessors$27","lambda$new$20","lambda$new$9","lambda$new$5","lambda$new$13","deadLetterQueue","lambda$new$25","initializeProcessors","lambda$new$7","simpleInvoker","deadLetterPolicy","lambda$new$15","lambda$registerEventHandlerInvokers$34","lambda$new$23","lambda$new$17","lambda$selectProcessingGroupByType$29","lambda$new$2",103,1
"org.axonframework.config.DefaultConfigurer",97,"lambda$null$46","registerComponent","defaultParameterResolverFactory","lambda$prepareMessageHandlerRegistrars$47","lambda$defaultHandlerDefinition$16","lambda$registerMessageHandler$40","lambda$defaultSerializer$24","defaultQueryGateway","lambda$jpaConfiguration$9","lambda$null$43","lambda$registerMessageHandler$39","defaultSpanFactory","defaultDeadlineManager","prepareMessageHandlerRegistrars","defaultHandlerDefinition","registerCommandHandler","lambda$jpaConfiguration$8","defaultScopeAwareProvider","lambda$onStart$53","lambda$eventProcessing$27","lambda$defaultCommandGateway$10","prepareModules","lambda$invokeInitHandlers$48","lambda$null$17","defaultQueryUpdateEmitter","defaultUpcasterChain","lambda$invokeLifecycleHandlers$51","lambda$defaultDeadlineManager$21","lambda$static$0","registerModule","lambda$null$25","lambda$registerHandlerDefinition$44","lambda$registerCommandHandler$33","lambda$defaultEventBus$22","invokeLifecycleHandlers","lambda$configureEmbeddedEventStore$42","lambda$registerMessageHandler$41","lambda$defaultScopeAwareProvider$20","lambda$defaultCommandBus$18","lambda$registerCommandHandler$30","lambda$defaultSnapshotter$26","lambda$defaultQueryBus$13","defaultEventGateway","defaultEventBus","eventProcessing","defaultQueryBus","lambda$new$2","lambda$new$3","lambda$defaultParameterResolverFactory$15","lambda$null$31","defaultResourceInjector","lambda$defaultQueryGateway$11","lambda$registerMessageHandler$38","lambda$invokeLifecycleHandlers$52","defaultSerializer","lambda$defaultResourceInjector$19","invokeInitHandlers","lambda$registerQueryHandler$37","lambda$configureMessageMonitor$29","lambda$new$1","lambda$defaultConfiguration$4","lambda$prepareModules$45","lambda$jpaConfiguration$6","lambda$eventProcessing$28","defaultCommandGateway","lambda$invokeStartHandlers$49","registerQueryHandler","lambda$jpaConfiguration$7","defaultCommandBus","retrieveHandlerDefinition","lambda$defaultEventGateway$23","lambda$null$35","lambda$defaultQueryUpdateEmitter$14","lambda$jpaConfiguration$5","jpaConfiguration","lambda$onShutdown$54","defaultConfiguration","lambda$null$32","lambda$invokeShutdownHandlers$50","verifyIdentifierFactory","defaultSnapshotter","invokeShutdownHandlers","defaultComponent","lambda$null$12","lambda$registerQueryHandler$34","lambda$null$36",86,1
"org.axonframework.test.aggregate.AggregateTestFixture",85,"aggregateModel","lambda$whenConstructing$4","currentTime","lambda$whenInvoking$6","buildResultValidator","ensureValuesEqual","handleDeadline","lambda$when$7","when","lambda$null$5","lambda$buildResultValidator$9","whenTimeAdvancesTo","failIllegalStateChange","lambda$when$8","lambda$null$3","lambda$when$2","detectIllegalStateChanges","assertValidWorkingAggregateState","andGivenCurrentTime","whenTimeElapses","registerRepository","ensureRepositoryConfiguration","givenCommands","getRepositoryProvider","useStateStorage","given","clearGivenWhenState","lambda$andGivenCommands$1","registerRepositoryProvider","getParameterResolverFactory","executeAtSimulatedTime","registerAggregateCommandHandlers","andGivenCommands","lambda$givenState$0","finalizeConfiguration","registerCommandHandler","registerFieldFilter","andGiven","getHandlerDefinition",40,1
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectExceptionMessage","expectTriggeredDeadlines","verifyPayloadEquality","expectNoScheduledDeadlineMatching","lambda$expectNoScheduledDeadlineMatching$3","expectScheduledDeadlineMatching","lambda$expectNoScheduledDeadlineWithName$2","expectTriggeredDeadlinesMatching","lambda$expectScheduledDeadlineWithName$0","lambda$expectNoScheduledDeadlineWithName$6","lambda$expectNoScheduledDeadlineWithName$4","expectExceptionDetails","recordException","expectEvents","lambda$expectScheduledDeadlineWithName$1","expectResultMessagePayload","expectResultMessageMatching","expectException","verifyMetaDataEquality","lambda$expectNoScheduledDeadlineMatching$5",24,1
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"lambda$expectNoScheduledDeadlineMatching$6","expectTriggeredDeadlinesMatching","expectTriggeredDeadlines","expectScheduledEventMatching","expectNoScheduledDeadlineMatching","expectScheduledDeadlineMatching","lambda$expectNoScheduledDeadlineMatching$4","lambda$expectNoScheduledDeadlineWithName$3","lambda$expectNoScheduledDeadlineWithName$7","lambda$expectScheduledDeadlineWithName$2","lambda$registerStartRecordingCallback$0","lambda$expectScheduledDeadlineWithName$1","lambda$expectNoScheduledDeadlineWithName$5","expectNoScheduledEventMatching",20,1
"org.axonframework.config.DefaultConfigurer",66,"access$600","access$500","access$200","access$1400","invokeShutdownHandlers","access$1100","access$1300","access$700","access$400","invokeStartHandlers","access$1000","access$300","access$1200","access$800","access$900","defaultComponent","access$1500",17,1
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"lambda$getComponent$1","lambda$null$0","isEarlierPhaseDuringStartUp","isEarlierPhaseDuringShutdown","lambda$registerLifecycleHandler$2","registerLifecycleHandler",6,1
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"registerStartRecordingCallback","startRecording",2,1
"org.axonframework.test.saga.SagaTestFixture",55,"lambda$null$0","getCommandBus","registerFieldFilter","ensureSagaResourcesInitialized","registerResource","currentTime","getPublisherFor","getHandlerDefinition","registerCommandGateway","handleInSaga","givenAggregate","handleDeadline","getResourceInjector","timeCorrectedEventMessage","getParameterResolverFactory","lambda$handleInSaga$1",16,1
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"recordException","assertValidRecording",2,1
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$700","access$602","access$800","access$600","access$900",5,1
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"lambda$null$2","setPhase","onRollback","lambda$start$3","commitAsNested","changePhase","delegateAfterCommitToParent","lambda$rollback$7","phase","lambda$start$1","lambda$commitAsNested$6","lambda$commit$5","lambda$commit$4","lambda$start$0","commitAsRoot","setRollbackCause","notifyHandlers","lambda$rollback$8","addHandler",19,1
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"shutdownAsync","lambda$null$9","statusUpdater","lambda$resetTokens$6","resetTokens","isRunning","calculateIdentifier","lambda$singleStatusUpdater$12","lambda$resetTokens$10","lambda$statusUpdater$13","lambda$resetTokens$5","lambda$null$11","lambda$null$8","start","lambda$getTokenStoreIdentifier$3","lambda$null$1","lambda$null$7","lambda$new$0","singleStatusUpdater","lambda$new$2","lambda$calculateIdentifier$4","supportsReset","releaseSegment","spawnWorker",27,1
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"lambda$sequenceSize$14","processLetterAndFollowing","getProcessingStartedLimit","toLetter","sequenceSize","lambda$deadLetterSequence$5","lambda$enqueue$3","entityManager","lambda$findFirstLetterOfEachAvailableSequence$10","findNextDeadLetter","requeue","lambda$enqueue$0","getNextIndexForSequence","claimDeadLetter","lambda$deadLetters$6","evict","lambda$findNextDeadLetter$11","isFull","lambda$enqueue$2","toStringSequenceIdentifier","findFirstLetterOfEachAvailableSequence","lambda$claimDeadLetter$12","lambda$toLetter$8","lambda$size$15","amountOfSequences","lambda$getMaxIndexForSequence$17","lambda$processLetterAndFollowing$9","lambda$enqueue$1","lambda$clear$13","getMaxIndexForSequence","lambda$toLetter$7","lambda$amountOfSequences$16","lambda$evict$4",33,1
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"isFull","getMaxIndexForSequence","lambda$getMaxIndexForSequence$17","lambda$size$15","lambda$amountOfSequences$16","lambda$sequenceSize$14","getNextIndexForSequence","lambda$claimDeadLetter$12","lambda$deadLetterSequence$5","lambda$enqueue$2","lambda$toLetter$8","getProcessingStartedLimit","toStringSequenceIdentifier","entityManager","processLetterAndFollowing","sequenceSize","evict","lambda$findNextDeadLetter$11","lambda$evict$4","lambda$clear$13","lambda$enqueue$3","claimDeadLetter","findFirstLetterOfEachAvailableSequence","lambda$toLetter$7","lambda$enqueue$0","lambda$findFirstLetterOfEachAvailableSequence$10","lambda$enqueue$1","toLetter","requeue","amountOfSequences","lambda$processLetterAndFollowing$9","findNextDeadLetter","lambda$deadLetters$6",33,1
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$queryUpdateHandlerRegistered$0","lambda$registerUpdateHandler$4","doEmit","runOnAfterCommitOrNow","lambda$doCompleteExceptionally$19","lambda$doEmit$14","lambda$registerDispatchInterceptor$11","lambda$null$7","lambda$complete$9","intercept","lambda$emit$8","lambda$null$18","lambda$completeExceptionally$10","doComplete","doCompleteExceptionally","lambda$registerUpdateHandler$2","lambda$doComplete$17","payloadMatchesQueryResponseType","lambda$null$16","lambda$null$6","inStartedPhaseOfUnitOfWork","lambda$registerUpdateHandler$3","lambda$payloadMatchesQueryResponseType$15","lambda$registerUpdateHandler$1","lambda$runOnAfterCommitOrNow$21","lambda$doEmit$12","lambda$null$20","lambda$emit$5","emitError","lambda$null$13",31,1
"org.axonframework.test.saga.SagaTestFixture",37,"currentTime","access$300","handleInSaga",3,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$andThenApply$13","lambda$handle$3","createMessage","lambda$createMessage$12","registerRoot","findHandlerAndHandleCommand","lambda$execute$2","lambda$null$8","lambda$handle$6","doApply","publish","rootType","andThen","lambda$handle$7","lambda$handle$5","lambda$registerRoot$0","handle","lambda$findHandlerAndHandleCommand$10","lambda$handle$4","publishOnEventBus","lambda$doApply$11","initialize","initSequence","lambda$findHandlerAndHandleCommand$9","lambda$invoke$1","applyMessageOrPayload",30,1
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1
"org.axonframework.config.Configuration",32,"eventBus","aggregateConfiguration","lambda$aggregateConfiguration$5","lambda$getComponent$8","lambda$eventProcessingConfiguration$3","lambda$eventProcessingConfiguration$4","lambda$aggregateConfiguration$7","lambda$findModules$1","lambda$aggregateConfiguration$6","findModules","getModules","lambda$findModules$0","getComponent","lambda$resourceInjector$2",15,1
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$2100","access$1500","access$1600","doSleepFor","access$2200","access$1700","access$1800","access$900","getState","access$1300","access$1400","access$800","access$700","access$600","access$2000","access$1200","access$1000","access$1100",18,1
"org.axonframework.config.Configurer",29,"lambda$configureMessageMonitor$0","registerModule","registerCommandHandler","eventProcessing","lambda$configureMessageMonitor$1","configureMessageMonitor","registerComponent","configureAggregate","buildConfiguration","registerQueryHandler",11,1
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1500","access$900","getState","access$1300","access$1400","access$800","processingLoop","access$1200","access$1000","access$1100",10,1
"org.axonframework.config.Configuration",27,"eventBus","messageMonitor","getComponent","correlationDataProviders","parameterResolverFactory","handlerDefinition","spanFactory",7,1
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$700","access$600",2,1
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$800","access$2000","access$1000",3,1
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$800","releaseSegment","access$2000","access$1000",4,1
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$null$5","lambda$invoke$1","lambda$handle$8","lambda$canHandle$4","handle","getAssociationValues","lambda$handle$7","lambda$handle$6","lambda$new$0","lambda$null$3","lambda$execute$2","canHandle",13,1
"org.axonframework.config.Configuration",25,"eventBus","snapshotFilter","messageMonitor","serializer","findModules","upcasterChain","scopeAwareProvider","getComponent","messageSerializer","correlationDataProviders","eventSerializer","queryBus","commandBus","parameterResolverFactory","eventStore","repository","handlerDefinition","spanFactory",19,1
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"lambda$process$4","lambda$process$3","evict","builder","maximumSequenceSizeReached","requeue","contains","lambda$evict$1","lambda$process$6","lambda$enqueue$0","getLastTouchedSequence","lambda$process$5","lambda$clear$7","isFull","lambda$requeue$2","toIdentifier","maximumNumberOfSequencesReached",17,1
"org.axonframework.queryhandling.DefaultQueryGateway",25,"getSubscriptionQueryMessage","getSubscriptionQueryResult","lambda$getSubscriptionQueryResult$6","lambda$streamingQuery$3","lambda$query$0","lambda$getSubscriptionQueryResult$7","lambda$streamingQuery$4","lambda$query$1","lambda$getSubscriptionQueryResult$5","processInterceptors","lambda$query$2","lambda$registerDispatchInterceptor$8",12,1
"org.axonframework.eventhandling.TrackerStatus",24,"isErrorState","caughtUp","markError","getSegment","unmarkError","isCaughtUp","advancedTo",7,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",24,"findRoutingKey","findIdentifierMember","findDeclaredType","stripGetterConvention","assertIdentifierValidity","prepareChildEntityCommandHandlers","addHandler","prepareHandlers","validateCommandHandlers","inspectAggregateTypes","inspectFieldsAndMethods","createChildDefinitions","factoryCommands","setIdentifierAndRoutingKey","isGetterByConvention","setVersionMember",16,1
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"publishWithRevision","schedulePayloadAndMetadata","publishEventMessage","lambda$schedulePayloadAndMetadata$3b5ac046$1","lambda$schedulePayload$66ef0dda$1","shutdown","createMessage","lambda$schedulePayload$edc2443f$1","lambda$publishEventMessage$0","lambda$schedulePayloadAndMetadata$efde5fa1$1","publish","schedule","schedulePayload",16,1
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"loadToken","fetchSegments","initializeTokenSegments","lambda$fetchSegments$0","lambda$fetchAvailableSegments$1","lambda$fetchAvailableSegments$2","validateSegment","getConfig","lambda$retrieveStorageIdentifier$3",10,1
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"loadToken","getConfig","lambda$retrieveStorageIdentifier$3","lambda$fetchSegments$0","fetchSegments","lambda$fetchAvailableSegments$2","lambda$fetchAvailableSegments$1","validateSegment","initializeTokenSegments",10,1
"org.axonframework.test.deadline.StubDeadlineManager",23,"processDispatchInterceptors","lambda$cancelSchedule$0","lambda$registerHandlerInterceptor$4","advanceTimeTo","lambda$registerDispatchInterceptor$3","lambda$consumeDeadline$5","advanceToNextTrigger","schedule","consumeDeadline","lambda$cancelAll$1","lambda$cancelAllWithinScope$2",11,1
"org.axonframework.eventhandling.ReplayToken",22,"lambda$isReplay$0","createReplayToken","isReplay","replayContext","lambda$replayContext$1","advancedTo","context","lambda$getTokenAtReset$2","getTokenAtReset",11,1
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$doAppendEvents$1","lambda$subscribe$3","openStream","lambda$publish$0","lambda$registerDispatchInterceptor$4","doAppendEvents","injectAggregateIdentifier","lambda$doAppendEvents$2",8,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"initializeInvokerThreads","createRepository","lambda$subscribe$5","initializePublisherThreads","lambda$dispatch$2","dispatch","lambda$initializePublisherThreads$0","lambda$registerHandlerInterceptor$7","lambda$subscribe$4","lambda$initializeInvokerThreads$1","doDispatch","lambda$doDispatch$3","lambda$registerDispatchInterceptor$6",16,1
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"initActiveIfRequired","next","nextSequenceNumber",3,1
"org.axonframework.eventhandling.TrackerStatus",19,"getTrackingToken","isErrorState","mergeCompletedPosition","isMerging","getSegment","getResetPosition","split","isReplaying","getCurrentPosition","getError","isCaughtUp",11,1
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState","markError","advancedTo",3,1
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"storeSnapshot","readEventData","isFirstDomainEvent","lambda$readSnapshot$0","appendEvents","getSnapshotSerializer","readSnapshotData","getEventSerializer","buildExceptionMessage","lambda$readSnapshot$1",11,1
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"next","lambda$getLastSequenceNumber$0","hasNext",3,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"peekPrivateStream","nextNode","closePrivateStream","behindGlobalCache","lastToken","peekGlobalStream","stopTailingGlobalStream","peek","lambda$closePrivateStream$0","nextAvailable",10,1
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"lastToken","nextAvailable","behindGlobalCache","peek","stopTailingGlobalStream","peekPrivateStream","lambda$closePrivateStream$0","peekGlobalStream","nextNode","closePrivateStream",10,1
"org.axonframework.messaging.GenericResultMessage",19,"isExceptional","getPayload","andMetaData","findExceptionResult","withMetaData",5,1
"org.axonframework.modelling.saga.AnnotatedSaga",19,"isActive","getAssociationValues","getSagaIdentifier","root",4,1
"org.axonframework.test.deadline.StubDeadlineManager",19,"getCurrentDateTime","getScheduledDeadlines","getTriggeredDeadlines",3,1
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$makeCurrent$0","lambda$recordException$1",2,1
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"fetchSegments","lambda$fetchSegments$1","lambda$storeToken$0","initializeTokenSegments",4,1
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"stagedDomainEventMessages","handleSnapshotReadingError","lambda$readEvents$3","lambda$stagedDomainEventMessages$1","lambda$stagedDomainEventMessages$2","lambda$stagedDomainEventMessages$0",6,1
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next","hasNext",2,1
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"next","readNext",2,1
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$2","lambda$handle$0","lambda$handle$1","lambda$handle$3",4,1
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"upperBound","unwrapType","queryResultType","lambda$new$0",4,1
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$createHandlerSpan$1","lambda$createRootTrace$0","lambda$getSpanMessage$4","getSpanMessage","lambda$createInternalSpan$7","lambda$createInternalSpan$8","lambda$null$5","lambda$getSpanMessage$3","lambda$null$6","lambda$createDispatchSpan$2",10,1
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$computeIfPresent$4","purgeItems","lambda$containsKey$3","lambda$removeAll$2","lambda$registerCacheEntryListener$0","lambda$get$1",6,1
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"lambda$ensureInitialized$3","lambda$initialize$2","lambda$eventProcessor$0","initialize","ensureInitialized","lambda$initialize$1","processingGroup",7,1
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$runOnPrepareCommitOrNow$0","lambda$registerHandlerInterceptor$2","dispatchInterceptors","lambda$registerDispatchInterceptor$1",4,1
"org.axonframework.eventhandling.MergedTrackingToken",17,"lambda$mergePosition$1","mergePosition","doAdvance","lambda$mergePosition$0",5,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"lambda$peekForMessages$2","skipMessagesWithPayloadTypeOf","lambda$doConsumeNext$1","peekForMessages","lambda$skipMessagesWithPayloadTypeOf$3","nextAvailable","messageSource","lambda$new$0","lambda$setOnAvailableCallback$4","doConsumeNext","lambda$setOnAvailableCallback$5",11,1
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken","getSegment",2,1
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1
"org.axonframework.config.Configuration",16,"eventBus","getComponent","commandBus","parameterResolverFactory","eventStore","repository","handlerDefinition","spanFactory",8,1
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll","deadlineNameMatch",2,1
"org.axonframework.eventhandling.AbstractEventProcessor",16,"getSpanName","processInUnitOfWork","lambda$registerHandlerInterceptor$0","lambda$processInUnitOfWork$3","getName","lambda$null$1","lambda$null$2",7,1
"org.axonframework.eventhandling.MergedTrackingToken",16,"upperSegmentToken","isMergeInProgress","lowerSegmentToken","position","mergePosition",5,1
"org.axonframework.eventhandling.ReplayToken",16,"position","lowerBound","getTokenAtReset","isReplay","createReplayToken",6,1
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$new$0","lambda$handle$3","lambda$new$1","lambda$canHandle$2",4,1
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"andMetaData","withMetaData","optionalExceptionResult","isExceptional",4,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"doApply","publish","publishOnEventBus",3,1
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asResponseMessage","asNullableResponseMessage",2,1
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType","getData",2,1
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"routingKey","commandName",2,1
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler","commandName",2,1
"org.axonframework.commandhandling.CommandResultMessage",15,"andMetaData","withMetaData",2,1
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"withMetaData","andMetaData",2,1
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$prepareReset$4","canHandle","lambda$canHandleType$3","lambda$handle$0","lambda$canHandleType$2","handle","prepareReset","lambda$canHandle$1",8,1
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"andMetaData","getSequenceNumber","getAggregateIdentifier","getType","withMetaData",5,1
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"andMetaData","trackingToken","withMetaData","withTrackingToken",4,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"skipMessagesWithPayloadTypeOf","peek","hasNextAvailable","access$300","close","setOnAvailableCallback",7,1
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getId","getSequenceIdentifier","getIndex",3,1
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getId","getIndex","getSequenceIdentifier",3,1
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"typeMatches","resolveParameterValues","parametersMatch","checkAndRethrowForExceptionOrError",4,1
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"handle","canHandle",2,1
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isParameterizedType","isArray","isGenericArrayType","isWildcardType","isAssignableFrom","isGenericAssignableFrom","isTypeVariable","isParameterizedTypeOfExpectedType","isWildcardTypeWithMatchingUpperBound",9,1
"org.axonframework.modelling.command.inspection.AggregateModel",15,"type","getVersion","declaredType",3,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"identifier","initialize","version","isDeleted",4,1
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"withMetaData","andMetaData",2,1
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"withMetaData","andMetaData",2,1
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData","withMetaData",2,1
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"andMetaData","withMetaData",2,1
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"newInstance","access$200","access$500","access$300","load","send","getAggregate",7,1
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createHandlerSpan$1","lambda$createDispatchSpan$2","lambda$createInternalSpan$3","lambda$createInternalSpan$4","lambda$createRootTrace$0","lambda$registerSpanAttributeProvider$5",6,1
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"dispatch","disconnect","localSegment","updateFilter","lambda$subscribe$0","intercept","lambda$registerDispatchInterceptor$1","shutdownDispatching",8,1
"org.axonframework.deadline.GenericDeadlineMessage",14,"withMetaData","asDeadlineMessage","lambda$asDeadlineMessage$0","lambda$asDeadlineMessage$1","andMetaData",5,1
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"flatten","lambda$canHandle$0","performReset","delegates","lambda$performReset$2","canHandle","lambda$canHandleType$1",7,1
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1
"org.axonframework.messaging.ResultMessage",14,"withMetaData","isExceptional","optionalExceptionResult","andMetaData","exceptionDetails",5,1
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$0","lambda$new$1",2,1
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1
"org.axonframework.modelling.command.inspection.AggregateModel",14,"types","type",2,1
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"addNamedQueriesTo","removeAssociationValue","serializedObjectType","getSagaTypeName","createSagaEntry","loadAssociationValues","sagaEntryEntityName","serializedSagaAsString","storeAssociationValue",9,1
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"serializedObjectType","sagaEntryEntityName","getSagaTypeName","loadAssociationValues","addNamedQueriesTo","createSagaEntry","removeAssociationValue","serializedSagaAsString","storeAssociationValue",9,1
"org.axonframework.queryhandling.GenericQueryMessage",14,"getQueryName","andMetaData","getResponseType","withMetaData",4,1
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData","withMetaData",2,1
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType","getQueryName",2,1
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getQueryName","getResultType",2,1
"org.axonframework.config.Configuration",13,"eventProcessingConfiguration","resourceInjector","parameterResolverFactory","handlerDefinition","spanFactory",5,1
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"withTrackingToken","trackingToken",2,1
"org.axonframework.eventhandling.MergedTrackingToken",13,"isUpperSegmentAdvanced","upperSegmentToken","isLowerSegmentAdvanced","lowerSegmentToken",4,1
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"lambda$canHandleType$1","sequencingPolicyMatchesSegment","invokeHandlers","hasHandler","lambda$new$0","performReset","sequenceIdentifier","detectList",8,1
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$1","lambda$readEvents$0",2,1
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"cause","message","enqueuedAt","diagnostics","lambda$new$0",5,1
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"removeAssociationValueFromCache","cacheKey","lambda$addCachedAssociations$3","lambda$updateSaga$4","addCachedAssociations","lambda$deleteSaga$1","lambda$removeAssociationValueFromCache$2","lambda$findSagas$0",8,1
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"withMetaData","andMetaData",2,1
"org.axonframework.queryhandling.StreamingQueryMessage",13,"withMetaData","andMetaData",2,1
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"andMetaData","withMetaData",2,1
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$getAggregate$4","lambda$load$2","validateIdentifier","lambda$loadOrCreate$0","lambda$newInstance$1","load","canResolve","lambda$load$3",8,1
"org.axonframework.test.saga.EventValidator",13,"unwrapEvent","handle","createEqualToMatchers","lambda$startRecording$0","assertPublishedEventsMatching",5,1
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1
"org.axonframework.commandhandling.GenericCommandMessage",12,"withMetaData","andMetaData","getCommandName",3,1
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"lambda$load$0","newInstance","load","removeFromCache","canResolve",5,1
"org.axonframework.eventhandling.GenericEventMessage",12,"andMetaData","getTimestamp","withMetaData",3,1
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"schedule","buildJobDetail","lambda$schedule$0","initialize","shutdown","buildTrigger","lambda$cancelSchedule$1",7,1
"org.axonframework.eventsourcing.eventstore.EventStore",12,"lambda$readEvents$0","readEvents",2,1
"org.axonframework.modelling.command.LockAwareAggregate",12,"version","getWrappedAggregate","isLockHeld",3,1
"org.axonframework.queryhandling.StreamingQueryMessage",12,"getResponseType",1,1
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1
"org.axonframework.commandhandling.SimpleCommandBus",11,"builder","dispatch","registerHandlerInterceptor","registerDispatchInterceptor","subscribe",5,1
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"asRuntime","lambda$send$0","send",3,1
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1
"org.axonframework.config.Configuration",11,"eventBus",1,1
"org.axonframework.deadline.DeadlineMessage",11,"withMetaData","andMetaData",2,1
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"newInstance","load","loadOrCreate",4,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"lambda$send$2","load","lambda$send$1","canResolve","send","lambda$send$0",6,1
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData","withMetaData",2,1
"org.axonframework.eventhandling.EventMessage",11,"andMetaData","getIdentifier",2,1
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1
"org.axonframework.messaging.ResultMessage",11,"isExceptional","exceptionResult",2,1
"org.axonframework.modelling.command.AbstractRepository",11,"newInstance","invalidMessageType","doCreateNew","managedAggregates","currentUnitOfWork",5,1
"org.axonframework.modelling.saga.Saga",11,"getSagaIdentifier","isActive","getAssociationValues",3,1
"org.axonframework.queryhandling.QueryGateway",11,"subscriptionQuery","query","scatterGather","streamingQuery",8,1
"org.axonframework.queryhandling.QueryMessage",11,"withMetaData","getQueryName","andMetaData",3,1
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1
"org.axonframework.serialization.AbstractXStreamSerializer",11,"doSerialize","classForType","registerConverters","typeIdentifierOf","doDeserialize","getConverter","revisionOf","typeForClass",8,1
"org.axonframework.serialization.json.JacksonSerializer",11,"classForType","registerConverters","getReader","typeForClass","getWriter","resolveClassName","builder",7,1
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"newInstance","load","lambda$newInstance$0","canResolve",5,1
"org.axonframework.test.saga.EventValidator",11,"assertPublishedEvents","assertPublishedEventsMatching","startRecording",3,1
"org.axonframework.commandhandling.CommandMessage",10,"andMetaData","withMetaData",2,1
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1
"org.axonframework.common.caching.AbstractCacheAdapter",10,"lambda$registerCacheEntryListener$0","createListenerAdapter","doRegisterListener",3,1
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1
"org.axonframework.config.AggregateConfiguration",10,"snapshotFilter","repository","aggregateType","aggregateFactory",4,1
"org.axonframework.config.Configuration",10,"eventProcessingConfiguration","findModules",2,1
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored","processInUnitOfWork","canHandle",3,1
"org.axonframework.eventhandling.EventMessage",10,"andMetaData","getIdentifier",2,1
"org.axonframework.eventhandling.EventMessage",10,"andMetaData","withMetaData",2,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf","nextAvailable",2,1
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"sequencingPolicyMatchesSegment","invokeHandlers","performReset","sequenceIdentifier","eventHandlers",5,1
"org.axonframework.eventhandling.StreamingEventProcessor",10,"resetTokens","lambda$isReplaying$0","processingStatus",3,1
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData","withMetaData",2,1
"org.axonframework.eventhandling.replay.ResetContext",10,"withMetaData","andMetaData",2,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2500","access$2600",2,1
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2800","access$2700",2,1
"org.axonframework.messaging.AbstractMessage",10,"andMetaData","withMetaData",2,1
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1
"org.axonframework.messaging.MessageDecorator",10,"describeType","getIdentifier","getPayload","getMetaData","describeTo",5,1
"org.axonframework.messaging.MessageDecorator",10,"getPayload","serializePayload",2,1
"org.axonframework.messaging.ResultMessage",10,"isExceptional","exceptionResult",2,1
"org.axonframework.messaging.SimpleHandlerAttributes",10,"isEmpty","get","getAll","mergedWith","contains",5,1
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1
"org.axonframework.serialization.JavaSerializer",10,"revisionOf","classForType","getSerializedType",3,1
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1
"org.axonframework.config.Configuration",9,"start",1,1
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore","registerComponent",2,1
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"lambda$upperBound$1","offsetBy","lambda$lowerBound$0","lambda$covers$2","compareTo",5,1
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"getGlobalIndex","offsetBy","next",3,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTailToken","createTokenSince","sourceId","createTokenAt","createHeadToken",5,1
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"alterToken","nextAvailable",2,1
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$400","access$300","access$500","access$600",4,1
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"schedule","shutdown",2,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"constructHandlerAttributesFor","prefixedKey","lambda$constructHandlerAttributesFor$1","lambda$null$0",4,1
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName","loadAssociations",2,1
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType","getQueryName",2,1
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,1
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"toString","equals","hashes","access$100",4,1
"org.axonframework.config.AggregateConfiguration",8,"aggregateType","aggregateFactory",2,1
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1
"org.axonframework.deadline.DeadlineManager",8,"cancelAllWithinScope","schedule",5,1
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2400","access$2200","access$2100","access$2300","access$1900",5,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100","access$1900",2,1
"org.axonframework.eventhandling.WrappedToken",8,"unwrap","upperBound","lowerBound","advancedTo",4,1
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"size","findSagas",2,1
"org.axonframework.serialization.ChainingConverter",8,"canConvert","registerConverter",2,1
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo","advanceToNextTrigger",2,1
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"lambda$and$97c94f44$1","matches",2,1
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1
"org.axonframework.eventhandling.DomainEventData",7,"getType","getAggregateIdentifier","getSequenceNumber",3,1
"org.axonframework.eventhandling.EventMessageHandler",7,"prepareReset","handle","supportsReset",3,1
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"getTokenForStream","advancedTo",2,1
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder","subscribe",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"lambda$handle$0","canHandle","handle",3,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"lambda$handle$0","canHandle","handle",3,1
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"lambda$new$0","getIdentifier",2,1
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"createProperty","getProperty","lambda$getProperty$0","getHandlerName",4,1
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1","lambda$subscribe$0",2,1
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0","name",2,1
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"queuedThreads","lock","isHeldBy",3,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1
"org.axonframework.eventhandling.EventMessageHandler",6,"prepareReset","handle",2,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"sourceId","openStream",2,1
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1","lambda$convert$0",2,1
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1","lambda$convert$0",2,1
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"unexpectedEvents","lambda$unexpectedEvents$0",2,1
"org.axonframework.messaging.SimpleHandlerAttributes",6,"isEmpty","getAll",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$600","access$400","access$500",3,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$600","access$500",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"resolveReturnValue","access$400",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$700","access$400",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder","subscribe",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle","handle",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"canHandle","handle",2,1
"org.axonframework.modelling.command.Repository",6,"load","loadOrCreate","newInstance",3,1
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$resolveAssociation$0","lambda$findHandlerMethods$1",2,1
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$0","lambda$findSagas$1",2,1
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1
"org.axonframework.serialization.SimpleSerializedObject",6,"getType","getContentType","getData",3,1
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"disposeIfUnused","checkForDeadlock",2,1
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getIndex","getGaps",2,1
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$handle$0","lambda$process$1",2,1
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"validateMessage","lambda$handle$0",2,1
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"lambda$handle$0","validateMessage",2,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0","lambda$onMessageIngested$1",2,1
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"bytesFrom","convert",2,1
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1

"Source Cypher Query:","Candidates_for_Interface_Segregation.cypher"
