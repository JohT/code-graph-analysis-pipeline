"dependentTypeFullQualifiedName","declaredMethods","calledMethodNames","calledMethods","callerTypes"
"org.axonframework.commandhandling.CommandMessage",19,"getCommandName",1,20
"org.axonframework.eventhandling.TrackedEventMessage",16,"trackingToken",1,14
"org.axonframework.eventhandling.DomainEventMessage",21,"getSequenceNumber",1,11
"org.axonframework.eventhandling.EventMessage",19,"getIdentifier",1,9
"org.axonframework.commandhandling.GenericCommandResultMessage",38,"asCommandResultMessage",1,8
"org.axonframework.eventhandling.DomainEventMessage",21,"getSequenceNumber","getType","getAggregateIdentifier",3,8
"org.axonframework.eventhandling.EventMessage",19,"getTimestamp","getIdentifier",2,8
"org.axonframework.eventhandling.GenericEventMessage",29,"asEventMessage",1,7
"org.axonframework.messaging.ResultMessage",21,"exceptionResult","isExceptional",2,7
"org.axonframework.deadline.DeadlineMessage",23,"getDeadlineName",1,6
"org.axonframework.eventhandling.EventBus",4,"publish",1,6
"org.axonframework.eventhandling.DomainEventMessage",21,"getSequenceNumber","getAggregateIdentifier",2,5
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",15,"inspectAggregate",1,5
"org.axonframework.commandhandling.GenericCommandResultMessage",38,"asCommandResultMessage",2,4
"org.axonframework.deadline.GenericDeadlineMessage",36,"asDeadlineMessage",1,4
"org.axonframework.eventhandling.DomainEventMessage",21,"getAggregateIdentifier",1,4
"org.axonframework.serialization.SimpleSerializedType",13,"emptyType",1,4
"org.axonframework.common.transaction.NoTransactionManager",10,"instance",1,4
"org.axonframework.eventhandling.ReplayToken",42,"isReplay",1,3
"org.axonframework.eventhandling.GapAwareTrackingToken",27,"getGaps","withGapsTruncatedAt","newInstance","advanceTo","getIndex",5,3
"org.axonframework.commandhandling.GenericCommandMessage",25,"asCommandMessage",1,3
"org.axonframework.modelling.command.inspection.AggregateModel",23,"type",1,3
"org.axonframework.eventhandling.DomainEventMessage",21,"getType",1,3
"org.axonframework.common.lock.PessimisticLockFactory",20,"usingDefaults",1,3
"org.axonframework.eventhandling.EventMessage",19,"getTimestamp",1,3
"org.axonframework.messaging.MessageDecorator",19,"describeTo",1,3
"org.axonframework.commandhandling.CommandMessageHandlingMember",16,"commandName","isFactoryHandler",2,3
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",15,"inspectAggregate",2,3
"org.axonframework.eventhandling.tokenstore.ConfigToken",13,"get",1,3
"org.axonframework.modelling.command.AggregateScopeDescriptor",11,"getIdentifier","getType",2,3
"org.axonframework.modelling.command.AnnotationCommandTargetResolver",10,"builder",1,3
"org.axonframework.messaging.annotation.MultiHandlerEnhancerDefinition",8,"ordered",1,3
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3
"org.axonframework.test.matchers.AllFieldsFilter",5,"instance",1,3
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",67,"initialize","initSequence","getAggregateRoot",4,2
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",58,"builder",1,2
"org.axonframework.config.Configuration",57,"getComponent",1,2
"org.axonframework.eventhandling.ReplayToken",42,"createReplayToken",1,2
"org.axonframework.messaging.GenericResultMessage",40,"asResultMessage",1,2
"org.axonframework.eventhandling.GenericEventMessage",29,"describeTo",1,2
"org.axonframework.tracing.LoggingSpanFactory",29,"access$100",1,2
"org.axonframework.commandhandling.SimpleCommandBus",27,"builder",1,2
"org.axonframework.queryhandling.SubscriptionQueryMessage",25,"getUpdateResponseType",1,2
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",24,"handle",1,2
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",19,"builder",1,2
"org.axonframework.eventhandling.EventMessage",19,"andMetaData","getIdentifier",2,2
"org.axonframework.eventhandling.EventMessage",19,"andMetaData",1,2
"org.axonframework.eventhandling.TrackedEventMessage",16,"trackingToken","withTrackingToken",2,2
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",16,"currentInterceptorChain",1,2
"org.axonframework.queryhandling.QueryMessage",15,"getResponseType","getQueryName",2,2
"org.axonframework.serialization.ChainingConverter",13,"registerConverter",1,2
"org.axonframework.serialization.SimpleSerializedObject",13,"getType",1,2
"org.axonframework.eventhandling.DomainEventData",11,"getAggregateIdentifier","getSequenceNumber","getType",3,2
"org.axonframework.modelling.command.AggregateScopeDescriptor",11,"getIdentifier",1,2
"org.axonframework.eventhandling.PropagatingErrorHandler",10,"instance",1,2
"org.axonframework.messaging.annotation.MultiParameterResolverFactory",8,"ordered",1,2
"org.axonframework.modelling.command.Repository",7,"newInstance",1,2
"org.axonframework.commandhandling.CommandBus",5,"subscribe",1,2
"org.axonframework.commandhandling.LoggingDuplicateCommandHandlerResolver",5,"instance",1,2
"org.axonframework.queryhandling.LoggingQueryInvocationErrorHandler",4,"builder",1,2
"org.axonframework.config.EventProcessingModule",238,"deadLetterPolicy","lambda$registerTrackingEventProcessorConfiguration$64","registerTrackingEventProcessorConfiguration","lambda$registerRollbackConfiguration$61","lambda$pooledStreamingEventProcessor$68","lambda$pooledStreamingEventProcessor$69","lambda$registerDeadLetterPolicy$67","trackingEventProcessorConfig","trackingEventProcessor","lambda$static$0","lambda$null$35","lambda$null$40","lambda$registerSequencingPolicy$60","lambda$null$33","lambda$registerTransactionManager$62","lambda$registerHandlerInterceptor$59","lambda$null$36","defaultExecutor","annotatedProcessingGroupOfType","lambda$null$42","pooledStreamingEventProcessor","subscribingEventProcessor","lambda$null$18","lambda$registerDeadLetterQueue$66","lambda$null$19","lambda$null$26","lambda$registerPooledStreamingEventProcessor$65","lambda$registerTrackingEventProcessorConfiguration$63","lambda$annotatedProcessingGroupOfType$70","lambda$null$11","lambda$null$32","lambda$null$31","lambda$null$41","lambda$registerTokenStore$53","lambda$new$16","errorHandler","lambda$registerSagaManagers$43","registerEventHandlerInvokers","lambda$new$10","lambda$registerTrackingEventProcessor$52","lambda$deadLetteringInvoker$39","lambda$registerEventHandler$49","lambda$registerSubscribingEventProcessor$57","selectProcessingGroupByType","lambda$new$7","lambda$eventProcessors$47","defaultEventProcessor","lambda$selectProcessingGroupByType$29","lambda$new$17","deadLetteringInvoker","eventProcessors","lambda$usingSubscribingEventProcessors$54","retrieveHandlerDefinition","registerTrackingEventProcessor","noSagaProcessorCustomization","lambda$new$22","sequencingPolicy","buildEventProcessor","validateConfigInitialization","lambda$usingPooledStreamingEventProcessors$56","messageMonitor","lambda$new$8","lambda$usingTrackingEventProcessors$55","registerSagaManagers","lambda$new$15","simpleInvoker","lambda$new$13","lambda$registerEventHandlerInvokers$34","lambda$new$5","lambda$new$23","tokenStore","lambda$buildEventProcessor$44","lambda$new$9","lambda$deadLetteringInvoker$38","lambda$new$20","lambda$sagaConfigurations$48","initializeProcessors","lambda$buildEventProcessor$46","lambda$new$14","transactionManager","lambda$selectProcessingGroupByType$28","listenerInvocationErrorHandler","lambda$new$6","rollbackConfiguration","processorNameForProcessingGroup","registerEventProcessor","lambda$new$24","lambda$new$12","lambda$new$21","lambda$registerEventHandlerInvokers$30","packageOfObject","lambda$registerTrackingEventProcessor$51","lambda$buildEventProcessor$45","lambda$initializeProcessors$27","lambda$registerListenerInvocationErrorHandler$50","lambda$new$25","lambda$registerErrorHandler$58","lambda$registerEventHandlerInvokers$37","lambda$new$1","lambda$new$4","lambda$new$2","deadLetterQueue","lambda$new$3",103,1
"org.axonframework.config.DefaultConfigurer",175,"defaultEventBus","verifyIdentifierFactory","lambda$null$46","lambda$registerMessageHandler$39","lambda$configureEmbeddedEventStore$42","invokeInitHandlers","invokeLifecycleHandlers","lambda$prepareModules$45","lambda$invokeInitHandlers$48","lambda$onStart$53","lambda$registerHandlerDefinition$44","lambda$registerMessageHandler$41","lambda$registerMessageHandler$40","lambda$null$43","lambda$null$17","lambda$invokeStartHandlers$49","lambda$onShutdown$54","lambda$prepareMessageHandlerRegistrars$47","prepareModules","lambda$null$25","prepareMessageHandlerRegistrars","lambda$null$31","lambda$invokeShutdownHandlers$50","lambda$null$36","lambda$invokeLifecycleHandlers$51","lambda$registerMessageHandler$38","lambda$null$12","lambda$invokeLifecycleHandlers$52","lambda$null$32","lambda$static$0","lambda$null$35","lambda$jpaConfiguration$9","defaultQueryBus","defaultCommandBus","lambda$new$1","lambda$defaultSnapshotter$26","invokeShutdownHandlers","lambda$eventProcessing$28","lambda$defaultSerializer$24","lambda$jpaConfiguration$6","lambda$defaultResourceInjector$19","lambda$registerQueryHandler$37","defaultSnapshotter","defaultSerializer","defaultResourceInjector","registerComponent","defaultEventGateway","lambda$jpaConfiguration$7","lambda$jpaConfiguration$5","lambda$defaultDeadlineManager$21","lambda$eventProcessing$27","defaultCommandGateway","lambda$defaultQueryBus$13","defaultDeadlineManager","lambda$registerCommandHandler$30","defaultComponent","registerQueryHandler","defaultHandlerDefinition","lambda$jpaConfiguration$8","registerCommandHandler","lambda$registerQueryHandler$34","lambda$defaultCommandGateway$10","lambda$defaultQueryUpdateEmitter$14","lambda$new$2","lambda$defaultCommandBus$18","defaultQueryUpdateEmitter","lambda$new$3","lambda$defaultHandlerDefinition$16","defaultSpanFactory","jpaConfiguration","lambda$defaultEventBus$22","defaultUpcasterChain","lambda$configureMessageMonitor$29","lambda$defaultQueryGateway$11","eventProcessing","defaultParameterResolverFactory","lambda$defaultParameterResolverFactory$15","lambda$defaultConfiguration$4","defaultScopeAwareProvider","registerModule","defaultConfiguration","retrieveHandlerDefinition","lambda$defaultEventGateway$23","defaultQueryGateway","lambda$registerCommandHandler$33","lambda$defaultScopeAwareProvider$20",86,1
"org.axonframework.config.DefaultConfigurer",175,"invokeShutdownHandlers","access$1000","access$1200","access$800","access$1100","access$300","access$900","invokeStartHandlers","access$400","defaultComponent","access$200","access$1400","access$500","access$1500","access$700","access$1300","access$600",17,1
"org.axonframework.eventhandling.TrackingEventProcessor",123,"startSegmentWorkers","shutDown","lambda$null$0","lambda$calculateIdentifier$6","lambda$null$2","releaseSegment","lambda$processingLoop$9","lambda$awaitTermination$26","doOpenStream","isRunning","isRegularProcessing","now","doSleepFor","processingSegments","lambda$processBatch$11","supportsReset","lambda$resetTokens$21","lambda$processBatch$12","canHandle","start","ensureEventStreamOpened","lambda$checkSegmentCaughtUp$17","lambda$ensureEventStreamOpened$18","lambda$awaitTermination$23","lambda$new$3","processBatch","spawnWorkerThread","lambda$resetTokens$22","resetTokens","processInstructions","lambda$splitSegment$4","lambda$awaitTermination$25","awaitTermination","removeThread","activeProcessorThreads","lambda$releaseToken$10","lambda$null$24","lambda$processBatch$15","lambda$processBatch$16","setShutdownState","lambda$processingLoop$8","lambda$ensureEventStreamOpened$19","lambda$processBatch$14","calculateIdentifier","checkSegmentCaughtUp","lambda$mergeSegment$7","lambda$new$1","shutdownAsync","ignoreEvent","canClaimSegment","lambda$processBatch$13","releaseToken","lambda$resetTokens$20","getState","lambda$getTokenStoreIdentifier$5",60,1
"org.axonframework.eventhandling.TrackingEventProcessor",123,"builder",1,1
"org.axonframework.test.saga.FixtureExecutionResultImpl",111,"expectScheduledDeadlineMatching","lambda$expectNoScheduledDeadlineWithName$5","expectNoScheduledDeadlineMatching","lambda$expectNoScheduledDeadlineWithName$3","expectNoScheduledEventMatching","lambda$expectNoScheduledDeadlineWithName$7","expectScheduledEventMatching","expectTriggeredDeadlinesMatching","lambda$expectNoScheduledDeadlineMatching$4","expectTriggeredDeadlines","lambda$expectScheduledDeadlineWithName$1","lambda$expectNoScheduledDeadlineMatching$6","lambda$expectScheduledDeadlineWithName$2","lambda$registerStartRecordingCallback$0",20,1
"org.axonframework.test.saga.FixtureExecutionResultImpl",111,"registerStartRecordingCallback","startRecording",2,1
"org.axonframework.test.aggregate.ResultValidatorImpl",108,"expectScheduledDeadlineMatching","lambda$expectNoScheduledDeadlineWithName$2","expectTriggeredDeadlines","expectException","expectNoScheduledDeadlineMatching","expectExceptionDetails","expectResultMessagePayload","expectExceptionMessage","lambda$expectNoScheduledDeadlineMatching$5","expectResultMessagePayloadMatching","lambda$expectNoScheduledDeadlineWithName$4","recordException","lambda$expectNoScheduledDeadlineMatching$3","verifyPayloadEquality","verifyMetaDataEquality","expectResultMessageMatching","lambda$expectScheduledDeadlineWithName$1","expectTriggeredDeadlinesMatching","lambda$expectScheduledDeadlineWithName$0","expectEvents","lambda$expectNoScheduledDeadlineWithName$6",25,1
"org.axonframework.eventhandling.tokenstore.jdbc.JdbcTokenStore",88,"lambda$fetchSegments$28","readTokenEntry","lambda$fetchSegments$27","readSerializedData","lambda$fetchToken$18","lambda$initializeSegment$6","lambda$fetchSegments$30","selectTokenEntries","releaseClaim","loadToken","lambda$retrieveStorageIdentifier$8","validateSegment","lambda$loadConfigurationToken$10","lambda$fetchAvailableSegments$31","lambda$loadConfigurationToken$11","lambda$deleteToken$25","lambda$fetchAvailableSegments$33","lambda$releaseClaim$24","lambda$storeToken$16","initializeTokenSegments","lambda$fetchToken$20","lambda$createSchema$0","lambda$initializeSegment$5","lambda$initializeTokenSegments$3","select","lambda$loadConfigurationToken$9","lambda$initializeSegment$7","lambda$fetchAvailableSegments$34","lambda$storeToken$15","lambda$fetchAvailableSegments$32","lambda$fetchToken$19","loadConfigurationToken","lambda$initializeTokenSegments$4","lambda$storeToken$13","lambda$initializeTokenSegments$2","lambda$fetchSegments$29","getConnection","lambda$fetchToken$21","lambda$storeToken$12","lambda$fetchToken$17","selectForSegments","deleteToken","lambda$validateSegment$36","lambda$releaseClaim$23","updateToken","lambda$createSchema$1","containsOneElement","selectForUpdate","lambda$validateSegment$37","selectSegments","lambda$storeToken$14","insertTokenEntry","claimToken","lambda$fetchToken$22","storeUpdate","lambda$validateSegment$35","lambda$deleteToken$26",58,1
"org.axonframework.test.saga.SagaTestFixture",81,"getCommandBus","getPublisherFor","registerCommandGateway","currentTime","givenAggregate","registerFieldFilter","getHandlerDefinition","timeCorrectedEventMessage","handleDeadline","getParameterResolverFactory","lambda$handleInSaga$1","lambda$null$0","registerResource","handleInSaga","getResourceInjector","ensureSagaResourcesInitialized",16,1
"org.axonframework.queryhandling.SimpleQueryBus",74,"lambda$getHandlersForMessage$35","lambda$null$10","lambda$getHandlersForMessage$34","lambda$null$17","lambda$null$27","lambda$getHandlersForMessage$36","lambda$getHandlersForMessage$32","lambda$getHandlersForMessage$33","getStreamingHandlersForMessage","lambda$null$14","lambda$null$26","lambda$null$16","lambda$null$6","lambda$null$15","lambda$assertSubQueryResponseTypes$24","noSuitableHandlerException","unsubscribe","assertSubQueryResponseTypes","noHandlerException","lambda$doQuery$8","interceptAndInvokeStreaming","buildCompletableFuture","lambda$interceptAndInvokeStreaming$29","lambda$subscribe$0","lambda$interceptAndInvoke$28","lambda$subscribe$2","intercept","doQuery","lambda$registerDispatchInterceptor$31","lambda$query$7","lambda$scatterGather$13","lambda$subscriptionQuery$22","lambda$unsubscribe$4","lambda$subscriptionQuery$19","getHandlersForMessage","lambda$subscriptionQuery$21","lambda$scatterGather$12","lambda$streamingQuery$9","lambda$streamingQuery$11","lambda$subscriptionQuery$20","scatterGatherHandler","lambda$assertSubQueryResponseTypes$23","lambda$registerHandlerInterceptor$30","registerHandlerInterceptor","lambda$query$5","getSubscriptionQueryResult","lambda$subscribe$1","interceptAndInvoke","lambda$subscribe$3","lambda$scatterGather$18","query","lambda$getSubscriptionQueryResult$25",52,1
"org.axonframework.queryhandling.SimpleQueryBus",74,"access$700",1,1
"org.axonframework.queryhandling.SimpleQueryBus",74,"builder",1,1
"org.axonframework.config.AggregateConfigurer",73,"lambda$new$5","lambda$new$25","lambda$null$27","lambda$new$22","lambda$new$15","lambda$jpaMappedConfiguration$0","lambda$new$11","lambda$new$30","lambda$null$1","lambda$jpaMappedConfiguration$3","withSubtypes","lambda$new$29","lambda$null$16","lambda$null$9","lambda$new$32","lambda$new$23","lambda$new$26","configureCache","lambda$new$7","commandBusHasDisruptorLocalSegment","aggregateType","lambda$new$10","lambda$null$6","lambda$new$13","lambda$new$17","name","lambda$new$28","lambda$new$24","lambda$new$18","configureLockFactory","lambda$jpaMappedConfiguration$4","buildDisruptorRepository","lambda$new$8","lambda$configureWeakReferenceCache$33","lambda$new$19","lambda$initialize$34","lambda$initialize$35","configureRepository","lambda$new$12","lambda$new$31","lambda$new$20","lambda$new$14","lambda$jpaMappedConfiguration$2","lambda$new$21",44,1
"org.axonframework.config.AggregateConfigurer",73,"defaultConfiguration",1,1
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",73,"setPhase","lambda$null$2","phase","onRollback","commitAsNested","lambda$start$0","changePhase","lambda$start$1","lambda$commitAsNested$6","lambda$commit$4","lambda$rollback$7","lambda$commit$5","setRollbackCause","lambda$start$3","delegateAfterCommitToParent","commitAsRoot","lambda$rollback$8","notifyHandlers","addHandler",19,1
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",73,"rollback",1,1
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",72,"isEarlierPhaseDuringShutdown","registerLifecycleHandler","isEarlierPhaseDuringStartUp","lambda$registerLifecycleHandler$2","lambda$null$0","lambda$getComponent$1",6,1
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",70,"resetTokens","lambda$new$2","lambda$new$0","lambda$statusUpdater$13","statusUpdater","lambda$null$8","singleStatusUpdater","lambda$null$1","calculateIdentifier","shutdownAsync","lambda$calculateIdentifier$4","lambda$resetTokens$5","lambda$null$9","lambda$null$7","lambda$resetTokens$10","lambda$singleStatusUpdater$12","supportsReset","spawnWorker","lambda$resetTokens$6","releaseSegment","lambda$getTokenStoreIdentifier$3","lambda$null$11","isRunning","start",27,1
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",70,"builder",1,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",67,"doApply","publishOnEventBus","publish",3,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",67,"doApply","initSequence","lambda$invoke$1","rootType","lambda$andThenApply$13","lambda$handle$5","lambda$doApply$11","lambda$handle$6","lambda$null$8","publishOnEventBus","lambda$handle$7","registerRoot","publish","andThen","createMessage","lambda$execute$2","applyMessageOrPayload","findHandlerAndHandleCommand","lambda$findHandlerAndHandleCommand$9","lambda$handle$4","lambda$registerRoot$0","lambda$createMessage$12","initialize","handle","lambda$handle$3","lambda$findHandlerAndHandleCommand$10",30,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",67,"isDeleted","identifier","initialize","version",4,1
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",59,"toStringSequenceIdentifier","lambda$size$15","lambda$claimDeadLetter$12","lambda$toLetter$8","lambda$findNextDeadLetter$11","lambda$deadLetterSequence$5","lambda$enqueue$1","lambda$amountOfSequences$16","getProcessingStartedLimit","lambda$clear$13","lambda$enqueue$0","requeue","lambda$toLetter$7","getMaxIndexForSequence","lambda$processLetterAndFollowing$9","lambda$sequenceSize$14","lambda$enqueue$3","lambda$getMaxIndexForSequence$17","lambda$deadLetters$6","entityManager","lambda$evict$4","evict","lambda$findFirstLetterOfEachAvailableSequence$10","amountOfSequences","sequenceSize","processLetterAndFollowing","toLetter","isFull","claimDeadLetter","findNextDeadLetter","getNextIndexForSequence","findFirstLetterOfEachAvailableSequence","lambda$enqueue$2",33,1
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",59,"deadLetterSequence",1,1
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",59,"lambda$deadLetters$6","getNextIndexForSequence","lambda$size$15","amountOfSequences","getProcessingStartedLimit","lambda$sequenceSize$14","evict","getMaxIndexForSequence","findFirstLetterOfEachAvailableSequence","toStringSequenceIdentifier","lambda$clear$13","lambda$deadLetterSequence$5","processLetterAndFollowing","lambda$findFirstLetterOfEachAvailableSequence$10","lambda$getMaxIndexForSequence$17","lambda$evict$4","lambda$enqueue$2","sequenceSize","lambda$toLetter$8","lambda$toLetter$7","lambda$enqueue$0","lambda$claimDeadLetter$12","requeue","isFull","lambda$enqueue$1","lambda$findNextDeadLetter$11","entityManager","lambda$amountOfSequences$16","lambda$enqueue$3","claimDeadLetter","findNextDeadLetter","lambda$processLetterAndFollowing$9","toLetter",33,1
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",59,"deadLetterSequence",1,1
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",58,"lambda$registerUpdateHandler$3","lambda$null$16","lambda$registerDispatchInterceptor$11","emitError","intercept","lambda$doCompleteExceptionally$19","lambda$null$13","lambda$runOnAfterCommitOrNow$21","lambda$complete$9","runOnAfterCommitOrNow","lambda$registerUpdateHandler$2","lambda$null$7","doEmit","lambda$emit$5","lambda$completeExceptionally$10","lambda$null$20","lambda$doEmit$12","lambda$registerUpdateHandler$4","lambda$doEmit$14","inStartedPhaseOfUnitOfWork","lambda$payloadMatchesQueryResponseType$15","lambda$queryUpdateHandlerRegistered$0","lambda$emit$8","payloadMatchesQueryResponseType","lambda$null$6","lambda$null$18","lambda$registerUpdateHandler$1","lambda$doComplete$17","doComplete","doCompleteExceptionally",31,1
"org.axonframework.config.Configuration",57,"aggregateConfiguration","lambda$getComponent$8","lambda$aggregateConfiguration$7","lambda$findModules$1","lambda$aggregateConfiguration$6","lambda$eventProcessingConfiguration$3","lambda$aggregateConfiguration$5","eventBus","getComponent","findModules","lambda$eventProcessingConfiguration$4","getModules","lambda$resourceInjector$2","lambda$findModules$0",15,1
"org.axonframework.config.Configuration",57,"handlerDefinition","parameterResolverFactory","spanFactory","resourceInjector","eventProcessingConfiguration",5,1
"org.axonframework.config.Configuration",57,"handlerDefinition","parameterResolverFactory","eventBus","spanFactory","correlationDataProviders","getComponent","messageMonitor",7,1
"org.axonframework.config.Configuration",57,"handlerDefinition","eventStore","queryBus","upcasterChain","parameterResolverFactory","snapshotFilter","eventBus","eventSerializer","getComponent","spanFactory","findModules","scopeAwareProvider","correlationDataProviders","serializer","commandBus","messageSerializer","messageMonitor","repository",19,1
"org.axonframework.config.Configuration",57,"handlerDefinition","eventStore","parameterResolverFactory","eventBus","spanFactory","commandBus","getComponent","repository",8,1
"org.axonframework.config.Configuration",57,"start",1,1
"org.axonframework.config.Configuration",57,"eventBus",1,1
"org.axonframework.config.Configuration",57,"findModules","eventProcessingConfiguration",2,1
"org.axonframework.config.Configuration",57,"eventProcessingConfiguration",1,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",57,"stripGetterConvention","createChildDefinitions","findIdentifierMember","assertIdentifierValidity","findRoutingKey","prepareChildEntityCommandHandlers","prepareHandlers","inspectFieldsAndMethods","factoryCommands","findDeclaredType","inspectAggregateTypes","validateCommandHandlers","addHandler","setVersionMember","setIdentifierAndRoutingKey","isGetterByConvention",16,1
"org.axonframework.config.Configurer",50,"lambda$configureMessageMonitor$0","registerQueryHandler","buildConfiguration","registerModule","eventProcessing","configureMessageMonitor","registerComponent","configureAggregate","lambda$configureMessageMonitor$1","registerCommandHandler",11,1
"org.axonframework.config.Configurer",50,"configureEmbeddedEventStore","registerComponent",2,1
"org.axonframework.modelling.command.AbstractRepository",49,"doDelete","lambda$prepareForCommit$12","doCommit","matchesSimpleType","lambda$newInstance$3","lambda$newInstance$0","lambda$newInstance$4","lambda$null$6","doLoadOrCreate","newInstance","lambda$newInstance$2","doSave","lambda$load$5","lambda$null$7","load","managedAggregates","reportIllegalState","postDelete","matchesDeclaredType","validateOnLoad","postSave","doCreateNew","invalidMessageType","lambda$load$8","lambda$matchesSimpleType$13","lambda$newInstance$1","lambda$matchesDeclaredType$14","currentUnitOfWork","canResolve","lambda$loadOrCreate$10","lambda$managedAggregates$11","doLoad","prepareForCommit","lambda$loadOrCreate$9",35,1
"org.axonframework.modelling.command.AbstractRepository",49,"prepareForCommit",1,1
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",44,"isFull","evict","maximumSequenceSizeReached","lambda$enqueue$0","lambda$requeue$2","toIdentifier","contains","maximumNumberOfSequencesReached","builder","getLastTouchedSequence","lambda$process$5","lambda$process$4","lambda$process$3","lambda$evict$1","lambda$clear$7","lambda$process$6","requeue",17,1
"org.axonframework.eventhandling.ReplayToken",42,"createReplayToken","position","getTokenAtReset","isReplay","lowerBound",6,1
"org.axonframework.eventhandling.ReplayToken",42,"createReplayToken","lambda$replayContext$1","context","lambda$isReplay$0","isReplay","replayContext","getTokenAtReset","advancedTo","lambda$getTokenAtReset$2",11,1
"org.axonframework.eventhandling.ReplayToken",42,"replayContext",1,1
"org.axonframework.eventhandling.AbstractEventBus",40,"lambda$null$14","commit","lambda$null$13","addStagedMessages","eventsQueue","lambda$addStagedMessages$21","lambda$eventsQueue$20","lambda$null$11","lambda$subscribe$0","lambda$registerDispatchInterceptor$1","lambda$prepareCommit$22","lambda$null$2","lambda$null$8","intercept","lambda$null$3","lambda$publish$4","lambda$null$15","lambda$publish$10","lambda$null$17","lambda$null$12","prepareCommit","lambda$null$19","lambda$publish$9","doWithEvents","lambda$null$16","lambda$publish$6","afterCommit","lambda$null$18","lambda$publish$7","lambda$publish$5",30,1
"org.axonframework.eventhandling.AbstractEventBus",40,"prepareCommit",1,1
"org.axonframework.messaging.GenericResultMessage",40,"getPayload","findExceptionResult","isExceptional","andMetaData","withMetaData",5,1
"org.axonframework.messaging.GenericResultMessage",40,"asResultMessage",2,1
"org.axonframework.eventhandling.GenericDomainEventMessage",39,"describeTo",1,1
"org.axonframework.eventhandling.GenericDomainEventMessage",39,"getType","getAggregateIdentifier","withMetaData","getSequenceNumber","andMetaData",5,1
"org.axonframework.eventhandling.GenericDomainEventMessage",39,"andMetaData",1,1
"org.axonframework.eventhandling.TrackerStatus",39,"getSegment","getTrackingToken","split",3,1
"org.axonframework.eventhandling.TrackerStatus",39,"getSegment","markError","isErrorState","advancedTo","caughtUp","unmarkError","isCaughtUp",7,1
"org.axonframework.eventhandling.TrackerStatus",39,"getSegment","getError","mergeCompletedPosition","isErrorState","getCurrentPosition","isReplaying","getResetPosition","isCaughtUp","isMerging","getTrackingToken","split",11,1
"org.axonframework.eventhandling.TrackerStatus",39,"getSegment","getInternalTrackingToken",2,1
"org.axonframework.eventhandling.TrackerStatus",39,"getSegment","split","getTrackingToken",3,1
"org.axonframework.eventhandling.TrackerStatus",39,"getSegment",1,1
"org.axonframework.eventhandling.TrackerStatus",39,"markError","isErrorState","advancedTo",3,1
"org.axonframework.eventhandling.TrackerStatus",39,"caughtUp",1,1
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",39,"initializeTokenSegments","getConfig","fetchSegments","lambda$fetchSegments$0","lambda$fetchAvailableSegments$2","loadToken","lambda$fetchAvailableSegments$1","validateSegment","lambda$retrieveStorageIdentifier$3",10,1
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",39,"builder",1,1
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",39,"lambda$fetchSegments$0","loadToken","lambda$fetchAvailableSegments$2","lambda$retrieveStorageIdentifier$3","lambda$fetchAvailableSegments$1","getConfig","validateSegment","fetchSegments","initializeTokenSegments",10,1
"org.axonframework.modelling.saga.AnnotatedSaga",39,"handle","lambda$new$0","lambda$invoke$1","lambda$handle$6","lambda$execute$2","getAssociationValues","lambda$handle$7","canHandle","lambda$handle$8","lambda$null$5","lambda$canHandle$4","lambda$null$3",13,1
"org.axonframework.modelling.saga.AnnotatedSaga",39,"isActive","getAssociationValues","root","getSagaIdentifier",4,1
"org.axonframework.queryhandling.GenericQueryResponseMessage",39,"asNullableResponseMessage","asResponseMessage",2,1
"org.axonframework.queryhandling.GenericQueryResponseMessage",39,"andMetaData","withMetaData",2,1
"org.axonframework.queryhandling.GenericQueryResponseMessage",39,"asResponseMessage",1,1
"org.axonframework.commandhandling.GenericCommandResultMessage",38,"withMetaData","andMetaData",2,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",38,"lambda$initializePublisherThreads$0","doDispatch","dispatch","createRepository","lambda$registerDispatchInterceptor$6","lambda$subscribe$5","lambda$subscribe$4","lambda$registerHandlerInterceptor$7","lambda$doDispatch$3","lambda$initializeInvokerThreads$1","lambda$dispatch$2","initializePublisherThreads","initializeInvokerThreads",16,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",38,"createRepository",1,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",38,"access$2300","access$2100","access$2400","access$2200","access$1900",5,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",38,"access$2100","access$1900",2,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",38,"access$1900",1,1
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",38,"andMetaData","withTrackingToken","withMetaData","trackingToken",4,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",38,"lambda$null$5","lambda$subscribe$1","handlerHasVoidReturnType","initializeHandler","lambda$handle$8","lambda$handle$9","lambda$null$6","lambda$getHandlerSignature$4","initializeHandlers","canHandle","initializeAggregateFactory","lambda$subscribe$2","getHandlerSignature","lambda$handleNewInstanceCreation$12","lambda$handleNewInstanceCreation$11","resolveNullableAggregateId","resolveReturnValue","lambda$null$0","lambda$initializeHandlers$3","handleNewInstanceCreation","lambda$canHandle$10","handle","lambda$initializeHandler$7",23,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",38,"builder","subscribe",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",38,"access$500","access$600",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",38,"access$500","access$600","access$400",3,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",38,"resolveReturnValue","access$400",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",38,"access$400","access$700",2,1
"org.axonframework.test.deadline.StubDeadlineManager",38,"getTriggeredDeadlines","getScheduledDeadlines","getCurrentDateTime",3,1
"org.axonframework.test.deadline.StubDeadlineManager",38,"advanceTimeTo","lambda$registerHandlerInterceptor$4","lambda$cancelAll$1","lambda$registerDispatchInterceptor$3","schedule","advanceToNextTrigger","consumeDeadline","lambda$cancelSchedule$0","lambda$cancelAllWithinScope$2","lambda$consumeDeadline$5","processDispatchInterceptors",11,1
"org.axonframework.deadline.GenericDeadlineMessage",36,"andMetaData","lambda$asDeadlineMessage$1","lambda$asDeadlineMessage$0","withMetaData","asDeadlineMessage",5,1
"org.axonframework.eventhandling.MergedTrackingToken",36,"upperSegmentToken","isUpperSegmentAdvanced","lowerSegmentToken","isLowerSegmentAdvanced",4,1
"org.axonframework.eventhandling.MergedTrackingToken",36,"upperSegmentToken","mergePosition","isMergeInProgress","position","lowerSegmentToken",5,1
"org.axonframework.eventhandling.MergedTrackingToken",36,"doAdvance","mergePosition","lambda$mergePosition$0","lambda$mergePosition$1",5,1
"org.axonframework.eventhandling.MergedTrackingToken",36,"merged",1,1
"org.axonframework.queryhandling.DefaultQueryGateway",36,"lambda$getSubscriptionQueryResult$7","lambda$streamingQuery$3","getSubscriptionQueryResult","lambda$getSubscriptionQueryResult$6","getSubscriptionQueryMessage","lambda$query$0","lambda$streamingQuery$4","lambda$query$1","lambda$getSubscriptionQueryResult$5","lambda$query$2","processInterceptors","lambda$registerDispatchInterceptor$8",12,1
"org.axonframework.queryhandling.DefaultQueryGateway",36,"builder",1,1
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",36,"andMetaData","withMetaData",2,1
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",36,"asUpdateMessage",1,1
"org.axonframework.eventsourcing.eventstore.inmemory.InMemoryEventStorageEngine",35,"lambda$readEvents$4","lambda$readEvents$5","lambda$createTokenAt$7","nextTrackingToken","lambda$createTokenAt$11","storeEvents","lambda$storeSnapshot$2","lambda$createTokenAt$8","lambda$storeEvents$1","lambda$readEvents$3","lambda$createTokenAt$9","lambda$readEvents$6","lambda$createTokenAt$10","lambda$appendEvents$0","createHeadToken",15,1
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",35,"lambda$handle$1","lambda$handle$3","lambda$handle$2","lambda$handle$0",4,1
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",33,"isExceptional","andMetaData","optionalExceptionResult","withMetaData",4,1
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",32,"lambda$stagedDomainEventMessages$0","lambda$readEvents$3","stagedDomainEventMessages","handleSnapshotReadingError","lambda$stagedDomainEventMessages$1","lambda$stagedDomainEventMessages$2",6,1
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",31,"parametersMatch","resolveParameterValues","checkAndRethrowForExceptionOrError","typeMatches",4,1
"org.axonframework.modelling.saga.AbstractSagaManager",31,"matchesSegment","lambda$doInvokeSaga$5","lambda$handle$1","getSagaType","lambda$handle$3","lambda$handle$2","createSagaIdentifier","shouldCreateSaga","lambda$handle$4","extractAssociationValues","doInvokeSaga","canResolve","createInvokeSpanName","performReset","startNewSaga","getSagaCreationPolicy","lambda$handle$0",17,1
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",31,"sql_loadSaga",1,1
"org.axonframework.queryhandling.GenericStreamingQueryMessage",31,"withMetaData","andMetaData",2,1
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",31,"andMetaData","withMetaData",2,1
"org.axonframework.deadline.SimpleDeadlineManager",30,"lambda$cancelAllWithinScope$8","lambda$cancelAllWithinScope$10","lambda$null$9","lambda$null$6","lambda$cancelAll$5","lambda$null$3","cancelSchedule","lambda$schedule$0","lambda$schedule$1","shutdown","lambda$cancelAll$7","lambda$cancelSchedule$2","lambda$cancelSchedule$4",13,1
"org.axonframework.deadline.SimpleDeadlineManager",30,"access$600","access$700","access$500","access$900","access$800",5,1
"org.axonframework.deadline.SimpleDeadlineManager",30,"builder",1,1
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",30,"schedulePayloadAndMetadata","shutdown","publishWithRevision","createMessage","publish","lambda$schedulePayload$66ef0dda$1","lambda$schedulePayload$edc2443f$1","schedule","lambda$schedulePayloadAndMetadata$3b5ac046$1","publishEventMessage","lambda$schedulePayloadAndMetadata$efde5fa1$1","lambda$publishEventMessage$0","schedulePayload",16,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",30,"peekGlobalStream","peek","lastToken","lambda$closePrivateStream$0","behindGlobalCache","nextNode","closePrivateStream","nextAvailable","peekPrivateStream","stopTailingGlobalStream",10,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",30,"access$2600","access$2500",2,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",30,"access$1900",1,1
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",30,"behindGlobalCache","lastToken","peek","lambda$closePrivateStream$0","nextAvailable","peekPrivateStream","nextNode","closePrivateStream","stopTailingGlobalStream","peekGlobalStream",10,1
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",30,"access$2000",1,1
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",30,"access$2700","access$2800",2,1
"org.axonframework.messaging.deadletter.GenericDeadLetter",30,"diagnostics","enqueuedAt","message","cause","lambda$new$0",5,1
"org.axonframework.queryhandling.QueryResponseMessage",30,"andMetaData","withMetaData",2,1
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",30,"lambda$doAppendEvents$2","lambda$publish$0","openStream","doAppendEvents","lambda$doAppendEvents$1","injectAggregateIdentifier","lambda$subscribe$3","lambda$registerDispatchInterceptor$4",8,1
"org.axonframework.commandhandling.CommandResultMessage",29,"andMetaData","withMetaData",2,1
"org.axonframework.eventhandling.GenericEventMessage",29,"andMetaData","withMetaData","getTimestamp",3,1
"org.axonframework.eventhandling.GenericEventMessage",29,"getTimestamp",1,1
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",29,"getSnapshotSerializer","getEventSerializer","isFirstDomainEvent","lambda$readSnapshot$0","readSnapshotData","readEventData","storeSnapshot","appendEvents","buildExceptionMessage","lambda$readSnapshot$1",11,1
"org.axonframework.tracing.LoggingSpanFactory",29,"lambda$createInternalSpan$7","lambda$null$5","lambda$getSpanMessage$3","lambda$createRootTrace$0","lambda$createInternalSpan$8","lambda$createDispatchSpan$2","getSpanMessage","lambda$createHandlerSpan$1","lambda$null$6","lambda$getSpanMessage$4",10,1
"org.axonframework.eventhandling.MultiSourceTrackingToken",28,"getUpperBound","lambda$lowerBound$1","lambda$lowerBound$2","lambda$covers$7","lambda$position$9","lambda$toString$11","lambda$upperBound$3","lambda$position$8","lambda$upperBound$4","lambda$upperBound$5","lambda$equals$10","lambda$lowerBound$0","lambda$covers$6",13,1
"org.axonframework.eventhandling.MultiSourceTrackingToken",28,"advancedTo","getTokenForStream",2,1
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",28,"lambda$storeToken$0","initializeTokenSegments","lambda$fetchSegments$1","fetchSegments",4,1
"org.axonframework.messaging.responsetypes.AbstractResponseType",28,"isParameterizedType","isGenericArrayType","isParameterizedTypeOfExpectedType","isTypeVariable","isAssignableFrom","isGenericAssignableFrom","isArray","isWildcardTypeWithMatchingUpperBound","isWildcardType",9,1
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",28,"getSequenceNumber",1,1
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",28,"getType","getData",2,1
"org.axonframework.commandhandling.SimpleCommandBus",27,"dispatch","lambda$subscribe$5","lambda$handle$3","findCommandHandlerFor","lambda$handle$4","lambda$null$1","handle","lambda$dispatch$2","doDispatch","lambda$dispatch$0","lambda$subscribe$6","intercept","lambda$registerDispatchInterceptor$8","lambda$registerHandlerInterceptor$7",14,1
"org.axonframework.eventhandling.GapAwareTrackingToken",27,"lowerBound","lambda$lowerBound$2","lambda$createSortedSetOf$0","lambda$lowerBound$1","lambda$upperBound$3","covers","lambda$covers$4","calculateIndex","withGapsTruncatedAt","createSortedSetOf",10,1
"org.axonframework.eventhandling.GapAwareTrackingToken",27,"getGaps","getIndex",2,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",27,"nextAvailable","doConsumeNext","lambda$new$0","lambda$doConsumeNext$1","peekForMessages","skipMessagesWithPayloadTypeOf","lambda$skipMessagesWithPayloadTypeOf$3","lambda$setOnAvailableCallback$4","lambda$setOnAvailableCallback$5","lambda$peekForMessages$2","messageSource",11,1
"org.axonframework.commandhandling.distributed.DistributedCommandBus",26,"shutdownDispatching","localSegment","lambda$registerDispatchInterceptor$1","disconnect","dispatch","updateFilter","intercept","lambda$subscribe$0",8,1
"org.axonframework.common.caching.WeakReferenceCache",26,"lambda$removeAll$2","lambda$registerCacheEntryListener$0","lambda$computeIfPresent$4","lambda$containsKey$3","purgeItems","lambda$get$1",6,1
"org.axonframework.common.caching.WeakReferenceCache",26,"access$000",1,1
"org.axonframework.deadline.quartz.QuartzDeadlineManager",26,"lambda$cancelAll$5","lambda$cancelSchedule$3","lambda$cancelAllWithinScope$7","lambda$cancelAll$4","lambda$cancelSchedule$2","buildJobDetail","cancelSchedule","lambda$schedule$1","schedule","buildTrigger","lambda$cancelAllWithinScope$6","lambda$schedule$0","shutdown","initialize",14,1
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",26,"getSequenceIdentifier","getId","getIndex",3,1
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",26,"message",1,1
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",26,"message",1,1
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",26,"getSequenceIdentifier","getIndex","getId",3,1
"org.axonframework.commandhandling.GenericCommandMessage",25,"getCommandName","withMetaData","andMetaData",3,1
"org.axonframework.eventhandling.AbstractEventProcessor",25,"lambda$registerHandlerInterceptor$0","lambda$processInUnitOfWork$3","getSpanName","lambda$null$1","processInUnitOfWork","lambda$null$2","getName",7,1
"org.axonframework.eventhandling.AbstractEventProcessor",25,"canHandle","reportIgnored","processInUnitOfWork",3,1
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",25,"lambda$canHandleType$3","lambda$prepareReset$4","lambda$canHandleType$2","canHandle","handle","lambda$handle$0","lambda$canHandle$1","prepareReset",8,1
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",25,"access$300",1,1
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",25,"detectList","invokeHandlers","hasHandler","performReset","sequenceIdentifier","sequencingPolicyMatchesSegment","lambda$new$0","lambda$canHandleType$1",8,1
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",25,"invokeHandlers","performReset","eventHandlers","sequenceIdentifier","sequencingPolicyMatchesSegment",5,1
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",25,"builder",1,1
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",25,"next","lambda$getLastSequenceNumber$0","hasNext",3,1
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",25,"next","nextSequenceNumber","initActiveIfRequired",3,1
"org.axonframework.queryhandling.GenericQueryMessage",25,"withMetaData","getQueryName","andMetaData","getResponseType",4,1
"org.axonframework.queryhandling.SubscriptionQueryMessage",25,"withMetaData","andMetaData",2,1
"org.axonframework.eventhandling.StreamingEventProcessor",24,"lambda$isReplaying$0","processingStatus","resetTokens",3,1
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",24,"next","readNext",2,1
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",24,"handle","canHandle",2,1
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",24,"canHandle",1,1
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",24,"unwrapType","upperBound","lambda$new$0","queryResultType",4,1
"org.axonframework.serialization.AbstractXStreamSerializer",24,"doSerialize","revisionOf","typeIdentifierOf","doDeserialize","typeForClass","getConverter","registerConverters","classForType",8,1
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",24,"validateIdentifier","lambda$loadOrCreate$0","lambda$load$2","lambda$load$3","load","lambda$newInstance$1","lambda$getAggregate$4","canResolve",8,1
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",24,"lambda$recordException$1","lambda$makeCurrent$0",2,1
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",23,"lambda$new$0",1,1
"org.axonframework.deadline.AbstractDeadlineManager",23,"dispatchInterceptors","lambda$runOnPrepareCommitOrNow$0","lambda$registerHandlerInterceptor$2","lambda$registerDispatchInterceptor$1",4,1
"org.axonframework.deadline.DeadlineMessage",23,"withMetaData","andMetaData",2,1
"org.axonframework.eventhandling.MultiStreamableMessageSource",23,"access$200",1,1
"org.axonframework.eventhandling.MultiStreamableMessageSource",23,"lambda$createTailToken$0","createHeadToken","lambda$createTokenSince$3","createTokenSince","createTailToken","lambda$createHeadToken$1","openStream","lambda$createTokenAt$2","createTokenAt",9,1
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",23,"next",1,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore",23,"access$1700","access$1802","access$1600","access$1400","access$1300","access$1800",6,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore",23,"access$1700","access$2300","access$1600","access$1300","access$2200","access$1800","access$2100",7,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore",23,"builder","shutDown",2,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore",23,"findNode","openStream","ensureProducerStarted","lambda$ensureProducerStarted$0","shutDown",5,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore",23,"access$2700",1,1
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore",23,"access$1400","access$1300","access$1800",3,1
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",23,"next","hasNext",2,1
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",23,"lambda$readEvents$1","lambda$readEvents$0",2,1
"org.axonframework.modelling.command.LockAwareAggregate",23,"version","isLockHeld","getWrappedAggregate",3,1
"org.axonframework.modelling.command.LockAwareAggregate",23,"lambda$new$0",1,1
"org.axonframework.modelling.command.inspection.AggregateModel",23,"getVersion","type","declaredType",3,1
"org.axonframework.modelling.command.inspection.AggregateModel",23,"type","types",2,1
"org.axonframework.modelling.command.inspection.AggregateModel",23,"types",1,1
"org.axonframework.modelling.command.inspection.AggregateModel",23,"declaredType",1,1
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",23,"removeAssociationValue","serializedSagaAsString","serializedObjectType","loadAssociationValues","addNamedQueriesTo","getSagaTypeName","createSagaEntry","storeAssociationValue","sagaEntryEntityName",9,1
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",23,"builder",1,1
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",23,"storeAssociationValue","serializedSagaAsString","loadAssociationValues","createSagaEntry","serializedObjectType","addNamedQueriesTo","getSagaTypeName","removeAssociationValue","sagaEntryEntityName",9,1
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",23,"andMetaData","withMetaData",2,1
"org.axonframework.tracing.MultiSpanFactory",23,"lambda$createRootTrace$0","lambda$createInternalSpan$4","lambda$createInternalSpan$3","lambda$createHandlerSpan$1","lambda$createDispatchSpan$2","lambda$registerSpanAttributeProvider$5",6,1
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",23,"lambda$makeCurrent$0",1,1
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",22,"lambda$eventProcessor$0","lambda$ensureInitialized$3","lambda$initialize$2","processingGroup","lambda$initialize$1","ensureInitialized","initialize",7,1
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",22,"access$000",1,1
"org.axonframework.eventhandling.replay.GenericResetContext",22,"withMetaData","andMetaData",2,1
"org.axonframework.common.caching.NoCache",21,"lambda$registerCacheEntryListener$0",1,1
"org.axonframework.eventhandling.DomainEventMessage",21,"withMetaData","andMetaData",2,1
"org.axonframework.eventhandling.GenericTrackedEventMessage",21,"trackingToken","withTrackingToken",2,1
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",21,"buildTrigger","shutdown","lambda$cancelSchedule$1","lambda$schedule$0","schedule","buildJobDetail","initialize",7,1
"org.axonframework.messaging.ResultMessage",21,"exceptionDetails","isExceptional","optionalExceptionResult","withMetaData","andMetaData",5,1
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",21,"lambda$handle$3","lambda$new$1","lambda$new$0","lambda$canHandle$2",4,1
"org.axonframework.serialization.json.JacksonSerializer",21,"classForType","builder","typeForClass","getWriter","resolveClassName","getReader","registerConverters",7,1
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",20,"lambda$handle$3","lambda$subscribe$1","canHandle","supportedCommandNames","handle","lambda$subscribe$0","lambda$supportedCommandNames$5","lambda$handle$2","lambda$canHandle$4",9,1
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",20,"subscribe",1,1
"org.axonframework.common.lock.PessimisticLockFactory",20,"lambda$obtainLock$4","lambda$threadsWaitingForMyLocks$1","threadsWaitingForMyLocks","lambda$threadsWaitingForMyLocks$3","lockFor","builder","lambda$threadsWaitingForMyLocks$0","lambda$null$2","lambda$lockFor$5",10,1
"org.axonframework.common.lock.PessimisticLockFactory",20,"access$600","access$400","access$800","access$700","access$500",5,1
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",20,"compareTo","offsetBy","lambda$lowerBound$0","lambda$upperBound$1","lambda$covers$2",5,1
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",20,"offsetBy","next","getGlobalIndex",3,1
"org.axonframework.eventhandling.MultiEventHandlerInvoker",20,"lambda$canHandle$0","canHandle","lambda$canHandleType$1","delegates","performReset","flatten","lambda$performReset$2",7,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",20,"setOnAvailableCallback","hasNextAvailable","peek","close","access$300","skipMessagesWithPayloadTypeOf",7,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",20,"nextAvailable","skipMessagesWithPayloadTypeOf",2,1
"org.axonframework.eventsourcing.AbstractSnapshotter",20,"lambda$doScheduleSnapshot$4","lambda$scheduleSnapshot$0","lambda$doScheduleSnapshot$1","lambda$doScheduleSnapshot$2","lambda$doScheduleSnapshot$3","doScheduleSnapshot","silently","lambda$doScheduleSnapshot$5","getInnerTraceName","traceName","createSnapshotterTask",11,1
"org.axonframework.eventsourcing.AbstractSnapshotter",20,"createSnapshot","access$800",2,1
"org.axonframework.eventsourcing.AbstractSnapshotter",20,"access$700",1,1
"org.axonframework.modelling.saga.repository.CachingSagaStore",20,"removeAssociationValueFromCache","lambda$addCachedAssociations$3","lambda$deleteSaga$1","lambda$findSagas$0","lambda$updateSaga$4","cacheKey","addCachedAssociations","lambda$removeAssociationValueFromCache$2",8,1
"org.axonframework.queryhandling.StreamingQueryMessage",20,"withMetaData","andMetaData",2,1
"org.axonframework.queryhandling.StreamingQueryMessage",20,"getResponseType",1,1
"org.axonframework.test.utils.RecordingCommandBus",20,"lambda$subscribe$0","lambda$registerHandlerInterceptor$1",2,1
"org.axonframework.commandhandling.CommandMessage",19,"withMetaData",1,1
"org.axonframework.commandhandling.CommandMessage",19,"withMetaData","andMetaData",2,1
"org.axonframework.commandhandling.CommandMessage",19,"andMetaData",1,1
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",19,"access$100",1,1
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",19,"send","lambda$send$0","asRuntime",3,1
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",19,"deadlineNameMatchesAll","deadlineNameMatch",2,1
"org.axonframework.eventhandling.EventMessage",19,"withMetaData","andMetaData",2,1
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",19,"access$500","access$600","access$400","access$300",4,1
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",19,"schedule","shutdown",2,1
"org.axonframework.messaging.MessageDecorator",19,"describeType","getIdentifier","getPayload","getMetaData","describeTo",5,1
"org.axonframework.messaging.MessageDecorator",19,"getPayload","serializePayload",2,1
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",19,"subscribe",1,1
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",19,"lambda$subscribe$2","lambda$subscribe$1","canHandle","lambda$subscribe$0","lambda$canHandle$5","lambda$handle$4","handle","lambda$handle$3",8,1
"org.axonframework.tracing.NestingSpanFactory",19,"messageShouldBeForcedToNest",1,1
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",18,"toString","equals","hashes","access$100",4,1
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",18,"name","lambda$hashes$0",2,1
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",18,"loadOrCreate","newInstance","load",4,1
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",18,"newInstance","canResolve","lambda$load$0","removeFromCache","load",5,1
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",18,"access$000",1,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",18,"load","lambda$send$0","send","canResolve","lambda$send$1","lambda$send$2",6,1
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",18,"lambda$constructHandlerAttributesFor$1","constructHandlerAttributesFor","lambda$null$0","prefixedKey",4,1
"org.axonframework.modelling.saga.AbstractResourceInjector",18,"lambda$null$1","lambda$null$0","lambda$null$2","injectMethodResources","lambda$null$6","lambda$null$4","injectFieldResource","injectMethodResource","injectFieldResources","injectorAnnotationNames","lambda$null$5","findResource","lambda$injectMethodResources$7","lambda$injectFieldResources$3",14,1
"org.axonframework.modelling.saga.Saga",18,"getAssociationValues","isActive","getSagaIdentifier",3,1
"org.axonframework.modelling.saga.Saga",18,"getSagaIdentifier",1,1
"org.axonframework.modelling.saga.Saga",18,"prepareReset",1,1
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",17,"lambda$new$0","lambda$new$1",2,1
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",17,"sagaTypeName","loadAssociations",2,1
"org.axonframework.test.eventscheduler.StubEventScheduler",17,"advanceTimeTo","advanceToNextTrigger",2,1
"org.axonframework.test.eventscheduler.StubEventScheduler",17,"advanceTimeTo","advanceTimeBy","initializeAt","getCurrentDateTime",4,1
"org.axonframework.test.eventscheduler.StubEventScheduler",17,"getCurrentDateTime","getScheduledItems",2,1
"org.axonframework.test.saga.EventValidator",17,"assertPublishedEventsMatching","handle","createEqualToMatchers","lambda$startRecording$0","unwrapEvent",5,1
"org.axonframework.commandhandling.CommandMessageHandlingMember",16,"routingKey","commandName",2,1
"org.axonframework.commandhandling.CommandMessageHandlingMember",16,"commandName",1,1
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",16,"matches","lambda$and$97c94f44$1",2,1
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",16,"nextAvailable","alterToken",2,1
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",16,"lambda$initialize$0","lambda$resolveParameterValue$2","lambda$resolveParameterValue$1","resolveParameterValue",4,1
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",16,"callWithInterceptorChain",1,1
"org.axonframework.queryhandling.QueryGateway",16,"subscriptionQuery","query","scatterGather","streamingQuery",8,1
"org.axonframework.queryhandling.QueryUpdateEmitter",16,"registerUpdateHandler","queryUpdateHandlerRegistered",3,1
"org.axonframework.queryhandling.QueryUpdateEmitter",16,"lambda$complete$1","emit","complete","lambda$completeExceptionally$2","completeExceptionally","lambda$emit$0",7,1
"org.axonframework.serialization.JavaSerializer",16,"classForType","revisionOf","getSerializedType",3,1
"org.axonframework.eventsourcing.conflictresolution.ConflictResolution",15,"lambda$getConflictResolver$2","getConflictResolver","lambda$initialize$0","lambda$initialize$1","resolveParameterValue",5,1
"org.axonframework.eventsourcing.eventstore.EventStore",15,"lambda$readEvents$0","readEvents",2,1
"org.axonframework.eventsourcing.eventstore.EventStore",15,"readEvents",1,1
"org.axonframework.eventsourcing.eventstore.jpa.SQLErrorCodesResolver",15,"lambda$isDuplicateKeyViolation$0","getDatabaseProductNameFromDataSource","loadKeyViolationCodes","isDuplicateKeyCode","causeIsEntityExistsException","loadDefaultPropertyFile","initialize",7,1
"org.axonframework.eventsourcing.eventstore.legacyjpa.SQLErrorCodesResolver",15,"loadKeyViolationCodes","isDuplicateKeyCode","causeIsEntityExistsException","loadDefaultPropertyFile","getDatabaseProductNameFromDataSource","lambda$isDuplicateKeyViolation$0","initialize",7,1
"org.axonframework.modelling.command.inspection.AbstractChildEntityDefinition",15,"lambda$extractCommandHandlerRoutingKeys$3","lambda$extractCommandHandlerRoutingKeys$2","extractCommandHandlerRoutingKey","extractChildEntityModel","instantiateForwardingMode","resolveCommandTarget","isMemberTypeSupported","lambda$createChildDefinition$0","lambda$createChildDefinition$1","resolveEventTargets",10,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",15,"createModel",1,1
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",15,"access$200",1,1
"org.axonframework.queryhandling.QueryMessage",15,"queryName",1,1
"org.axonframework.queryhandling.QueryMessage",15,"getQueryName",1,1
"org.axonframework.queryhandling.QueryMessage",15,"getQueryName","andMetaData","withMetaData",3,1
"org.axonframework.queryhandling.annotation.QueryHandlingMember",15,"getResultType","getQueryName",2,1
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",15,"newInstance","canResolve","load","lambda$newInstance$0",5,1
"org.axonframework.common.caching.AbstractCacheAdapter",14,"doRegisterListener","createListenerAdapter","lambda$registerCacheEntryListener$0",3,1
"org.axonframework.messaging.AbstractMessage",14,"withMetaData",1,1
"org.axonframework.messaging.AbstractMessage",14,"withMetaData","andMetaData",2,1
"org.axonframework.messaging.SimpleHandlerAttributes",14,"get","isEmpty","mergedWith","contains","getAll",5,1
"org.axonframework.messaging.SimpleHandlerAttributes",14,"isEmpty","getAll",2,1
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",14,"size","findSagas",2,1
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",14,"lambda$findSagas$0","lambda$findSagas$1",2,1
"org.axonframework.deadline.DeadlineManager",13,"schedule","cancelAllWithinScope",5,1
"org.axonframework.eventhandling.async.AsynchronousEventProcessingStrategy",13,"lambda$schedule$3","newProcessingScheduler","assignEventsToScheduler","lambda$null$0","lambda$schedule$2","lambda$handle$1","schedule",7,1
"org.axonframework.eventhandling.async.AsynchronousEventProcessingStrategy",13,"access$100","access$200",2,1
"org.axonframework.messaging.deadletter.ShouldEnqueue",13,"lambda$new$0",1,1
"org.axonframework.queryhandling.QueryBus$1",13,"lambda$initialResult$0",1,1
"org.axonframework.serialization.ChainedConverter",13,"isContinuous","lambda$new$0","calculateRoute","lambda$new$1",4,1
"org.axonframework.serialization.ChainedConverter",13,"convert","calculateChain","canConvert",3,1
"org.axonframework.serialization.ChainingConverter",13,"registerConverter","canConvert",2,1
"org.axonframework.serialization.SimpleSerializedObject",13,"getContentType","getData","getType",3,1
"org.axonframework.serialization.SimpleSerializedObject",13,"lambda$new$1","lambda$new$0",2,1
"org.axonframework.serialization.SimpleSerializedType",13,"lambda$new$0",1,1
"org.axonframework.commandhandling.callbacks.FutureCallback",12,"getResult",2,1
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",12,"isHeldBy","queuedThreads","lock",3,1
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",12,"checkForDeadlock","disposeIfUnused",2,1
"org.axonframework.eventhandling.EventMessageHandler",12,"prepareReset","handle",2,1
"org.axonframework.eventhandling.EventMessageHandler",12,"prepareReset","handle","supportsReset",3,1
"org.axonframework.eventhandling.EventMessageHandler",12,"handle",1,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",12,"openStream","sourceId",2,1
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",12,"createTokenSince","sourceId","createTailToken","createHeadToken","createTokenAt",5,1
"org.axonframework.eventhandling.SubscribingEventProcessor",12,"start","lambda$start$0","shutDown","process",4,1
"org.axonframework.eventhandling.SubscribingEventProcessor",12,"builder",1,1
"org.axonframework.eventhandling.WrappedToken",12,"lowerBound","upperBound","advancedTo","unwrap",4,1
"org.axonframework.eventhandling.WrappedToken",12,"unwrapLowerBound",1,1
"org.axonframework.eventhandling.WrappedToken",12,"advance",1,1
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",12,"lambda$handle$0","lambda$process$1",2,1
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",12,"builder",1,1
"org.axonframework.eventhandling.replay.ResetContext",12,"withMetaData","andMetaData",2,1
"org.axonframework.eventsourcing.AbstractAggregateFactory",12,"lambda$createAggregateRoot$0","postProcessInstance","fromSnapshot","doCreateAggregate",4,1
"org.axonframework.eventsourcing.AbstractSnapshotTrigger",12,"prepareSnapshotScheduling","lambda$prepareSnapshotScheduling$0","exceedsThreshold","scheduleSnapshot","lambda$prepareSnapshotScheduling$1","reset",6,1
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",12,"test",1,1
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",12,"builder",1,1
"org.axonframework.messaging.annotation.MultiHandlerDefinition",12,"ordered","flatten","getDelegates",4,1
"org.axonframework.messaging.annotation.MultiHandlerDefinition",12,"getHandlerEnhancerDefinition","ordered",2,1
"org.axonframework.messaging.annotation.MultiHandlerDefinition",12,"ordered",1,1
"org.axonframework.eventhandling.DomainEventData",11,"getSequenceNumber",1,1
"org.axonframework.eventhandling.DomainEventData",11,"getType",1,1
"org.axonframework.eventhandling.TrackingEventProcessor$WorkerLauncher",11,"lambda$run$0","lambda$run$1","name","cleanUp","lambda$run$3","lambda$run$2",6,1
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",11,"lambda$convert$0","lambda$convert$1",2,1
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",11,"lambda$convert$1","lambda$convert$0",2,1
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler$DirectEventJobDataBinder",11,"deserializePayload","deserializeMetaData","retrieveDeadlineTimestamp","fromJobDataMap",4,1
"org.axonframework.modelling.command.AggregateScopeDescriptor",11,"getIdentifier","lambda$new$0",2,1
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",11,"lambda$resolveAssociation$0","lambda$findHandlerMethods$1",2,1
"org.axonframework.monitoring.NoOpMessageMonitor",11,"instance",1,1
"org.axonframework.commandhandling.distributed.UnresolvedRoutingKeyPolicy",10,"lambda$static$1","lambda$static$2","lambda$static$0",3,1
"org.axonframework.config.AggregateConfiguration",10,"aggregateType","aggregateFactory",2,1
"org.axonframework.config.AggregateConfiguration",10,"aggregateType","snapshotFilter","aggregateFactory","repository",4,1
"org.axonframework.config.AggregateConfiguration",10,"repository",1,1
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",10,"validateMessage","lambda$handle$0",2,1
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",10,"validateMessage","lambda$handle$0",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",10,"handle","lambda$handle$0","canHandle",3,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",10,"handle","lambda$handle$0","canHandle",3,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",10,"canHandle","handle",2,1
"org.axonframework.modelling.command.AnnotationCommandTargetResolver",10,"invokeAnnotated","findIdentifier","findVersion","asLong",4,1
"org.axonframework.modelling.saga.repository.LockingSagaRepository",10,"doCreateInstance","lambda$lockSagaAccess$0","lockSagaAccess","doLoad",4,1
"org.axonframework.queryhandling.QueryBus",10,"subscriptionQuery",1,1
"org.axonframework.queryhandling.QueryBus",10,"subscriptionQuery","scatterGather","query","streamingQuery",5,1
"org.axonframework.queryhandling.QueryBus",10,"query",1,1
"org.axonframework.queryhandling.QueryBus",10,"subscribe",1,1
"org.axonframework.test.eventscheduler.StubScheduleToken",10,"lambda$getEvent$0","compareTo",2,1
"org.axonframework.test.eventscheduler.StubScheduleToken",10,"getEvent","getScheduleTime",2,1
"org.axonframework.eventhandling.ConcludesBatchParameterResolverFactory",9,"resolveParameterValue","lambda$resolveParameterValue$0",2,1
"org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker",9,"cleanUp","freeSegment","name",3,1
"org.axonframework.eventhandling.TrackingEventProcessor$TrackingSegmentWorker",9,"access$1900","name","run",3,1
"org.axonframework.eventhandling.TrackingTokenParameterResolverFactory$TrackingTokenParameterResolver",9,"unwrap","resolveParameterValue",2,1
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",9,"lambda$unexpectedEvents$0","unexpectedEvents",2,1
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",9,"handle","canHandle",2,1
"org.axonframework.modelling.command.ForwardMatchingInstances",9,"lambda$initialize$0","lambda$initialize$1","lambda$filterCandidates$2","matchesInstance",4,1
"org.axonframework.modelling.saga.PayloadAssociationResolver",9,"getProperty","lambda$getProperty$0","createProperty","getHandlerName",4,1
"org.axonframework.queryhandling.SubscriptionQueryResult",9,"lambda$handle$1","initialResult","lambda$null$0","lambda$handle$2","updates",5,1
"org.axonframework.serialization.converters.ByteArrayToStringConverter",9,"convert",1,1
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",9,"bytesFrom","convert",2,1
"org.axonframework.serialization.converters.StringToByteArrayConverter",9,"convert",1,1
"org.axonframework.tracing.TracingHandlerEnhancerDefinition",9,"isEventSourcingHandler","getSpanName","toMethodSignature",3,1
"org.axonframework.tracing.TracingHandlerEnhancerDefinition",9,"access$300","access$200",2,1
"org.axonframework.commandhandling.gateway.CommandGateway",8,"sendAndWait","send",3,1
"org.axonframework.commandhandling.gateway.CommandGatewayFactory$DispatchOnInvocationHandler",8,"invoke","lambda$invoke$0",2,1
"org.axonframework.commandhandling.gateway.CommandGatewayFactory$DispatchOnInvocationHandler",8,"builder",1,1
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",8,"handle",1,1
"org.axonframework.eventhandling.EventProcessor",8,"shutDown",1,1
"org.axonframework.eventhandling.EventProcessor",8,"getHandlerInterceptors",1,1
"org.axonframework.eventhandling.interceptors.EventLoggingInterceptor",8,"lambda$handle$0","lambda$handle$2","lambda$handle$1",3,1
"org.axonframework.eventsourcing.eventstore.jdbc.AbstractEventTableFactory",8,"idColumnType","payloadType","timestampType",3,1
"org.axonframework.messaging.annotation.MultiHandlerEnhancerDefinition",8,"flatten","ordered","getDelegates",3,1
"org.axonframework.messaging.annotation.MultiParameterResolverFactory",8,"ordered","getDelegates","flatten",3,1
"org.axonframework.messaging.annotation.ResultParameterResolverFactory",8,"access$200","access$100",2,1
"org.axonframework.messaging.annotation.ResultParameterResolverFactory",8,"ignoringResultParameters","callWithResult",2,1
"org.axonframework.messaging.annotation.ResultParameterResolverFactory",8,"callWithResult",1,1
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",8,"resolveParameterValue",1,1
"org.axonframework.messaging.deadletter.DeadLetterParameterResolverFactory$DeadLetterParameterResolver",8,"lambda$resolveParameterValue$0","resolveParameterValue",2,1
"org.axonframework.messaging.interceptors.LoggingInterceptor",8,"lambda$handle$0",1,1
"org.axonframework.modelling.command.inspection.AnnotatedChildEntity",8,"lambda$publish$2","lambda$new$0","lambda$new$1",3,1
"org.axonframework.modelling.saga.SagaMethodMessageHandlerDefinition",8,"doWrapHandler","associationKey","findAssociationResolver","instantiateAssociationResolver","lambda$wrapHandler$0",5,1
"org.axonframework.monitoring.MultiMessageMonitor",8,"lambda$onMessageIngested$1","lambda$new$0",2,1
"org.axonframework.monitoring.MultiMessageMonitor$1",8,"lambda$reportFailure$0",1,1
"org.axonframework.queryhandling.FluxSinkWrapper",8,"complete",1,1
"org.axonframework.serialization.converters.BlobToInputStreamConverter",8,"convert",1,1
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",8,"convert",1,1
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",8,"convert",1,1
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",8,"convert",1,1
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",8,"convert",1,1
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",8,"convert",1,1
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",8,"convert",1,1
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",8,"convert",1,1
"org.axonframework.serialization.xml.InputStreamToXomConverter",8,"convert",1,1
"org.axonframework.serialization.xml.XomToStringConverter",8,"convert",1,1
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",8,"publish",1,1
"org.axonframework.commandhandling.callbacks.FailureLoggingCallback",7,"lambda$onResult$0",1,1
"org.axonframework.commandhandling.distributed.CommandCallbackWrapper",7,"getChannelIdentifier","getMessage","reportResult",3,1
"org.axonframework.commandhandling.distributed.CommandCallbackWrapper",7,"onResult","getMessage",2,1
"org.axonframework.commandhandling.gateway.AbstractRetryScheduler",7,"computeRetryInterval","isExplicitlyNonTransient","scheduleRetry",3,1
"org.axonframework.commandhandling.gateway.RetryingCallback",7,"isCausedBy","simplify",2,1
"org.axonframework.commandhandling.gateway.RetryingCallback",7,"onResult","access$100",2,1
"org.axonframework.common.jdbc.UnitOfWorkAwareConnectionProviderWrapper",7,"lambda$getConnection$2","lambda$getConnection$1","lambda$getConnection$0",3,1
"org.axonframework.config.ConfigurationScopeAwareProvider",7,"lambda$new$0","retrieveAggregateRepositories","retrieveSagaManagers","retrieveScopeAwareComponents",4,1
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",7,"resolveParameterValue",1,1
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",7,"resolveParameterValue",1,1
"org.axonframework.eventhandling.pooled.WorkPackage$BatchProcessingEntry",7,"lambda$addToBatch$0",1,1
"org.axonframework.eventhandling.pooled.WorkPackage$BatchProcessingEntry",7,"add","trackingToken",2,1
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",7,"resolveParameterValue",1,1
"org.axonframework.messaging.annotation.AnnotatedHandlerInspector$ChainedMessageHandlerInterceptorMember",7,"lambda$handle$0","lambda$handle$1","doHandle",3,1
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",7,"resolveParameterValue",1,1
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",7,"resolveParameterValue",1,1
"org.axonframework.modelling.command.Repository",7,"newInstance","loadOrCreate","load",3,1
"org.axonframework.queryhandling.SinksManyWrapper",7,"complete",1,1
"org.axonframework.serialization.upcasting.ContextAwareSingleEntryMultiUpcaster",7,"lambda$upcast$0","buildContext","canUpcast","doUpcast",4,1
"org.axonframework.serialization.upcasting.ContextAwareSingleEntryUpcaster",7,"buildContext","doUpcast","lambda$upcast$0","canUpcast",4,1
"org.axonframework.test.saga.RecordingListenerInvocationErrorHandler",7,"setListenerInvocationErrorHandler","failOnErrorInPreparation",2,1
"org.axonframework.config.MessageHandlerRegistrar",6,"shutdown","start",2,1
"org.axonframework.disruptor.commandhandling.BlacklistDetectingCallback",6,"hasDelegate",1,1
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$FailureLoggingCommandCallback",6,"access$2000",1,1
"org.axonframework.eventhandling.async.PropertySequencingPolicy$Builder$ExceptionRaisingSequencingPolicy",6,"instance",1,1
"org.axonframework.eventhandling.async.PropertySequencingPolicy$Builder$ExceptionRaisingSequencingPolicy",6,"getSequenceIdentifierFor",1,1
"org.axonframework.eventhandling.async.SequentialPerAggregatePolicy",6,"instance",1,1
"org.axonframework.eventhandling.async.SequentialPerAggregatePolicy",6,"getSequenceIdentifierFor",1,1
"org.axonframework.eventhandling.gateway.DefaultEventGateway",6,"builder",1,1
"org.axonframework.eventhandling.replay.ReplayAwareMessageHandlerWrapper",6,"lambda$null$0","lambda$wrapHandler$1",2,1
"org.axonframework.eventsourcing.eventstore.jpa.SQLStateResolver",6,"lambda$isDuplicateKeyViolation$1","lambda$isDuplicateKeyViolation$0",2,1
"org.axonframework.messaging.annotation.AbstractAnnotatedParameterResolverFactory",6,"getResolver","lambda$new$1","lambda$new$0",3,1
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory",6,"doCreateModel",1,1
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory",6,"modelOf",1,1
"org.axonframework.serialization.upcasting.SingleEntryMultiUpcaster",6,"doUpcast","lambda$upcast$0","canUpcast",3,1
"org.axonframework.serialization.upcasting.SingleEntryUpcaster",6,"canUpcast","doUpcast","lambda$upcast$0",3,1
"org.axonframework.commandhandling.CommandBus",5,"dispatch",2,1
"org.axonframework.commandhandling.CommandBus",5,"dispatch",1,1
"org.axonframework.commandhandling.FailingDuplicateCommandHandlerResolver",5,"instance",1,1
"org.axonframework.commandhandling.callbacks.LoggingCallback",5,"onResult",1,1
"org.axonframework.commandhandling.distributed.AbstractRoutingStrategy",5,"doResolveRoutingKey",1,1
"org.axonframework.commandhandling.gateway.CommandGatewayFactory$CompositeCallback",5,"lambda$onResult$0",1,1
"org.axonframework.commandhandling.gateway.CommandGatewayFactory$WaitForResultWithTimeoutInArguments",5,"toLong",1,1
"org.axonframework.commandhandling.gateway.CommandGatewayFactory$WrapNonDeclaredCheckedExceptions",5,"asRuntimeIfNotDeclared",1,1
"org.axonframework.eventhandling.async.PropertySequencingPolicy",5,"getSequenceIdentifierFor",1,1
"org.axonframework.eventhandling.tokenstore.jdbc.GenericTokenTableFactory",5,"tokenType",1,1
"org.axonframework.messaging.interceptors.TransactionManagingInterceptor",5,"lambda$handle$0","lambda$handle$1",2,1
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore$ManagedSaga",5,"saga","associationValues",2,1
"org.axonframework.serialization.upcasting.GenericUpcasterChain",5,"getUpcasters",1,1
"org.axonframework.test.saga.SagaTestFixture$MutableFieldFilter",5,"add",1,1
"org.axonframework.commandhandling.MethodCommandHandlerDefinition",4,"lambda$wrapHandler$0",1,1
"org.axonframework.common.jpa.SimpleEntityManagerProvider",4,"lambda$new$0",1,1
"org.axonframework.common.legacyjpa.SimpleEntityManagerProvider",4,"lambda$new$0",1,1
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition",4,"lambda$wrapHandler$0",1,1
"org.axonframework.eventhandling.async.FullConcurrencyPolicy",4,"getSequenceIdentifierFor",1,1
"org.axonframework.eventsourcing.eventstore.jdbc.JdbcSQLErrorCodesResolver",4,"causeIsEntityExistsException",1,1
"org.axonframework.messaging.annotation.AnnotatedHandlerInspector$NoMoreInterceptors",4,"instance",1,1
"org.axonframework.modelling.command.inspection.AnnotatedCommandHandlerInterceptor",4,"lambda$handle$0",1,1
"org.axonframework.modelling.command.inspection.MethodCommandHandlerInterceptorDefinition",4,"lambda$wrapHandler$0",1,1
"org.axonframework.modelling.command.inspection.MethodCreationPolicyDefinition",4,"lambda$wrapHandler$0",1,1
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition",4,"lambda$wrapHandler$0",1,1
"org.axonframework.tracing.attributes.MessageNameSpanAttributesProvider",4,"determineName",1,1
"org.axonframework.tracing.attributes.MetadataSpanAttributesProvider",4,"lambda$provideForMessage$0",1,1

"Source Cypher Query:","Candidates_for_Interface_Segregation.cypher"
