"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,17,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier,getTimestamp",2,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getType,getSequenceNumber",3,5,""
"org.axonframework.messaging.ResultMessage",9,"isExceptional,exceptionResult",2,5,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getAggregateIdentifier,getType,getSequenceNumber",3,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber",2,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"newInstance,advanceTo,getIndex,getGaps,withGapsTruncatedAt",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.eventhandling.TrackerStatus",17,"split,getTrackingToken,getSegment",3,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"initSequence,initialize",3,2,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getAggregateIdentifier,getSequenceNumber",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"withTrackingToken,trackingToken",2,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",156,"lambda$null$32,lambda$null$41,lambda$registerDeadLetterPolicy$67,lambda$pooledStreamingEventProcessor$68,lambda$null$19,trackingEventProcessor,lambda$null$35,lambda$registerPooledStreamingEventProcessor$65,lambda$null$36,lambda$annotatedProcessingGroupOfType$70,lambda$null$11,lambda$null$31,lambda$null$33,pooledStreamingEventProcessor,lambda$null$42,lambda$registerDeadLetterQueue$66,lambda$null$18,lambda$null$26,subscribingEventProcessor,lambda$static$0,lambda$pooledStreamingEventProcessor$69,lambda$null$40,annotatedProcessingGroupOfType,defaultExecutor,trackingEventProcessorConfig,buildEventProcessor,lambda$registerSubscribingEventProcessor$57,lambda$new$16,registerTrackingEventProcessorConfiguration,lambda$new$22,eventProcessors,lambda$new$9,lambda$registerEventHandlerInvokers$34,lambda$registerRollbackConfiguration$61,lambda$registerTrackingEventProcessorConfiguration$63,lambda$selectProcessingGroupByType$28,lambda$registerTrackingEventProcessor$52,lambda$registerErrorHandler$58,defaultEventProcessor,lambda$new$3,registerEventProcessor,lambda$registerTransactionManager$62,initializeProcessors,noSagaProcessorCustomization,lambda$new$23,lambda$new$21,lambda$deadLetteringInvoker$38,deadLetterQueue,lambda$registerSagaManagers$43,validateConfigInitialization,messageMonitor,registerTrackingEventProcessor,lambda$registerListenerInvocationErrorHandler$50,sequencingPolicy,lambda$deadLetteringInvoker$39,deadLetterPolicy,lambda$new$5,lambda$registerSequencingPolicy$60,lambda$registerEventHandlerInvokers$37,lambda$new$17,processorNameForProcessingGroup,lambda$buildEventProcessor$46,lambda$new$25,retrieveHandlerDefinition,lambda$registerHandlerInterceptor$59,lambda$buildEventProcessor$45,lambda$usingSubscribingEventProcessors$54,lambda$new$6,lambda$initializeProcessors$27,packageOfObject,lambda$new$24,simpleInvoker,lambda$new$2,lambda$registerTokenStore$53,tokenStore,errorHandler,lambda$new$10,lambda$registerEventHandlerInvokers$30,lambda$usingTrackingEventProcessors$55,registerSagaManagers,listenerInvocationErrorHandler,lambda$new$7,lambda$selectProcessingGroupByType$29,lambda$registerTrackingEventProcessorConfiguration$64,rollbackConfiguration,lambda$new$13,lambda$new$4,lambda$new$20,lambda$new$12,lambda$new$14,registerEventHandlerInvokers,lambda$sagaConfigurations$48,lambda$eventProcessors$47,lambda$registerTrackingEventProcessor$51,lambda$buildEventProcessor$44,lambda$new$1,lambda$new$8,transactionManager,lambda$usingPooledStreamingEventProcessors$56,selectProcessingGroupByType,lambda$new$15,deadLetteringInvoker,lambda$registerEventHandler$49",103,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$null$31,lambda$null$32,lambda$null$25,lambda$null$12,lambda$null$17,lambda$static$0,lambda$null$35,lambda$null$43,lambda$null$36,lambda$null$46,lambda$defaultCommandBus$18,defaultScopeAwareProvider,defaultUpcasterChain,lambda$defaultHandlerDefinition$16,lambda$defaultQueryGateway$11,invokeShutdownHandlers,defaultSerializer,lambda$invokeLifecycleHandlers$51,defaultEventBus,prepareModules,defaultResourceInjector,lambda$defaultSerializer$24,defaultCommandGateway,invokeInitHandlers,verifyIdentifierFactory,lambda$onStart$53,defaultCommandBus,defaultConfiguration,registerCommandHandler,registerQueryHandler,lambda$new$1,prepareMessageHandlerRegistrars,defaultSnapshotter,lambda$jpaConfiguration$8,lambda$registerQueryHandler$34,lambda$registerHandlerDefinition$44,lambda$defaultConfiguration$4,lambda$configureEmbeddedEventStore$42,lambda$jpaConfiguration$5,lambda$prepareMessageHandlerRegistrars$47,lambda$defaultEventBus$22,lambda$defaultQueryBus$13,lambda$invokeLifecycleHandlers$52,lambda$invokeShutdownHandlers$50,lambda$new$3,lambda$registerCommandHandler$30,defaultQueryUpdateEmitter,eventProcessing,lambda$invokeInitHandlers$48,lambda$invokeStartHandlers$49,defaultHandlerDefinition,lambda$defaultEventGateway$23,lambda$eventProcessing$28,registerComponent,lambda$configureMessageMonitor$29,lambda$jpaConfiguration$7,lambda$onShutdown$54,defaultEventGateway,invokeLifecycleHandlers,registerModule,defaultDeadlineManager,lambda$registerMessageHandler$40,lambda$defaultScopeAwareProvider$20,lambda$registerMessageHandler$39,lambda$registerCommandHandler$33,defaultSpanFactory,retrieveHandlerDefinition,lambda$prepareModules$45,lambda$defaultSnapshotter$26,defaultComponent,defaultQueryGateway,lambda$defaultDeadlineManager$21,defaultQueryBus,lambda$registerQueryHandler$37,lambda$jpaConfiguration$6,lambda$defaultCommandGateway$10,lambda$eventProcessing$27,lambda$jpaConfiguration$9,lambda$defaultQueryUpdateEmitter$14,lambda$registerMessageHandler$41,lambda$new$2,defaultParameterResolverFactory,lambda$defaultParameterResolverFactory$15,jpaConfiguration,lambda$defaultResourceInjector$19,lambda$registerMessageHandler$38",86,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectResultMessagePayload,expectScheduledDeadlineMatching,recordException,expectExceptionDetails,expectTriggeredDeadlinesMatching,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectNoScheduledDeadlineWithName$2,expectTriggeredDeadlines,lambda$expectScheduledDeadlineWithName$1,verifyMetaDataEquality,lambda$expectNoScheduledDeadlineWithName$4,lambda$expectNoScheduledDeadlineMatching$5,expectNoScheduledDeadlineMatching,expectExceptionMessage,lambda$expectNoScheduledDeadlineMatching$3,lambda$expectScheduledDeadlineWithName$0,expectException,expectResultMessageMatching,verifyPayloadEquality,expectEvents",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"lambda$expectScheduledDeadlineWithName$2,expectNoScheduledDeadlineMatching,expectScheduledEventMatching,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineWithName$3,lambda$registerStartRecordingCallback$0,expectTriggeredDeadlines,expectNoScheduledEventMatching,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$7,expectTriggeredDeadlinesMatching,lambda$expectNoScheduledDeadlineMatching$6,lambda$expectNoScheduledDeadlineWithName$5,lambda$expectNoScheduledDeadlineMatching$4",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"invokeShutdownHandlers,access$700,access$1300,access$1200,access$1100,access$500,access$800,access$300,access$400,access$1500,invokeStartHandlers,access$1000,access$200,access$1400,defaultComponent,access$900,access$600",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"lambda$getComponent$1,registerLifecycleHandler,lambda$registerLifecycleHandler$2,lambda$null$0,isEarlierPhaseDuringStartUp,isEarlierPhaseDuringShutdown",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"registerStartRecordingCallback,startRecording",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"ensureSagaResourcesInitialized,lambda$null$0,lambda$handleInSaga$1,currentTime,getPublisherFor,givenAggregate,getResourceInjector,timeCorrectedEventMessage,registerCommandGateway,getCommandBus,registerFieldFilter,handleDeadline,getHandlerDefinition,registerResource,handleInSaga,getParameterResolverFactory",16,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"changePhase,setPhase,lambda$start$0,lambda$start$1,commitAsNested,lambda$rollback$8,lambda$commit$5,notifyHandlers,commitAsRoot,lambda$commit$4,addHandler,lambda$rollback$7,delegateAfterCommitToParent,phase,onRollback,lambda$commitAsNested$6,setRollbackCause,lambda$null$2,lambda$start$3",19,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"releaseSegment,lambda$singleStatusUpdater$12,singleStatusUpdater,lambda$calculateIdentifier$4,calculateIdentifier,lambda$getTokenStoreIdentifier$3,lambda$null$8,resetTokens,lambda$resetTokens$10,lambda$null$9,lambda$null$1,lambda$resetTokens$5,shutdownAsync,spawnWorker,lambda$statusUpdater$13,supportsReset,isRunning,lambda$new$2,lambda$null$7,statusUpdater,start,lambda$new$0,lambda$null$11,lambda$resetTokens$6",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"lambda$claimDeadLetter$12,getNextIndexForSequence,sequenceSize,toStringSequenceIdentifier,lambda$toLetter$7,claimDeadLetter,lambda$amountOfSequences$16,lambda$findNextDeadLetter$11,lambda$findFirstLetterOfEachAvailableSequence$10,findFirstLetterOfEachAvailableSequence,entityManager,lambda$clear$13,lambda$sequenceSize$14,lambda$processLetterAndFollowing$9,lambda$enqueue$0,lambda$deadLetterSequence$5,lambda$getMaxIndexForSequence$17,lambda$enqueue$2,lambda$deadLetters$6,evict,lambda$size$15,requeue,getMaxIndexForSequence,lambda$toLetter$8,toLetter,lambda$evict$4,findNextDeadLetter,lambda$enqueue$3,processLetterAndFollowing,amountOfSequences,isFull,lambda$enqueue$1,getProcessingStartedLimit",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"claimDeadLetter,lambda$enqueue$2,toLetter,lambda$enqueue$1,lambda$toLetter$8,evict,getMaxIndexForSequence,lambda$clear$13,toStringSequenceIdentifier,lambda$sequenceSize$14,lambda$amountOfSequences$16,getNextIndexForSequence,lambda$deadLetterSequence$5,processLetterAndFollowing,lambda$getMaxIndexForSequence$17,amountOfSequences,lambda$deadLetters$6,lambda$findFirstLetterOfEachAvailableSequence$10,findFirstLetterOfEachAvailableSequence,lambda$processLetterAndFollowing$9,getProcessingStartedLimit,lambda$enqueue$3,requeue,sequenceSize,lambda$enqueue$0,lambda$toLetter$7,isFull,lambda$claimDeadLetter$12,lambda$findNextDeadLetter$11,lambda$evict$4,entityManager,lambda$size$15,findNextDeadLetter",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$null$6,inStartedPhaseOfUnitOfWork,doCompleteExceptionally,lambda$null$18,lambda$null$13,lambda$null$20,lambda$null$16,lambda$runOnAfterCommitOrNow$21,lambda$doCompleteExceptionally$19,lambda$emit$8,lambda$complete$9,lambda$registerDispatchInterceptor$11,lambda$emit$5,doEmit,payloadMatchesQueryResponseType,lambda$payloadMatchesQueryResponseType$15,lambda$completeExceptionally$10,doComplete,lambda$queryUpdateHandlerRegistered$0,lambda$doEmit$12,lambda$registerUpdateHandler$3,runOnAfterCommitOrNow,lambda$doEmit$14,emitError,intercept,lambda$registerUpdateHandler$1,lambda$doComplete$17,lambda$registerUpdateHandler$4,lambda$registerUpdateHandler$2,lambda$null$7",31,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$aggregateConfiguration$5,aggregateConfiguration,lambda$eventProcessingConfiguration$3,lambda$findModules$0,lambda$resourceInjector$2,getModules,lambda$findModules$1,findModules,lambda$aggregateConfiguration$6,getComponent,eventBus,lambda$getComponent$8,lambda$aggregateConfiguration$7,lambda$eventProcessingConfiguration$4",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$1000,access$900,access$1700,access$1600,doSleepFor,access$2200,access$1100,access$700,access$1200,access$1800,access$600,access$800,access$1400,getState,access$2100,access$1300,access$2000,access$1500",18,1,""
"org.axonframework.config.Configurer",29,"eventProcessing,buildConfiguration,registerQueryHandler,configureAggregate,configureMessageMonitor,registerModule,lambda$configureMessageMonitor$0,lambda$configureMessageMonitor$1,registerCommandHandler,registerComponent",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1000,processingLoop,access$900,access$1100,access$1200,access$800,access$1400,getState,access$1300,access$1500",10,1,""
"org.axonframework.config.Configuration",27,"handlerDefinition,messageMonitor,spanFactory,eventBus,getComponent,parameterResolverFactory,correlationDataProviders",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$700,access$600",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,access$800,access$2000",3,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,releaseSegment,access$800,access$2000",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$new$0,handle,lambda$canHandle$4,lambda$handle$7,lambda$execute$2,canHandle,lambda$null$3,lambda$handle$6,lambda$null$5,getAssociationValues,lambda$invoke$1,lambda$handle$8",13,1,""
"org.axonframework.config.Configuration",25,"upcasterChain,handlerDefinition,messageMonitor,serializer,spanFactory,eventStore,findModules,queryBus,commandBus,getComponent,eventBus,repository,eventSerializer,snapshotFilter,scopeAwareProvider,parameterResolverFactory,correlationDataProviders,messageSerializer",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"lambda$clear$7,lambda$enqueue$0,builder,getLastTouchedSequence,lambda$evict$1,lambda$process$4,contains,isFull,toIdentifier,requeue,lambda$process$5,lambda$process$6,maximumSequenceSizeReached,lambda$process$3,lambda$requeue$2,maximumNumberOfSequencesReached,evict",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$query$2,lambda$getSubscriptionQueryResult$5,getSubscriptionQueryResult,lambda$registerDispatchInterceptor$8,lambda$query$1,lambda$streamingQuery$4,processInterceptors,lambda$query$0,lambda$getSubscriptionQueryResult$7,lambda$getSubscriptionQueryResult$6,getSubscriptionQueryMessage,lambda$streamingQuery$3",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"isErrorState,unmarkError,advancedTo,isCaughtUp,caughtUp,markError,getSegment",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"lambda$schedulePayloadAndMetadata$efde5fa1$1,lambda$schedulePayload$66ef0dda$1,createMessage,publishEventMessage,lambda$publishEventMessage$0,publishWithRevision,schedule,lambda$schedulePayload$edc2443f$1,shutdown,publish,lambda$schedulePayloadAndMetadata$3b5ac046$1,schedulePayload,schedulePayloadAndMetadata",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"lambda$retrieveStorageIdentifier$3,validateSegment,initializeTokenSegments,loadToken,lambda$fetchSegments$0,lambda$fetchAvailableSegments$2,lambda$fetchAvailableSegments$1,fetchSegments,getConfig",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"validateSegment,lambda$fetchAvailableSegments$1,loadToken,fetchSegments,lambda$fetchSegments$0,getConfig,lambda$fetchAvailableSegments$2,lambda$retrieveStorageIdentifier$3,initializeTokenSegments",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"processDispatchInterceptors,schedule,advanceTimeTo,lambda$registerHandlerInterceptor$4,advanceToNextTrigger,consumeDeadline,lambda$cancelAllWithinScope$2,lambda$cancelSchedule$0,lambda$consumeDeadline$5,lambda$cancelAll$1,lambda$registerDispatchInterceptor$3",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"createReplayToken,lambda$getTokenAtReset$2,lambda$replayContext$1,isReplay,context,replayContext,lambda$isReplay$0,advancedTo,getTokenAtReset",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"injectAggregateIdentifier,lambda$doAppendEvents$1,lambda$publish$0,lambda$doAppendEvents$2,openStream,lambda$registerDispatchInterceptor$4,doAppendEvents,lambda$subscribe$3",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"lambda$subscribe$5,createRepository,lambda$initializeInvokerThreads$1,doDispatch,dispatch,lambda$dispatch$2,lambda$registerDispatchInterceptor$6,lambda$registerHandlerInterceptor$7,lambda$initializePublisherThreads$0,initializeInvokerThreads,lambda$doDispatch$3,lambda$subscribe$4,initializePublisherThreads",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"next,initActiveIfRequired,nextSequenceNumber",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState,advancedTo,markError",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState,split,mergeCompletedPosition,getError,isMerging,isCaughtUp,getResetPosition,getTrackingToken,isReplaying,getSegment,getCurrentPosition",11,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"getEventSerializer,lambda$readSnapshot$1,readEventData,appendEvents,buildExceptionMessage,lambda$readSnapshot$0,storeSnapshot,getSnapshotSerializer,isFirstDomainEvent,readSnapshotData",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"lambda$getLastSequenceNumber$0,next,hasNext",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"lambda$closePrivateStream$0,peekGlobalStream,nextAvailable,peek,closePrivateStream,peekPrivateStream,lastToken,stopTailingGlobalStream,behindGlobalCache,nextNode",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"nextNode,lambda$closePrivateStream$0,lastToken,peekGlobalStream,behindGlobalCache,stopTailingGlobalStream,closePrivateStream,nextAvailable,peek,peekPrivateStream",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"getPayload,andMetaData,findExceptionResult,withMetaData,isExceptional",5,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",19,"initialize,registerRoot,initSequence",6,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"root,isActive,getAssociationValues,getSagaIdentifier",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getTriggeredDeadlines,getCurrentDateTime,getScheduledDeadlines",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$makeCurrent$0,lambda$recordException$1",2,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"lambda$storeToken$0,lambda$fetchSegments$1,initializeTokenSegments,fetchSegments",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"stagedDomainEventMessages,lambda$stagedDomainEventMessages$2,lambda$readEvents$3,handleSnapshotReadingError,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$0",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"hasNext,next",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"readNext,next",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$100,access$000",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$3,lambda$handle$0,lambda$handle$1,lambda$handle$2",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"queryResultType,unwrapType,lambda$new$0,upperBound",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$createInternalSpan$8,lambda$null$5,lambda$null$6,lambda$createHandlerSpan$1,lambda$createRootTrace$0,getSpanMessage,lambda$createInternalSpan$7,lambda$getSpanMessage$3,lambda$getSpanMessage$4,lambda$createDispatchSpan$2",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"purgeItems,lambda$removeAll$2,lambda$registerCacheEntryListener$0,lambda$get$1,lambda$computeIfPresent$4,lambda$containsKey$3",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"processingGroup,lambda$initialize$1,lambda$ensureInitialized$3,initialize,lambda$initialize$2,ensureInitialized,lambda$eventProcessor$0",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"dispatchInterceptors,lambda$runOnPrepareCommitOrNow$0,lambda$registerHandlerInterceptor$2,lambda$registerDispatchInterceptor$1",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"lambda$mergePosition$1,lambda$mergePosition$0,mergePosition,doAdvance",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"skipMessagesWithPayloadTypeOf,lambda$peekForMessages$2,lambda$doConsumeNext$1,nextAvailable,lambda$new$0,messageSource,peekForMessages,doConsumeNext,lambda$skipMessagesWithPayloadTypeOf$3,lambda$setOnAvailableCallback$5,lambda$setOnAvailableCallback$4",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken,getSegment",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"handlerDefinition,spanFactory,eventStore,commandBus,eventBus,repository,getComponent,parameterResolverFactory",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatch,deadlineNameMatchesAll",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$registerHandlerInterceptor$0,getName,lambda$null$1,getSpanName,lambda$processInUnitOfWork$3,processInUnitOfWork,lambda$null$2",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"upperSegmentToken,lowerSegmentToken,isMergeInProgress,position,mergePosition",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"createReplayToken,getTokenAtReset,position,lowerBound,isReplay",6,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$new$1,lambda$canHandle$2,lambda$new$0,lambda$handle$3",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"isExceptional,optionalExceptionResult,andMetaData,withMetaData",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asNullableResponseMessage,asResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getData,getType",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"routingKey,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"handle,lambda$canHandle$1,prepareReset,lambda$handle$0,lambda$canHandleType$3,canHandle,lambda$canHandleType$2,lambda$prepareReset$4",8,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"withMetaData,withTrackingToken,andMetaData,trackingToken",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"setOnAvailableCallback,access$300,skipMessagesWithPayloadTypeOf,hasNextAvailable,peek,close",7,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getSequenceIdentifier,getIndex,getId",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getId,getSequenceIdentifier,getIndex",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"resolveParameterValues,parametersMatch,typeMatches,checkAndRethrowForExceptionOrError",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"canHandle,handle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isParameterizedTypeOfExpectedType,isGenericArrayType,isGenericAssignableFrom,isParameterizedType,isWildcardTypeWithMatchingUpperBound,isTypeVariable,isAssignableFrom,isArray,isWildcardType",9,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createDispatchSpan$2,lambda$registerSpanAttributeProvider$5,lambda$createRootTrace$0,lambda$createInternalSpan$3,lambda$createInternalSpan$4,lambda$createHandlerSpan$1",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"shutdownDispatching,localSegment,disconnect,intercept,updateFilter,lambda$subscribe$0,lambda$registerDispatchInterceptor$1,dispatch",8,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"andMetaData,lambda$asDeadlineMessage$1,asDeadlineMessage,withMetaData,lambda$asDeadlineMessage$0",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"lambda$performReset$2,flatten,performReset,lambda$canHandleType$1,lambda$canHandle$0,canHandle,delegates",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"isExceptional,optionalExceptionResult,exceptionDetails,andMetaData,withMetaData",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$0,lambda$new$1",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"types,type",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",14,"initialize",1,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"addNamedQueriesTo,sagaEntryEntityName,serializedObjectType,storeAssociationValue,loadAssociationValues,getSagaTypeName,removeAssociationValue,createSagaEntry,serializedSagaAsString",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"createSagaEntry,getSagaTypeName,serializedSagaAsString,storeAssociationValue,addNamedQueriesTo,serializedObjectType,loadAssociationValues,sagaEntryEntityName,removeAssociationValue",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"getQueryName,withMetaData,andMetaData,getResponseType",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"handlerDefinition,eventProcessingConfiguration,spanFactory,resourceInjector,parameterResolverFactory",5,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"trackingToken,withTrackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"upperSegmentToken,isLowerSegmentAdvanced,lowerSegmentToken,isUpperSegmentAdvanced",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"sequenceIdentifier,lambda$new$0,lambda$canHandleType$1,invokeHandlers,performReset,hasHandler,detectList,sequencingPolicyMatchesSegment",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$0,lambda$readEvents$1",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"diagnostics,enqueuedAt,message,cause,lambda$new$0",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$deleteSaga$1,removeAssociationValueFromCache,lambda$addCachedAssociations$3,cacheKey,lambda$updateSaga$4,lambda$removeAssociationValueFromCache$2,addCachedAssociations,lambda$findSagas$0",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$load$3,lambda$newInstance$1,canResolve,lambda$loadOrCreate$0,lambda$getAggregate$4,lambda$load$2,load,validateIdentifier",8,1,""
"org.axonframework.test.saga.EventValidator",13,"assertPublishedEventsMatching,createEqualToMatchers,unwrapEvent,handle,lambda$startRecording$0",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"andMetaData,getCommandName,withMetaData",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"newInstance,canResolve,removeFromCache,lambda$load$0,load",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"withMetaData,getTimestamp,andMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"shutdown,initialize,buildTrigger,lambda$schedule$0,schedule,buildJobDetail,lambda$cancelSchedule$1",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"lambda$readEvents$0,readEvents",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"getWrappedAggregate,isLockHeld,version",3,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",12,"getResponseType",1,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"advanceTimeTo,getCurrentDateTime,advanceTimeBy,initializeAt",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"lambda$send$0,asRuntime,send",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.messaging.ResultMessage",11,"isExceptional,exceptionResult",2,1,""
"org.axonframework.queryhandling.QueryGateway",11,"subscriptionQuery,scatterGather,query,streamingQuery",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"getQueryName,andMetaData,withMetaData",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"typeForClass,getConverter,doDeserialize,revisionOf,registerConverters,doSerialize,classForType,typeIdentifierOf",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"resolveClassName,builder,registerConverters,getReader,getWriter,typeForClass,classForType",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"load,newInstance,canResolve,lambda$newInstance$0",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"createListenerAdapter,doRegisterListener,lambda$registerCacheEntryListener$0",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"aggregateType,snapshotFilter,aggregateFactory,repository",4,1,""
"org.axonframework.config.Configuration",10,"eventProcessingConfiguration,findModules",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"canHandle,processInUnitOfWork,reportIgnored",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"nextAvailable,skipMessagesWithPayloadTypeOf",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"sequenceIdentifier,eventHandlers,invokeHandlers,performReset,sequencingPolicyMatchesSegment",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"resetTokens,processingStatus,lambda$isReplaying$0",3,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2500,access$2600",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.MessageDecorator",10,"getMetaData,getPayload,getIdentifier,describeType,describeTo",5,1,""
"org.axonframework.messaging.MessageDecorator",10,"serializePayload,getPayload",2,1,""
"org.axonframework.messaging.ResultMessage",10,"isExceptional,exceptionResult",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"contains,mergedWith,getAll,isEmpty,get",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"classForType,getSerializedType,revisionOf",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",9,"load",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"next,offsetBy,getGlobalIndex",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"lambda$upperBound$1,lambda$covers$2,offsetBy,compareTo,lambda$lowerBound$0",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"sourceId,createTailToken,createTokenSince,createHeadToken,createTokenAt",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"alterToken,nextAvailable",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$500,access$400,access$300,access$600",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$null$0,lambda$constructHandlerAttributesFor$1,constructHandlerAttributesFor,prefixedKey",4,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName,loadAssociations",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"equals,hashes,access$100,toString",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateType,aggregateFactory",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"unwrap,advancedTo,upperBound,lowerBound",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"size,findSagas",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"canConvert,registerConverter",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getAggregateIdentifier,getSequenceNumber,getType",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"supportsReset,handle,prepareReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"advancedTo,getTokenForStream",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"lambda$handle$0,handle,canHandle",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"handle,lambda$handle$0,canHandle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"createProperty,getProperty,lambda$getProperty$0,getHandlerName",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"name,lambda$hashes$0",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"queuedThreads,isHeldBy,lock",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"handle,prepareReset",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"sourceId,openStream",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"unexpectedEvents,lambda$unexpectedEvents$0",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"initializeAggregateFactory,initializeHandlers",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.Repository",6,"newInstance,load,loadOrCreate",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$findHandlerMethods$1,lambda$resolveAssociation$0",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$1,lambda$findSagas$0",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.ChainedConverter",6,"isContinuous,calculateRoute",2,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getContentType,getData,getType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"checkForDeadlock,disposeIfUnused",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getIndex,getGaps",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$handle$0,lambda$process$1",2,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$onMessageIngested$1,lambda$new$0",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"convert,bytesFrom",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
