"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,"",""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,"",""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier,getTimestamp",2,8,"",""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,"",""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7,"",""
"org.axonframework.messaging.ResultMessage",9,"isExceptional,exceptionResult",2,5,"",""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4,"",""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4,"",""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,"",""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4,"",""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,"",""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber,getAggregateIdentifier,getType",3,4,"",""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,"",""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,"",""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,"",""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,"",""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,3,"",""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,"",""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber,getAggregateIdentifier,getType",3,3,"",""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber,getAggregateIdentifier",2,3,"",""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"getGaps,withGapsTruncatedAt,newInstance,getIndex,advanceTo",5,3,"",""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,"",""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,"",""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,"",""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,"",""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,split,getTrackingToken",3,2,"",""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initialize,getAggregateRoot,initSequence",4,2,"",""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,"",""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,2,"",""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,"",""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,"",""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,"",""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,"",""
"org.axonframework.eventhandling.DomainEventMessage",13,"getSequenceNumber,getAggregateIdentifier",2,2,"",""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,"",""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,"",""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,"",""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,"",""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2,"",""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,"",""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken,withTrackingToken",2,2,"",""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,"",""
"org.axonframework.messaging.ResultMessage",10,"isExceptional,exceptionResult",2,2,"",""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,"",""
"org.axonframework.config.Configuration",9,"getComponent",1,2,"",""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,"",""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,"",""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,"",""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,"",""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,"",""
"org.axonframework.config.EventProcessingModule",156,"lambda$new$4,trackingEventProcessorConfig,lambda$usingPooledStreamingEventProcessors$56,defaultExecutor,lambda$registerHandlerInterceptor$59,lambda$registerSequencingPolicy$60,trackingEventProcessor,lambda$null$32,lambda$usingSubscribingEventProcessors$54,lambda$registerEventHandler$49,lambda$annotatedProcessingGroupOfType$70,lambda$registerListenerInvocationErrorHandler$50,lambda$null$36,subscribingEventProcessor,lambda$registerSubscribingEventProcessor$57,lambda$null$42,lambda$registerTokenStore$53,lambda$null$31,lambda$null$40,lambda$registerTrackingEventProcessorConfiguration$64,lambda$null$19,registerEventProcessor,lambda$usingTrackingEventProcessors$55,lambda$registerTrackingEventProcessor$51,lambda$null$18,lambda$registerErrorHandler$58,lambda$registerTrackingEventProcessor$52,lambda$static$0,lambda$registerDeadLetterPolicy$67,lambda$null$41,lambda$pooledStreamingEventProcessor$68,lambda$registerDeadLetterQueue$66,lambda$registerTrackingEventProcessorConfiguration$63,lambda$registerRollbackConfiguration$61,lambda$pooledStreamingEventProcessor$69,lambda$null$35,lambda$null$33,registerTrackingEventProcessor,pooledStreamingEventProcessor,registerTrackingEventProcessorConfiguration,lambda$null$11,lambda$registerPooledStreamingEventProcessor$65,lambda$registerTransactionManager$62,lambda$null$26,annotatedProcessingGroupOfType,lambda$new$9,lambda$new$14,lambda$selectProcessingGroupByType$28,lambda$new$5,registerSagaManagers,rollbackConfiguration,lambda$new$17,transactionManager,lambda$registerEventHandlerInvokers$37,buildEventProcessor,lambda$new$12,defaultEventProcessor,errorHandler,lambda$initializeProcessors$27,lambda$deadLetteringInvoker$39,lambda$new$8,lambda$registerEventHandlerInvokers$34,lambda$buildEventProcessor$45,deadLetteringInvoker,packageOfObject,lambda$new$15,lambda$new$23,noSagaProcessorCustomization,registerEventHandlerInvokers,validateConfigInitialization,messageMonitor,lambda$buildEventProcessor$46,lambda$new$1,lambda$new$20,lambda$new$7,selectProcessingGroupByType,lambda$registerSagaManagers$43,simpleInvoker,lambda$sagaConfigurations$48,lambda$buildEventProcessor$44,lambda$new$25,lambda$new$22,lambda$new$16,deadLetterQueue,lambda$new$10,lambda$registerEventHandlerInvokers$30,lambda$new$2,eventProcessors,listenerInvocationErrorHandler,lambda$new$24,deadLetterPolicy,retrieveHandlerDefinition,lambda$new$3,initializeProcessors,processorNameForProcessingGroup,lambda$selectProcessingGroupByType$29,lambda$deadLetteringInvoker$38,lambda$new$6,lambda$eventProcessors$47,tokenStore,lambda$new$13,sequencingPolicy,lambda$new$21",103,1,"",""
"org.axonframework.config.DefaultConfigurer",97,"registerCommandHandler,lambda$defaultDeadlineManager$21,lambda$registerCommandHandler$30,lambda$prepareModules$45,lambda$null$36,invokeLifecycleHandlers,lambda$eventProcessing$28,lambda$defaultEventGateway$23,lambda$defaultCommandBus$18,prepareMessageHandlerRegistrars,lambda$configureEmbeddedEventStore$42,lambda$null$12,lambda$invokeStartHandlers$49,retrieveHandlerDefinition,lambda$configureMessageMonitor$29,registerModule,lambda$prepareMessageHandlerRegistrars$47,lambda$null$25,invokeInitHandlers,lambda$defaultEventBus$22,lambda$defaultHandlerDefinition$16,lambda$invokeShutdownHandlers$50,lambda$defaultParameterResolverFactory$15,lambda$registerQueryHandler$34,lambda$registerQueryHandler$37,registerQueryHandler,lambda$null$31,lambda$defaultResourceInjector$19,verifyIdentifierFactory,lambda$registerCommandHandler$33,lambda$static$0,lambda$defaultSerializer$24,defaultHandlerDefinition,lambda$invokeLifecycleHandlers$51,lambda$invokeInitHandlers$48,lambda$defaultSnapshotter$26,lambda$defaultQueryUpdateEmitter$14,eventProcessing,prepareModules,lambda$onShutdown$54,lambda$registerMessageHandler$41,lambda$invokeLifecycleHandlers$52,lambda$registerMessageHandler$38,lambda$defaultScopeAwareProvider$20,lambda$registerMessageHandler$39,lambda$null$43,lambda$null$46,lambda$onStart$53,lambda$defaultCommandGateway$10,lambda$registerMessageHandler$40,lambda$null$35,lambda$null$32,lambda$null$17,lambda$registerHandlerDefinition$44,lambda$defaultQueryGateway$11,lambda$defaultQueryBus$13,lambda$eventProcessing$27,lambda$defaultConfiguration$4,lambda$jpaConfiguration$9,defaultSnapshotter,registerComponent,defaultComponent,defaultResourceInjector,defaultEventGateway,defaultQueryUpdateEmitter,defaultScopeAwareProvider,defaultEventBus,defaultConfiguration,lambda$jpaConfiguration$6,lambda$new$1,defaultQueryBus,jpaConfiguration,defaultCommandBus,defaultSerializer,lambda$jpaConfiguration$5,defaultDeadlineManager,lambda$jpaConfiguration$8,invokeShutdownHandlers,lambda$jpaConfiguration$7,lambda$new$3,defaultQueryGateway,defaultSpanFactory,lambda$new$2,defaultParameterResolverFactory,defaultCommandGateway,defaultUpcasterChain",86,1,"",""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"aggregateModel,lambda$whenConstructing$4,currentTime,lambda$whenInvoking$6,buildResultValidator,ensureValuesEqual,handleDeadline,lambda$when$7,when,lambda$null$5,lambda$buildResultValidator$9,whenTimeAdvancesTo,failIllegalStateChange,lambda$when$8,lambda$null$3,lambda$when$2,detectIllegalStateChanges,assertValidWorkingAggregateState,andGivenCurrentTime,whenTimeElapses,registerRepository,ensureRepositoryConfiguration,givenCommands,getRepositoryProvider,useStateStorage,given,clearGivenWhenState,lambda$andGivenCommands$1,registerRepositoryProvider,getParameterResolverFactory,executeAtSimulatedTime,registerAggregateCommandHandlers,andGivenCommands,lambda$givenState$0,finalizeConfiguration,registerCommandHandler,registerFieldFilter,andGiven,getHandlerDefinition",40,1,"",""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectExceptionMessage,expectTriggeredDeadlines,verifyPayloadEquality,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$3,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$2,expectTriggeredDeadlinesMatching,lambda$expectScheduledDeadlineWithName$0,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectNoScheduledDeadlineWithName$4,expectExceptionDetails,recordException,expectEvents,lambda$expectScheduledDeadlineWithName$1,expectResultMessagePayload,expectResultMessageMatching,expectException,verifyMetaDataEquality,lambda$expectNoScheduledDeadlineMatching$5",24,1,"",""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"expectTriggeredDeadlines,expectTriggeredDeadlinesMatching,expectNoScheduledEventMatching,expectScheduledEventMatching,lambda$expectNoScheduledDeadlineWithName$5,lambda$expectScheduledDeadlineWithName$1,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$3,lambda$expectScheduledDeadlineWithName$2,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$6,lambda$registerStartRecordingCallback$0,lambda$expectNoScheduledDeadlineWithName$7,lambda$expectNoScheduledDeadlineMatching$4",20,1,"",""
"org.axonframework.config.DefaultConfigurer",66,"access$200,defaultComponent,invokeStartHandlers,access$600,access$700,access$1300,access$300,access$1200,access$900,access$400,access$800,access$1500,access$500,access$1100,invokeShutdownHandlers,access$1000,access$1400",17,1,"",""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"registerLifecycleHandler,lambda$getComponent$1,lambda$registerLifecycleHandler$2,isEarlierPhaseDuringShutdown,lambda$null$0,isEarlierPhaseDuringStartUp",6,1,"",""
"org.axonframework.test.saga.FixtureExecutionResultImpl",55,"startRecording",1,1,"",""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"recordException,assertValidRecording",2,1,"",""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$700,access$602,access$800,access$600,access$900",5,1,"",""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"lambda$rollback$7,commitAsRoot,setPhase,lambda$start$0,lambda$commitAsNested$6,notifyHandlers,lambda$commit$5,lambda$start$3,lambda$null$2,phase,addHandler,changePhase,lambda$start$1,commitAsNested,setRollbackCause,lambda$rollback$8,onRollback,delegateAfterCommitToParent,lambda$commit$4",19,1,"",""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,"",""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"start,lambda$null$1,resetTokens,lambda$null$9,lambda$null$7,lambda$new$0,lambda$calculateIdentifier$4,lambda$statusUpdater$13,lambda$resetTokens$6,isRunning,lambda$null$11,calculateIdentifier,lambda$singleStatusUpdater$12,supportsReset,lambda$resetTokens$10,releaseSegment,lambda$getTokenStoreIdentifier$3,shutdownAsync,singleStatusUpdater,lambda$new$2,spawnWorker,lambda$resetTokens$5,statusUpdater,lambda$null$8",27,1,"",""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"claimDeadLetter,findFirstLetterOfEachAvailableSequence,lambda$enqueue$0,lambda$processLetterAndFollowing$9,getMaxIndexForSequence,sequenceSize,lambda$claimDeadLetter$12,processLetterAndFollowing,lambda$toLetter$8,lambda$getMaxIndexForSequence$17,lambda$evict$4,lambda$size$15,lambda$toLetter$7,toLetter,entityManager,lambda$enqueue$3,lambda$clear$13,evict,isFull,lambda$findFirstLetterOfEachAvailableSequence$10,getProcessingStartedLimit,findNextDeadLetter,lambda$amountOfSequences$16,lambda$findNextDeadLetter$11,lambda$deadLetters$6,amountOfSequences,toStringSequenceIdentifier,lambda$enqueue$1,lambda$sequenceSize$14,lambda$deadLetterSequence$5,requeue,lambda$enqueue$2,getNextIndexForSequence",33,1,"",""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$size$15,lambda$processLetterAndFollowing$9,findFirstLetterOfEachAvailableSequence,toLetter,evict,sequenceSize,lambda$claimDeadLetter$12,amountOfSequences,lambda$enqueue$3,lambda$enqueue$1,processLetterAndFollowing,lambda$deadLetterSequence$5,getMaxIndexForSequence,toStringSequenceIdentifier,claimDeadLetter,getNextIndexForSequence,findNextDeadLetter,lambda$amountOfSequences$16,isFull,entityManager,lambda$sequenceSize$14,lambda$findNextDeadLetter$11,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$toLetter$7,lambda$clear$13,lambda$enqueue$0,lambda$getMaxIndexForSequence$17,lambda$evict$4,lambda$toLetter$8,requeue,lambda$deadLetters$6,lambda$enqueue$2,getProcessingStartedLimit",33,1,"",""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$null$18,inStartedPhaseOfUnitOfWork,lambda$complete$9,doEmit,lambda$null$7,lambda$null$6,lambda$doComplete$17,lambda$doEmit$14,lambda$doEmit$12,lambda$registerUpdateHandler$4,lambda$doCompleteExceptionally$19,lambda$null$20,lambda$runOnAfterCommitOrNow$21,lambda$queryUpdateHandlerRegistered$0,doCompleteExceptionally,lambda$emit$8,lambda$null$13,payloadMatchesQueryResponseType,lambda$payloadMatchesQueryResponseType$15,lambda$completeExceptionally$10,runOnAfterCommitOrNow,emitError,lambda$emit$5,lambda$registerDispatchInterceptor$11,lambda$registerUpdateHandler$3,intercept,lambda$null$16,lambda$registerUpdateHandler$1,doComplete,lambda$registerUpdateHandler$2",31,1,"",""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$invoke$1,publishOnEventBus,createMessage,lambda$findHandlerAndHandleCommand$9,handle,lambda$createMessage$12,lambda$handle$7,andThen,lambda$handle$5,lambda$handle$3,initSequence,applyMessageOrPayload,findHandlerAndHandleCommand,lambda$registerRoot$0,lambda$handle$6,lambda$andThenApply$13,publish,rootType,registerRoot,lambda$null$8,initialize,lambda$doApply$11,lambda$findHandlerAndHandleCommand$10,lambda$handle$4,lambda$execute$2,doApply",30,1,"",""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,"",""
"org.axonframework.config.Configuration",32,"lambda$findModules$1,lambda$resourceInjector$2,lambda$eventProcessingConfiguration$3,lambda$findModules$0,lambda$getComponent$8,aggregateConfiguration,lambda$eventProcessingConfiguration$4,lambda$aggregateConfiguration$7,getModules,lambda$aggregateConfiguration$6,findModules,getComponent,lambda$aggregateConfiguration$5,eventBus",15,1,"",""
"org.axonframework.config.Configurer",29,"registerModule,registerComponent,registerQueryHandler,buildConfiguration,configureMessageMonitor,eventProcessing,registerCommandHandler,lambda$configureMessageMonitor$1,configureAggregate,lambda$configureMessageMonitor$0",11,1,"",""
"org.axonframework.config.Configuration",27,"correlationDataProviders,messageMonitor,getComponent,parameterResolverFactory,spanFactory,handlerDefinition,eventBus",7,1,"",""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,"",""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,"",""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$handle$8,canHandle,lambda$null$3,getAssociationValues,lambda$handle$7,handle,lambda$handle$6,lambda$invoke$1,lambda$new$0,lambda$null$5,lambda$canHandle$4,lambda$execute$2",13,1,"",""
"org.axonframework.config.Configuration",25,"serializer,correlationDataProviders,snapshotFilter,queryBus,messageSerializer,messageMonitor,findModules,eventSerializer,getComponent,scopeAwareProvider,upcasterChain,eventStore,repository,parameterResolverFactory,spanFactory,handlerDefinition,eventBus,commandBus",19,1,"",""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"lambda$clear$7,lambda$requeue$2,isFull,evict,maximumSequenceSizeReached,builder,lambda$process$6,contains,lambda$process$4,lambda$process$5,getLastTouchedSequence,maximumNumberOfSequencesReached,lambda$enqueue$0,requeue,lambda$process$3,toIdentifier,lambda$evict$1",17,1,"",""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$registerDispatchInterceptor$8,lambda$getSubscriptionQueryResult$7,lambda$query$0,lambda$streamingQuery$3,lambda$streamingQuery$4,getSubscriptionQueryResult,lambda$query$1,getSubscriptionQueryMessage,processInterceptors,lambda$query$2,lambda$getSubscriptionQueryResult$5,lambda$getSubscriptionQueryResult$6",12,1,"",""
"org.axonframework.eventhandling.TrackerStatus",24,"isErrorState,getSegment,unmarkError,isCaughtUp,markError,caughtUp,advancedTo",7,1,"",""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",24,"createChildDefinitions,setIdentifierAndRoutingKey,findIdentifierMember,assertIdentifierValidity,findRoutingKey,setVersionMember,inspectAggregateTypes,addHandler,findDeclaredType,validateCommandHandlers,prepareChildEntityCommandHandlers,prepareHandlers,inspectFieldsAndMethods,factoryCommands,stripGetterConvention,isGetterByConvention",16,1,"",""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"lambda$schedulePayloadAndMetadata$3b5ac046$1,publishWithRevision,schedule,schedulePayloadAndMetadata,publish,createMessage,shutdown,lambda$schedulePayload$66ef0dda$1,lambda$schedulePayloadAndMetadata$efde5fa1$1,lambda$schedulePayload$edc2443f$1,schedulePayload,publishEventMessage,lambda$publishEventMessage$0",16,1,"",""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"lambda$fetchAvailableSegments$1,validateSegment,fetchSegments,loadToken,lambda$fetchAvailableSegments$2,getConfig,initializeTokenSegments,lambda$retrieveStorageIdentifier$3,lambda$fetchSegments$0",10,1,"",""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"lambda$fetchAvailableSegments$1,lambda$fetchSegments$0,validateSegment,loadToken,fetchSegments,getConfig,lambda$fetchAvailableSegments$2,initializeTokenSegments,lambda$retrieveStorageIdentifier$3",10,1,"",""
"org.axonframework.test.deadline.StubDeadlineManager",23,"advanceToNextTrigger,lambda$registerHandlerInterceptor$4,advanceTimeTo,consumeDeadline,lambda$cancelSchedule$0,lambda$cancelAllWithinScope$2,processDispatchInterceptors,lambda$registerDispatchInterceptor$3,schedule,lambda$cancelAll$1,lambda$consumeDeadline$5",11,1,"",""
"org.axonframework.eventhandling.ReplayToken",22,"getTokenAtReset,lambda$getTokenAtReset$2,replayContext,lambda$replayContext$1,createReplayToken,lambda$isReplay$0,context,isReplay,advancedTo",11,1,"",""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$doAppendEvents$1,lambda$subscribe$3,openStream,lambda$publish$0,lambda$registerDispatchInterceptor$4,doAppendEvents,injectAggregateIdentifier,lambda$doAppendEvents$2",8,1,"",""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"createRepository,lambda$dispatch$2,lambda$subscribe$4,initializePublisherThreads,lambda$doDispatch$3,lambda$registerDispatchInterceptor$6,lambda$initializeInvokerThreads$1,initializeInvokerThreads,doDispatch,lambda$registerHandlerInterceptor$7,lambda$subscribe$5,dispatch,lambda$initializePublisherThreads$0",16,1,"",""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"next,nextSequenceNumber,initActiveIfRequired",3,1,"",""
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState,markError,advancedTo",3,1,"",""
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState,getResetPosition,getSegment,isReplaying,getCurrentPosition,isCaughtUp,mergeCompletedPosition,split,getError,getTrackingToken,isMerging",11,1,"",""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"lambda$readSnapshot$0,readSnapshotData,readEventData,lambda$readSnapshot$1,getSnapshotSerializer,getEventSerializer,buildExceptionMessage,isFirstDomainEvent,appendEvents,storeSnapshot",11,1,"",""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"next,lambda$getLastSequenceNumber$0,hasNext",3,1,"",""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"stopTailingGlobalStream,behindGlobalCache,lastToken,lambda$closePrivateStream$0,nextAvailable,peekPrivateStream,peek,nextNode,closePrivateStream,peekGlobalStream",10,1,"",""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"lambda$closePrivateStream$0,nextAvailable,peekPrivateStream,behindGlobalCache,peek,stopTailingGlobalStream,closePrivateStream,lastToken,peekGlobalStream,nextNode",10,1,"",""
"org.axonframework.messaging.GenericResultMessage",19,"andMetaData,getPayload,isExceptional,findExceptionResult,withMetaData",5,1,"",""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getAssociationValues,root,getSagaIdentifier,isActive",4,1,"",""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getCurrentDateTime,getScheduledDeadlines,getTriggeredDeadlines",3,1,"",""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$makeCurrent$0,lambda$recordException$1",2,1,"",""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"initializeTokenSegments,lambda$storeToken$0,fetchSegments,lambda$fetchSegments$1",4,1,"",""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"stagedDomainEventMessages,lambda$stagedDomainEventMessages$1,lambda$readEvents$3,lambda$stagedDomainEventMessages$0,handleSnapshotReadingError,lambda$stagedDomainEventMessages$2",6,1,"",""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"hasNext,next",2,1,"",""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"readNext,next",2,1,"",""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$0,lambda$handle$2,lambda$handle$3,lambda$handle$1",4,1,"",""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"unwrapType,upperBound,lambda$new$0,queryResultType",4,1,"",""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$null$6,lambda$getSpanMessage$3,lambda$createRootTrace$0,lambda$createInternalSpan$7,lambda$null$5,lambda$createHandlerSpan$1,getSpanMessage,lambda$createInternalSpan$8,lambda$createDispatchSpan$2,lambda$getSpanMessage$4",10,1,"",""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,"",""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,"",""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$removeAll$2,lambda$get$1,purgeItems,lambda$registerCacheEntryListener$0,lambda$computeIfPresent$4,lambda$containsKey$3",6,1,"",""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"ensureInitialized,lambda$initialize$1,initialize,lambda$eventProcessor$0,lambda$initialize$2,processingGroup,lambda$ensureInitialized$3",7,1,"",""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$registerHandlerInterceptor$2,dispatchInterceptors,lambda$registerDispatchInterceptor$1,lambda$runOnPrepareCommitOrNow$0",4,1,"",""
"org.axonframework.eventhandling.MergedTrackingToken",17,"lambda$mergePosition$0,lambda$mergePosition$1,doAdvance,mergePosition",5,1,"",""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"messageSource,peekForMessages,lambda$doConsumeNext$1,lambda$setOnAvailableCallback$4,nextAvailable,lambda$skipMessagesWithPayloadTypeOf$3,lambda$peekForMessages$2,lambda$new$0,lambda$setOnAvailableCallback$5,skipMessagesWithPayloadTypeOf,doConsumeNext",11,1,"",""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,getInternalTrackingToken",2,1,"",""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,"",""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,"",""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,"",""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,"",""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,"",""
"org.axonframework.config.Configuration",16,"eventStore,repository,getComponent,parameterResolverFactory,spanFactory,handlerDefinition,eventBus,commandBus",8,1,"",""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll,deadlineNameMatch",2,1,"",""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"processInUnitOfWork,lambda$null$1,lambda$null$2,getSpanName,getName,lambda$processInUnitOfWork$3,lambda$registerHandlerInterceptor$0",7,1,"",""
"org.axonframework.eventhandling.MergedTrackingToken",16,"lowerSegmentToken,position,upperSegmentToken,isMergeInProgress,mergePosition",5,1,"",""
"org.axonframework.eventhandling.ReplayToken",16,"getTokenAtReset,position,lowerBound,createReplayToken,isReplay",6,1,"",""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,"",""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,"",""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$handle$3,lambda$new$0,lambda$canHandle$2,lambda$new$1",4,1,"",""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"andMetaData,isExceptional,withMetaData,optionalExceptionResult",4,1,"",""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"publishOnEventBus,publish,doApply",3,1,"",""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType,getData",2,1,"",""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,"",""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,routingKey",2,1,"",""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,"",""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,"",""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"withMetaData,andMetaData",2,1,"",""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$handle$0,lambda$canHandleType$3,prepareReset,lambda$canHandle$1,lambda$prepareReset$4,canHandle,lambda$canHandleType$2,handle",8,1,"",""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"withMetaData,getSequenceNumber,andMetaData,getAggregateIdentifier,getType",5,1,"",""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"withTrackingToken,andMetaData,withMetaData,trackingToken",4,1,"",""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"close,skipMessagesWithPayloadTypeOf,access$300,peek,setOnAvailableCallback,hasNextAvailable",7,1,"",""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getIndex,getSequenceIdentifier,getId",3,1,"",""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getIndex,getId,getSequenceIdentifier",3,1,"",""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,"",""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"checkAndRethrowForExceptionOrError,parametersMatch,resolveParameterValues,typeMatches",4,1,"",""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"handle,canHandle",2,1,"",""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isGenericAssignableFrom,isParameterizedTypeOfExpectedType,isArray,isTypeVariable,isGenericArrayType,isParameterizedType,isWildcardType,isWildcardTypeWithMatchingUpperBound,isAssignableFrom",9,1,"",""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"type,declaredType,getVersion",3,1,"",""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"identifier,isDeleted,version,initialize",4,1,"",""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,"",""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,"",""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,"",""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,"",""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"newInstance,access$200,access$500,access$300,load,send,getAggregate",7,1,"",""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createHandlerSpan$1,lambda$createInternalSpan$3,lambda$registerSpanAttributeProvider$5,lambda$createInternalSpan$4,lambda$createDispatchSpan$2,lambda$createRootTrace$0",6,1,"",""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,"",""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"dispatch,updateFilter,disconnect,intercept,localSegment,lambda$subscribe$0,lambda$registerDispatchInterceptor$1,shutdownDispatching",8,1,"",""
"org.axonframework.deadline.GenericDeadlineMessage",14,"lambda$asDeadlineMessage$0,withMetaData,asDeadlineMessage,lambda$asDeadlineMessage$1,andMetaData",5,1,"",""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"delegates,lambda$canHandleType$1,performReset,canHandle,lambda$canHandle$0,lambda$performReset$2,flatten",7,1,"",""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,"",""
"org.axonframework.messaging.ResultMessage",14,"isExceptional,exceptionDetails,optionalExceptionResult,andMetaData,withMetaData",5,1,"",""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$0,lambda$new$1",2,1,"",""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,"",""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"type,types",2,1,"",""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"loadAssociationValues,getSagaTypeName,addNamedQueriesTo,createSagaEntry,serializedObjectType,storeAssociationValue,serializedSagaAsString,removeAssociationValue,sagaEntryEntityName",9,1,"",""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"serializedObjectType,getSagaTypeName,addNamedQueriesTo,removeAssociationValue,storeAssociationValue,createSagaEntry,loadAssociationValues,sagaEntryEntityName,serializedSagaAsString",9,1,"",""
"org.axonframework.queryhandling.GenericQueryMessage",14,"withMetaData,getResponseType,getQueryName,andMetaData",4,1,"",""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,"",""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.queryhandling.SimpleQueryBus",14,"assertSubQueryResponseTypes,getSubscriptionQueryResult,interceptAndInvoke,noSuitableHandlerException,noHandlerException",5,1,"",""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,"",""
"org.axonframework.config.Configuration",13,"resourceInjector,eventProcessingConfiguration,parameterResolverFactory,spanFactory,handlerDefinition",5,1,"",""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,"",""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,"",""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"withTrackingToken,trackingToken",2,1,"",""
"org.axonframework.eventhandling.MergedTrackingToken",13,"lowerSegmentToken,isLowerSegmentAdvanced,upperSegmentToken,isUpperSegmentAdvanced",4,1,"",""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,"",""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,"",""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"detectList,sequenceIdentifier,lambda$new$0,lambda$canHandleType$1,hasHandler,invokeHandlers,performReset,sequencingPolicyMatchesSegment",8,1,"",""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,"",""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$0,lambda$readEvents$1",2,1,"",""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"enqueuedAt,lambda$new$0,message,diagnostics,cause",5,1,"",""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,"",""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,"",""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$removeAssociationValueFromCache$2,addCachedAssociations,lambda$deleteSaga$1,removeAssociationValueFromCache,lambda$addCachedAssociations$3,lambda$findSagas$0,cacheKey,lambda$updateSaga$4",8,1,"",""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"withMetaData,andMetaData",2,1,"",""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"withMetaData,andMetaData",2,1,"",""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$getAggregate$4,lambda$load$2,validateIdentifier,lambda$loadOrCreate$0,lambda$newInstance$1,load,canResolve,lambda$load$3",8,1,"",""
"org.axonframework.test.saga.EventValidator",13,"handle,lambda$startRecording$0,unwrapEvent,createEqualToMatchers,assertPublishedEventsMatching",5,1,"",""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,"",""
"org.axonframework.commandhandling.GenericCommandMessage",12,"getCommandName,andMetaData,withMetaData",3,1,"",""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,"",""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"removeFromCache,lambda$load$0,load,canResolve,newInstance",5,1,"",""
"org.axonframework.eventhandling.GenericEventMessage",12,"withMetaData,getTimestamp,andMetaData",3,1,"",""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,"",""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"schedule,lambda$cancelSchedule$1,buildTrigger,initialize,buildJobDetail,shutdown,lambda$schedule$0",7,1,"",""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"readEvents,lambda$readEvents$0",2,1,"",""
"org.axonframework.modelling.command.LockAwareAggregate",12,"version,getWrappedAggregate,isLockHeld",3,1,"",""
"org.axonframework.queryhandling.QueryMessage",12,"getQueryName,getResponseType",2,1,"",""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"initializeAt,advanceTimeBy,advanceTimeTo,getCurrentDateTime",4,1,"",""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,"",""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,"",""
"org.axonframework.commandhandling.SimpleCommandBus",11,"registerDispatchInterceptor,dispatch,subscribe,builder,registerHandlerInterceptor",5,1,"",""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"lambda$send$0,asRuntime,send",3,1,"",""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,"",""
"org.axonframework.config.Configuration",11,"eventBus",1,1,"",""
"org.axonframework.deadline.DeadlineMessage",11,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"loadOrCreate,load,newInstance",4,1,"",""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"send,canResolve,lambda$send$0,load,lambda$send$1,lambda$send$2",6,1,"",""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier,andMetaData",2,1,"",""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,"",""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,"",""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,"",""
"org.axonframework.modelling.saga.Saga",11,"getAssociationValues,isActive,getSagaIdentifier",3,1,"",""
"org.axonframework.queryhandling.QueryGateway",11,"scatterGather,subscriptionQuery,streamingQuery,query",8,1,"",""
"org.axonframework.queryhandling.QueryMessage",11,"withMetaData,getQueryName,andMetaData",3,1,"",""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,"",""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"doDeserialize,registerConverters,typeIdentifierOf,revisionOf,getConverter,typeForClass,classForType,doSerialize",8,1,"",""
"org.axonframework.serialization.json.JacksonSerializer",11,"builder,typeForClass,resolveClassName,getWriter,classForType,getReader,registerConverters",7,1,"",""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"newInstance,load,lambda$newInstance$0,canResolve",5,1,"",""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,"",""
"org.axonframework.test.saga.EventValidator",11,"assertPublishedEvents,startRecording,assertPublishedEventsMatching",3,1,"",""
"org.axonframework.commandhandling.CommandMessage",10,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,"",""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,"",""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"doRegisterListener,createListenerAdapter,lambda$registerCacheEntryListener$0",3,1,"",""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,"",""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,"",""
"org.axonframework.config.AggregateConfiguration",10,"aggregateFactory,aggregateType,repository,snapshotFilter",4,1,"",""
"org.axonframework.config.Configuration",10,"eventProcessingConfiguration,findModules",2,1,"",""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"processInUnitOfWork,reportIgnored,canHandle",3,1,"",""
"org.axonframework.eventhandling.EventMessage",10,"getIdentifier,andMetaData",2,1,"",""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,"",""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"sequenceIdentifier,invokeHandlers,performReset,eventHandlers,sequencingPolicyMatchesSegment",5,1,"",""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"processingStatus,resetTokens,lambda$isReplaying$0",3,1,"",""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,"",""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,"",""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"withMetaData,andMetaData",2,1,"",""
"org.axonframework.eventhandling.replay.ResetContext",10,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,"",""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,"",""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,"",""
"org.axonframework.messaging.AbstractMessage",10,"andMetaData,withMetaData",2,1,"",""
"org.axonframework.messaging.MessageDecorator",10,"serializePayload,getPayload",2,1,"",""
"org.axonframework.messaging.MessageDecorator",10,"getIdentifier,getPayload,getMetaData,describeType,describeTo",5,1,"",""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"getAll,mergedWith,get,contains,isEmpty",5,1,"",""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,"",""
"org.axonframework.serialization.JavaSerializer",10,"classForType,getSerializedType,revisionOf",3,1,"",""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,"",""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,"",""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,"",""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,"",""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,"",""
"org.axonframework.config.Configuration",9,"start",1,1,"",""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,"",""
"org.axonframework.config.Configurer",9,"registerComponent,configureEmbeddedEventStore",2,1,"",""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"next,getGlobalIndex,offsetBy",3,1,"",""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"lambda$covers$2,compareTo,offsetBy,lambda$lowerBound$0,lambda$upperBound$1",5,1,"",""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTokenSince,createTokenAt,createTailToken,sourceId,createHeadToken",5,1,"",""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"alterToken,nextAvailable",2,1,"",""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$600,access$300,access$400,access$500",4,1,"",""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,"",""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,"",""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,"",""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"prefixedKey,constructHandlerAttributesFor,lambda$constructHandlerAttributesFor$1,lambda$null$0",4,1,"",""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,"",""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,"",""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName,loadAssociations",2,1,"",""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,"",""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,1,"",""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName,getResponseType",2,1,"",""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,"",""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"equals,access$100,hashes,toString",4,1,"",""
"org.axonframework.config.AggregateConfiguration",8,"aggregateFactory,aggregateType",2,1,"",""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,"",""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,"",""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,"",""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$1900,access$2100,access$2400,access$2200,access$2300",5,1,"",""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$1900,access$2100",2,1,"",""
"org.axonframework.eventhandling.WrappedToken",8,"lowerBound,unwrap,upperBound,advancedTo",4,1,"",""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,"",""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,"",""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,"",""
"org.axonframework.serialization.ChainingConverter",8,"registerConverter,canConvert",2,1,"",""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,"",""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,"",""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,"",""
"org.axonframework.eventhandling.DomainEventData",7,"getType,getSequenceNumber,getAggregateIdentifier",3,1,"",""
"org.axonframework.eventhandling.EventMessageHandler",7,"supportsReset,handle,prepareReset",3,1,"",""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"advancedTo,getTokenForStream",2,1,"",""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,"",""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,"",""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"subscribe,builder",2,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"handle,canHandle,lambda$handle$0",3,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"lambda$handle$0,canHandle,handle",3,1,"",""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,"",""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"getHandlerName,getProperty,lambda$getProperty$0,createProperty",4,1,"",""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",7,"findSagas",1,1,"",""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,"",""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,"",""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"name,lambda$hashes$0",2,1,"",""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"isHeldBy,queuedThreads,lock",3,1,"",""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,"",""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,"",""
"org.axonframework.eventhandling.EventMessageHandler",6,"prepareReset,handle",2,1,"",""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"sourceId,openStream",2,1,"",""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,"",""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,"",""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"lambda$unexpectedEvents$0,unexpectedEvents",2,1,"",""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"resolveReturnValue,access$400",2,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"subscribe,builder",2,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$700,access$400",2,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600,access$400",3,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600",2,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,"",""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"canHandle,handle",2,1,"",""
"org.axonframework.modelling.command.Repository",6,"load,loadOrCreate,newInstance",3,1,"",""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$findHandlerMethods$1,lambda$resolveAssociation$0",2,1,"",""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,"",""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,"",""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,"",""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,"",""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"checkForDeadlock,disposeIfUnused",2,1,"",""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,"",""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,"",""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,"",""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,"",""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,"",""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getGaps,getIndex",2,1,"",""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,"",""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,"",""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$handle$0,lambda$process$1",2,1,"",""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,"",""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,"",""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,"",""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,"",""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$onMessageIngested$1,lambda$new$0",2,1,"",""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,"",""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"convert,bytesFrom",2,1,"",""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,"",""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,"",""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1,"",""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,"",""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,"",""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,"",""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,"",""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,"",""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,"",""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,"",""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,"",""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,"",""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,"",""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,"",""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,"",""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,"",""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,"",""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,"",""
