"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.messaging.ResultMessage",9,"isExceptional,exceptionResult",2,10,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp,getIdentifier",2,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType,getAggregateIdentifier,getSequenceNumber",3,6,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,4,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,4,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getType,getAggregateIdentifier,getSequenceNumber",3,3,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,3,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken,withTrackingToken",2,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"withGapsTruncatedAt,advanceTo,newInstance,getIndex,getGaps",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.serialization.SimpleSerializedType",5,"emptyType",1,3,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initSequence,getAggregateRoot,initialize",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"canHandle,handle",2,2,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName,isFactoryHandler",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getAggregateIdentifier,getSequenceNumber",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.eventhandling.WrappedToken",6,"unwrap,unwrapLowerBound",2,2,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",156,"lambda$null$11,lambda$registerSubscribingEventProcessor$57,lambda$registerTokenStore$53,messageMonitor,lambda$null$33,lambda$new$20,trackingEventProcessor,lambda$new$12,initializeProcessors,registerEventProcessor,lambda$new$15,lambda$registerRollbackConfiguration$61,subscribingEventProcessor,lambda$new$25,transactionManager,lambda$registerEventHandlerInvokers$30,packageOfObject,lambda$eventProcessors$47,validateConfigInitialization,deadLetterQueue,lambda$pooledStreamingEventProcessor$69,defaultEventProcessor,lambda$registerTrackingEventProcessor$51,lambda$usingTrackingEventProcessors$55,processorNameForProcessingGroup,buildEventProcessor,lambda$registerDeadLetterQueue$66,lambda$null$32,lambda$new$7,lambda$registerHandlerInterceptor$59,lambda$registerTrackingEventProcessorConfiguration$64,lambda$new$5,lambda$new$9,lambda$registerSequencingPolicy$60,lambda$new$17,lambda$selectProcessingGroupByType$28,trackingEventProcessorConfig,lambda$new$8,lambda$new$6,lambda$new$16,lambda$new$14,lambda$static$0,registerEventHandlerInvokers,deadLetteringInvoker,lambda$null$31,sequencingPolicy,registerTrackingEventProcessorConfiguration,lambda$null$18,noSagaProcessorCustomization,annotatedProcessingGroupOfType,lambda$registerPooledStreamingEventProcessor$65,lambda$annotatedProcessingGroupOfType$70,lambda$null$41,lambda$new$10,eventProcessors,lambda$usingPooledStreamingEventProcessors$56,simpleInvoker,lambda$null$36,lambda$initializeProcessors$27,registerSagaManagers,lambda$new$22,lambda$new$1,lambda$registerEventHandler$49,lambda$registerSagaManagers$43,lambda$registerEventHandlerInvokers$34,listenerInvocationErrorHandler,deadLetterPolicy,lambda$registerListenerInvocationErrorHandler$50,lambda$sagaConfigurations$48,rollbackConfiguration,lambda$buildEventProcessor$45,lambda$registerTransactionManager$62,selectProcessingGroupByType,retrieveHandlerDefinition,lambda$registerTrackingEventProcessorConfiguration$63,lambda$buildEventProcessor$44,lambda$null$26,lambda$registerDeadLetterPolicy$67,lambda$registerTrackingEventProcessor$52,lambda$new$13,tokenStore,lambda$deadLetteringInvoker$39,lambda$deadLetteringInvoker$38,lambda$new$3,lambda$null$42,registerTrackingEventProcessor,defaultExecutor,lambda$new$4,lambda$new$24,lambda$registerErrorHandler$58,lambda$registerEventHandlerInvokers$37,lambda$null$40,lambda$usingSubscribingEventProcessors$54,lambda$null$35,errorHandler,lambda$selectProcessingGroupByType$29,lambda$null$19,lambda$pooledStreamingEventProcessor$68,lambda$buildEventProcessor$46,lambda$new$21,pooledStreamingEventProcessor,lambda$new$23,lambda$new$2",103,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$invokeStartHandlers$49,lambda$defaultParameterResolverFactory$15,prepareMessageHandlerRegistrars,lambda$configureMessageMonitor$29,defaultSnapshotter,registerCommandHandler,lambda$defaultEventGateway$23,defaultResourceInjector,lambda$onShutdown$54,lambda$defaultSnapshotter$26,lambda$registerMessageHandler$39,lambda$defaultConfiguration$4,defaultConfiguration,lambda$null$32,lambda$configureEmbeddedEventStore$42,lambda$jpaConfiguration$7,lambda$invokeInitHandlers$48,lambda$defaultScopeAwareProvider$20,lambda$jpaConfiguration$6,lambda$prepareMessageHandlerRegistrars$47,lambda$defaultCommandBus$18,invokeLifecycleHandlers,jpaConfiguration,lambda$invokeLifecycleHandlers$51,lambda$null$31,lambda$defaultSerializer$24,defaultQueryBus,retrieveHandlerDefinition,lambda$registerCommandHandler$33,lambda$defaultCommandGateway$10,defaultEventBus,defaultComponent,lambda$new$2,lambda$registerMessageHandler$41,lambda$null$36,prepareModules,lambda$jpaConfiguration$5,defaultQueryGateway,registerQueryHandler,lambda$eventProcessing$27,lambda$null$43,lambda$jpaConfiguration$8,lambda$null$25,lambda$defaultDeadlineManager$21,defaultCommandBus,lambda$static$0,defaultUpcasterChain,lambda$new$1,lambda$registerQueryHandler$34,verifyIdentifierFactory,lambda$defaultQueryUpdateEmitter$14,lambda$defaultQueryBus$13,lambda$defaultEventBus$22,lambda$jpaConfiguration$9,lambda$registerMessageHandler$40,lambda$eventProcessing$28,lambda$invokeLifecycleHandlers$52,lambda$prepareModules$45,lambda$defaultQueryGateway$11,lambda$onStart$53,lambda$new$3,lambda$null$17,lambda$null$35,defaultCommandGateway,defaultQueryUpdateEmitter,invokeInitHandlers,defaultEventGateway,lambda$null$46,lambda$defaultResourceInjector$19,registerModule,lambda$registerMessageHandler$38,lambda$defaultHandlerDefinition$16,defaultSerializer,lambda$registerHandlerDefinition$44,defaultHandlerDefinition,defaultParameterResolverFactory,eventProcessing,defaultScopeAwareProvider,registerComponent,defaultSpanFactory,lambda$null$12,invokeShutdownHandlers,lambda$invokeShutdownHandlers$50,defaultDeadlineManager,lambda$registerQueryHandler$37,lambda$registerCommandHandler$30",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"aggregateModel,lambda$whenConstructing$4,currentTime,lambda$whenInvoking$6,buildResultValidator,ensureValuesEqual,handleDeadline,lambda$when$7,when,lambda$null$5,lambda$buildResultValidator$9,whenTimeAdvancesTo,failIllegalStateChange,lambda$when$8,lambda$null$3,lambda$when$2,detectIllegalStateChanges,assertValidWorkingAggregateState,andGivenCurrentTime,whenTimeElapses,registerRepository,ensureRepositoryConfiguration,givenCommands,getRepositoryProvider,useStateStorage,given,clearGivenWhenState,lambda$andGivenCommands$1,registerRepositoryProvider,getParameterResolverFactory,executeAtSimulatedTime,registerAggregateCommandHandlers,andGivenCommands,lambda$givenState$0,finalizeConfiguration,registerCommandHandler,registerFieldFilter,andGiven,getHandlerDefinition",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectExceptionMessage,expectTriggeredDeadlines,verifyPayloadEquality,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$3,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$2,expectTriggeredDeadlinesMatching,lambda$expectScheduledDeadlineWithName$0,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectNoScheduledDeadlineWithName$4,expectExceptionDetails,recordException,expectEvents,lambda$expectScheduledDeadlineWithName$1,expectResultMessagePayload,expectResultMessageMatching,expectException,verifyMetaDataEquality,lambda$expectNoScheduledDeadlineMatching$5",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"lambda$expectNoScheduledDeadlineMatching$6,expectTriggeredDeadlinesMatching,expectTriggeredDeadlines,expectScheduledEventMatching,expectNoScheduledDeadlineMatching,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$4,lambda$expectNoScheduledDeadlineWithName$3,lambda$expectNoScheduledDeadlineWithName$7,lambda$expectScheduledDeadlineWithName$2,lambda$registerStartRecordingCallback$0,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineWithName$5,expectNoScheduledEventMatching",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$1100,access$1300,defaultComponent,access$500,access$800,access$400,invokeStartHandlers,access$1200,access$600,access$900,access$1400,access$700,access$200,access$300,invokeShutdownHandlers,access$1500,access$1000",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"isEarlierPhaseDuringShutdown,lambda$registerLifecycleHandler$2,lambda$null$0,isEarlierPhaseDuringStartUp,lambda$getComponent$1,registerLifecycleHandler",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"registerStartRecordingCallback,startRecording",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"lambda$null$0,getCommandBus,registerFieldFilter,getPublisherFor,currentTime,givenAggregate,timeCorrectedEventMessage,getParameterResolverFactory,handleDeadline,ensureSagaResourcesInitialized,lambda$handleInSaga$1,handleInSaga,registerResource,registerCommandGateway,getResourceInjector,getHandlerDefinition",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"recordException,assertValidRecording",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$700,access$602,access$800,access$600,access$900",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"commitAsRoot,lambda$start$3,notifyHandlers,lambda$start$1,setRollbackCause,lambda$rollback$7,setPhase,lambda$null$2,lambda$rollback$8,changePhase,commitAsNested,lambda$commit$5,addHandler,phase,delegateAfterCommitToParent,lambda$start$0,lambda$commit$4,onRollback,lambda$commitAsNested$6",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"calculateIdentifier,lambda$new$2,resetTokens,lambda$getTokenStoreIdentifier$3,lambda$calculateIdentifier$4,lambda$null$1,lambda$resetTokens$5,shutdownAsync,lambda$null$8,lambda$resetTokens$10,spawnWorker,lambda$statusUpdater$13,isRunning,lambda$singleStatusUpdater$12,lambda$null$9,statusUpdater,lambda$null$11,singleStatusUpdater,lambda$resetTokens$6,lambda$null$7,releaseSegment,lambda$new$0,supportsReset,start",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"lambda$enqueue$3,lambda$findNextDeadLetter$11,lambda$clear$13,lambda$toLetter$8,toLetter,lambda$enqueue$0,lambda$deadLetterSequence$5,lambda$amountOfSequences$16,toStringSequenceIdentifier,lambda$deadLetters$6,evict,lambda$toLetter$7,lambda$enqueue$2,getMaxIndexForSequence,findNextDeadLetter,requeue,entityManager,amountOfSequences,claimDeadLetter,lambda$claimDeadLetter$12,getNextIndexForSequence,processLetterAndFollowing,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$sequenceSize$14,findFirstLetterOfEachAvailableSequence,lambda$processLetterAndFollowing$9,lambda$size$15,lambda$evict$4,lambda$getMaxIndexForSequence$17,sequenceSize,isFull,lambda$enqueue$1,getProcessingStartedLimit",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"requeue,lambda$claimDeadLetter$12,lambda$clear$13,lambda$deadLetters$6,amountOfSequences,findFirstLetterOfEachAvailableSequence,lambda$toLetter$8,lambda$getMaxIndexForSequence$17,lambda$enqueue$2,isFull,lambda$amountOfSequences$16,processLetterAndFollowing,toStringSequenceIdentifier,evict,findNextDeadLetter,getNextIndexForSequence,lambda$size$15,lambda$enqueue$1,sequenceSize,toLetter,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$enqueue$3,lambda$sequenceSize$14,lambda$processLetterAndFollowing$9,lambda$deadLetterSequence$5,lambda$enqueue$0,lambda$toLetter$7,entityManager,lambda$findNextDeadLetter$11,claimDeadLetter,lambda$evict$4,getMaxIndexForSequence,getProcessingStartedLimit",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$registerDispatchInterceptor$11,lambda$null$16,lambda$registerUpdateHandler$4,lambda$null$13,lambda$complete$9,doEmit,lambda$registerUpdateHandler$2,lambda$emit$8,runOnAfterCommitOrNow,lambda$completeExceptionally$10,lambda$registerUpdateHandler$1,doCompleteExceptionally,lambda$doEmit$12,lambda$emit$5,lambda$null$7,lambda$null$18,lambda$doComplete$17,payloadMatchesQueryResponseType,lambda$null$6,lambda$runOnAfterCommitOrNow$21,lambda$registerUpdateHandler$3,lambda$doEmit$14,doComplete,lambda$null$20,lambda$payloadMatchesQueryResponseType$15,lambda$doCompleteExceptionally$19,inStartedPhaseOfUnitOfWork,lambda$queryUpdateHandlerRegistered$0,emitError,intercept",31,1,""
"org.axonframework.test.saga.SagaTestFixture",37,"currentTime,access$300,handleInSaga",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$andThenApply$13,doApply,findHandlerAndHandleCommand,registerRoot,handle,applyMessageOrPayload,andThen,lambda$handle$5,publishOnEventBus,lambda$createMessage$12,lambda$findHandlerAndHandleCommand$10,initSequence,lambda$doApply$11,lambda$registerRoot$0,lambda$execute$2,lambda$handle$7,lambda$findHandlerAndHandleCommand$9,lambda$handle$3,rootType,lambda$invoke$1,publish,lambda$handle$4,createMessage,lambda$handle$6,lambda$null$8,initialize",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"aggregateConfiguration,lambda$eventProcessingConfiguration$4,lambda$eventProcessingConfiguration$3,lambda$findModules$0,lambda$aggregateConfiguration$7,lambda$aggregateConfiguration$6,lambda$findModules$1,lambda$aggregateConfiguration$5,lambda$getComponent$8,getComponent,findModules,getModules,lambda$resourceInjector$2,eventBus",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$1500,access$1300,access$1000,access$1600,getState,access$600,access$900,access$2000,access$1700,access$1800,doSleepFor,access$2200,access$800,access$700,access$1400,access$1100,access$2100,access$1200",18,1,""
"org.axonframework.config.Configurer",29,"eventProcessing,registerQueryHandler,registerComponent,buildConfiguration,registerModule,configureMessageMonitor,lambda$configureMessageMonitor$0,registerCommandHandler,lambda$configureMessageMonitor$1,configureAggregate",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1500,access$1300,access$1000,getState,access$900,access$800,processingLoop,access$1400,access$1100,access$1200",10,1,""
"org.axonframework.config.Configuration",27,"handlerDefinition,messageMonitor,spanFactory,eventBus,correlationDataProviders,getComponent,parameterResolverFactory",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$600,access$700",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,access$2000,access$800,releaseSegment",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$1000,access$2000,access$800",3,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$handle$7,lambda$invoke$1,lambda$handle$8,lambda$execute$2,lambda$canHandle$4,canHandle,lambda$null$3,lambda$null$5,getAssociationValues,lambda$handle$6,handle,lambda$new$0",13,1,""
"org.axonframework.config.Configuration",25,"upcasterChain,eventSerializer,eventStore,queryBus,serializer,repository,handlerDefinition,getComponent,messageMonitor,commandBus,findModules,scopeAwareProvider,spanFactory,eventBus,correlationDataProviders,messageSerializer,parameterResolverFactory,snapshotFilter",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"builder,lambda$enqueue$0,toIdentifier,lambda$process$3,isFull,lambda$requeue$2,maximumNumberOfSequencesReached,lambda$clear$7,getLastTouchedSequence,lambda$process$5,lambda$evict$1,evict,maximumSequenceSizeReached,lambda$process$4,requeue,contains,lambda$process$6",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$query$1,lambda$query$2,lambda$query$0,processInterceptors,lambda$streamingQuery$3,getSubscriptionQueryResult,lambda$getSubscriptionQueryResult$5,lambda$streamingQuery$4,lambda$registerDispatchInterceptor$8,getSubscriptionQueryMessage,lambda$getSubscriptionQueryResult$6,lambda$getSubscriptionQueryResult$7",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"advancedTo,isCaughtUp,isErrorState,markError,caughtUp,getSegment,unmarkError",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"shutdown,schedule,publishEventMessage,lambda$publishEventMessage$0,schedulePayload,createMessage,publish,publishWithRevision,lambda$schedulePayload$66ef0dda$1,lambda$schedulePayloadAndMetadata$3b5ac046$1,lambda$schedulePayloadAndMetadata$efde5fa1$1,schedulePayloadAndMetadata,lambda$schedulePayload$edc2443f$1",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"lambda$fetchAvailableSegments$2,loadToken,lambda$retrieveStorageIdentifier$3,initializeTokenSegments,getConfig,lambda$fetchAvailableSegments$1,lambda$fetchSegments$0,validateSegment,fetchSegments",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"lambda$retrieveStorageIdentifier$3,fetchSegments,getConfig,lambda$fetchSegments$0,lambda$fetchAvailableSegments$2,loadToken,lambda$fetchAvailableSegments$1,initializeTokenSegments,validateSegment",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"processDispatchInterceptors,lambda$cancelSchedule$0,lambda$registerHandlerInterceptor$4,advanceTimeTo,lambda$registerDispatchInterceptor$3,lambda$consumeDeadline$5,advanceToNextTrigger,schedule,consumeDeadline,lambda$cancelAll$1,lambda$cancelAllWithinScope$2",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"createReplayToken,context,lambda$getTokenAtReset$2,isReplay,lambda$isReplay$0,advancedTo,lambda$replayContext$1,replayContext,getTokenAtReset",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$doAppendEvents$1,lambda$subscribe$3,openStream,lambda$publish$0,lambda$registerDispatchInterceptor$4,doAppendEvents,injectAggregateIdentifier,lambda$doAppendEvents$2",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"lambda$initializePublisherThreads$0,createRepository,lambda$subscribe$5,initializeInvokerThreads,lambda$dispatch$2,lambda$initializeInvokerThreads$1,lambda$registerHandlerInterceptor$7,lambda$subscribe$4,initializePublisherThreads,dispatch,doDispatch,lambda$doDispatch$3,lambda$registerDispatchInterceptor$6",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"initActiveIfRequired,nextSequenceNumber,next",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"split,isReplaying,mergeCompletedPosition,isCaughtUp,getTrackingToken,isErrorState,getError,getResetPosition,getSegment,getCurrentPosition,isMerging",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"advancedTo,isErrorState,markError",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"storeSnapshot,readEventData,isFirstDomainEvent,lambda$readSnapshot$0,appendEvents,getSnapshotSerializer,readSnapshotData,getEventSerializer,buildExceptionMessage,lambda$readSnapshot$1",11,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"nextAvailable,stopTailingGlobalStream,lambda$closePrivateStream$0,closePrivateStream,nextNode,behindGlobalCache,peekGlobalStream,peek,peekPrivateStream,lastToken",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"isExceptional,findExceptionResult,andMetaData,getPayload,withMetaData",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"root,getAssociationValues,isActive,getSagaIdentifier",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getCurrentDateTime,getScheduledDeadlines,getTriggeredDeadlines",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$recordException$1,lambda$makeCurrent$0",2,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"lambda$storeToken$0,fetchSegments,initializeTokenSegments,lambda$fetchSegments$1",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"lambda$stagedDomainEventMessages$0,stagedDomainEventMessages,handleSnapshotReadingError,lambda$readEvents$3,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$2",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"readNext,next",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$100,access$000",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$2,lambda$handle$0,lambda$handle$3,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"upperBound,lambda$new$0,queryResultType,unwrapType",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$createInternalSpan$8,lambda$null$6,lambda$getSpanMessage$4,lambda$createDispatchSpan$2,lambda$createHandlerSpan$1,lambda$createInternalSpan$7,lambda$getSpanMessage$3,getSpanMessage,lambda$null$5,lambda$createRootTrace$0",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$removeAll$2,lambda$get$1,lambda$containsKey$3,lambda$registerCacheEntryListener$0,purgeItems,lambda$computeIfPresent$4",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"lambda$ensureInitialized$3,lambda$eventProcessor$0,ensureInitialized,initialize,lambda$initialize$1,lambda$initialize$2,processingGroup",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$registerDispatchInterceptor$1,lambda$runOnPrepareCommitOrNow$0,lambda$registerHandlerInterceptor$2,dispatchInterceptors",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"mergePosition,lambda$mergePosition$0,lambda$mergePosition$1,doAdvance",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"peekForMessages,lambda$setOnAvailableCallback$4,nextAvailable,lambda$peekForMessages$2,messageSource,lambda$doConsumeNext$1,skipMessagesWithPayloadTypeOf,lambda$setOnAvailableCallback$5,lambda$skipMessagesWithPayloadTypeOf$3,lambda$new$0,doConsumeNext",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"split,getTrackingToken,getSegment",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getTrackingToken,split,getSegment",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken,getSegment",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.modelling.command.inspection.ForwardingCommandMessageHandlingMember",17,"canForward",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"eventStore,repository,handlerDefinition,commandBus,spanFactory,eventBus,getComponent,parameterResolverFactory",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatch,deadlineNameMatchesAll",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"processInUnitOfWork,lambda$null$2,lambda$registerHandlerInterceptor$0,lambda$processInUnitOfWork$3,getSpanName,lambda$null$1,getName",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"lowerSegmentToken,isMergeInProgress,mergePosition,position,upperSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"createReplayToken,lowerBound,position,getTokenAtReset,isReplay",6,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$handle$3,lambda$canHandle$2,lambda$new$1,lambda$new$0",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"andMetaData,optionalExceptionResult,isExceptional,withMetaData",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"doApply,publishOnEventBus,publish",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asResponseMessage,asNullableResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getData,getType",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,routingKey",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,isFactoryHandler",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"canHandle,lambda$canHandleType$3,prepareReset,lambda$canHandle$1,lambda$handle$0,lambda$prepareReset$4,handle,lambda$canHandleType$2",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"andMetaData,getAggregateIdentifier,getType,withMetaData,getSequenceNumber",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"trackingToken,withTrackingToken,withMetaData,andMetaData",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"setOnAvailableCallback,close,skipMessagesWithPayloadTypeOf,hasNextAvailable,peek,access$300",7,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getIndex,getSequenceIdentifier,getId",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getIndex,getSequenceIdentifier,getId",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"parametersMatch,resolveParameterValues,typeMatches,checkAndRethrowForExceptionOrError",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"priority,canHandle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isTypeVariable,isGenericAssignableFrom,isParameterizedTypeOfExpectedType,isGenericArrayType,isParameterizedType,isWildcardTypeWithMatchingUpperBound,isWildcardType,isArray,isAssignableFrom",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"type,getVersion,declaredType",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"version,isDeleted,identifier,initialize",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"newInstance,access$200,access$500,access$300,load,send,getAggregate",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createInternalSpan$4,lambda$createInternalSpan$3,lambda$registerSpanAttributeProvider$5,lambda$createHandlerSpan$1,lambda$createDispatchSpan$2,lambda$createRootTrace$0",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"updateFilter,disconnect,dispatch,intercept,localSegment,lambda$registerDispatchInterceptor$1,lambda$subscribe$0,shutdownDispatching",8,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"asDeadlineMessage,lambda$asDeadlineMessage$1,lambda$asDeadlineMessage$0,andMetaData,withMetaData",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"flatten,lambda$canHandle$0,canHandle,delegates,lambda$performReset$2,performReset,lambda$canHandleType$1",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"optionalExceptionResult,andMetaData,isExceptional,withMetaData,exceptionDetails",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$0,lambda$new$1",2,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"declaredType,types",2,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"types,type",2,1,""
"org.axonframework.modelling.command.inspection.CreationPolicyMember",14,"creationPolicy",1,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"loadAssociationValues,serializedObjectType,storeAssociationValue,serializedSagaAsString,getSagaTypeName,sagaEntryEntityName,removeAssociationValue,createSagaEntry,addNamedQueriesTo",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"sagaEntryEntityName,getSagaTypeName,loadAssociationValues,serializedSagaAsString,createSagaEntry,serializedObjectType,storeAssociationValue,removeAssociationValue,addNamedQueriesTo",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"withMetaData,andMetaData,getResponseType,getQueryName",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getQueryName,getResultType",2,1,""
"org.axonframework.config.Configuration",13,"handlerDefinition,eventProcessingConfiguration,resourceInjector,spanFactory,parameterResolverFactory",5,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"trackingToken,withTrackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"lowerSegmentToken,isLowerSegmentAdvanced,upperSegmentToken,isUpperSegmentAdvanced",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"lambda$new$0,performReset,hasHandler,detectList,invokeHandlers,sequenceIdentifier,sequencingPolicyMatchesSegment,lambda$canHandleType$1",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$0,lambda$readEvents$1",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"lambda$new$0,cause,enqueuedAt,message,diagnostics",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$findSagas$0,lambda$deleteSaga$1,addCachedAssociations,removeAssociationValueFromCache,lambda$removeAssociationValueFromCache$2,lambda$addCachedAssociations$3,lambda$updateSaga$4,cacheKey",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$getAggregate$4,lambda$load$2,validateIdentifier,lambda$loadOrCreate$0,lambda$newInstance$1,load,canResolve,lambda$load$3",8,1,""
"org.axonframework.test.saga.EventValidator",13,"unwrapEvent,handle,createEqualToMatchers,lambda$startRecording$0,assertPublishedEventsMatching",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"andMetaData,withMetaData,getCommandName",3,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"lambda$load$0,newInstance,load,removeFromCache,canResolve",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"withMetaData,getTimestamp,andMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.WrappedToken",12,"unwrapUpperBound,unwrap,advancedTo,unwrapLowerBound",4,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"initialize,shutdown,lambda$schedule$0,buildTrigger,lambda$cancelSchedule$1,buildJobDetail,schedule",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"readEvents,lambda$readEvents$0",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"getWrappedAggregate,isLockHeld,version",3,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",12,"getResponseType",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"registerDispatchInterceptor,subscribe,registerHandlerInterceptor,dispatch,builder",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"lambda$send$0,send,asRuntime",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"newInstance,load,loadOrCreate",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"lambda$send$1,load,lambda$send$2,canResolve,lambda$send$0,send",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.messaging.ResultMessage",11,"isExceptional,exceptionResult",2,1,""
"org.axonframework.modelling.saga.Saga",11,"getSagaIdentifier,isActive,getAssociationValues",3,1,""
"org.axonframework.queryhandling.QueryGateway",11,"scatterGather,subscriptionQuery,streamingQuery,query",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"withMetaData,andMetaData,getQueryName",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"getConverter,typeForClass,doSerialize,classForType,revisionOf,typeIdentifierOf,registerConverters,doDeserialize",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"classForType,getReader,registerConverters,builder,getWriter,typeForClass,resolveClassName",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"newInstance,load,lambda$newInstance$0,canResolve",5,1,""
"org.axonframework.test.saga.EventValidator",11,"assertPublishedEvents,assertPublishedEventsMatching,startRecording",3,1,""
"org.axonframework.commandhandling.CommandMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"doRegisterListener,lambda$registerCacheEntryListener$0,createListenerAdapter",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"snapshotFilter,repository,aggregateFactory,aggregateType",4,1,""
"org.axonframework.config.Configuration",10,"eventProcessingConfiguration,findModules",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"processInUnitOfWork,reportIgnored,canHandle",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"eventHandlers,performReset,invokeHandlers,sequenceIdentifier,sequencingPolicyMatchesSegment",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"resetTokens,processingStatus,lambda$isReplaying$0",3,1,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"withTrackingToken",1,1,""
"org.axonframework.eventhandling.WrappedToken",10,"unwrapUpperBound,unwrap,advancedTo,unwrapLowerBound",4,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2800,access$2700",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,getIdentifier,getMetaData,describeType,describeTo",5,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,serializePayload",2,1,""
"org.axonframework.messaging.ResultMessage",10,"isExceptional,exceptionResult",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"get,getAll,isEmpty,mergedWith,contains",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"revisionOf,classForType,getSerializedType",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,getGlobalIndex,next",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,compareTo,lambda$upperBound$1,lambda$covers$2,lambda$lowerBound$0",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTailToken,createHeadToken,createTokenAt,sourceId,createTokenSince",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"alterToken,nextAvailable",2,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",9,"asResetContext",1,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$400,access$600,access$500,access$300",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$null$0,constructHandlerAttributesFor,prefixedKey,lambda$constructHandlerAttributesFor$1",4,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"sagaTypeName,loadAssociations",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"equals,hashes,toString,access$100",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateFactory,aggregateType",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2300,access$2100,access$2200,access$1900,access$2400",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"upperBound,lowerBound,advancedTo,unwrap",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"findSagas,size",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"canConvert,registerConverter",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"lambda$and$97c94f44$1,matches",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getAggregateIdentifier,getType,getSequenceNumber",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"handle,prepareReset,supportsReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"advancedTo,getTokenForStream",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"canHandle,lambda$handle$0,handle",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"handle,lambda$handle$0,canHandle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"lambda$getProperty$0,createProperty,getProperty,getHandlerName",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"handle",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"name,lambda$hashes$0",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"queuedThreads,lock,isHeldBy",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"prepareReset,handle",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"openStream,sourceId",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"unexpectedEvents,lambda$unexpectedEvents$0",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$600,access$500",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$700",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,resolveReturnValue",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$600,access$500",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.Repository",6,"load,loadOrCreate,newInstance",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$resolveAssociation$0,lambda$findHandlerMethods$1",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$0,lambda$findSagas$1",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getType,getData,getContentType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"disposeIfUnused,checkForDeadlock",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getIndex,getGaps",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advancedTo",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$process$1,lambda$handle$0",2,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0,lambda$onMessageIngested$1",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"bytesFrom,convert",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
