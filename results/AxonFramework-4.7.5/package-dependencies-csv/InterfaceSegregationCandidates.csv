"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.messaging.ResultMessage",9,"isExceptional,exceptionResult",2,10,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp,getIdentifier",2,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber,getType",3,5,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getAggregateIdentifier,getSequenceNumber,getType",3,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"newInstance,withGapsTruncatedAt,getGaps,advanceTo,getIndex",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,getTrackingToken,split",3,2,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"getAggregateRoot,initSequence,initialize",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getAggregateIdentifier,getSequenceNumber",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"withTrackingToken,trackingToken",2,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",156,"subscribingEventProcessor,trackingEventProcessor,lambda$null$42,lambda$pooledStreamingEventProcessor$68,lambda$registerDeadLetterQueue$66,lambda$registerDeadLetterPolicy$67,lambda$registerTrackingEventProcessorConfiguration$64,lambda$registerTransactionManager$62,lambda$static$0,trackingEventProcessorConfig,lambda$registerTrackingEventProcessorConfiguration$63,lambda$null$18,defaultExecutor,lambda$null$35,registerTrackingEventProcessorConfiguration,lambda$null$33,lambda$null$26,lambda$null$11,lambda$null$19,lambda$null$41,lambda$pooledStreamingEventProcessor$69,lambda$null$36,pooledStreamingEventProcessor,lambda$null$40,lambda$null$31,lambda$registerRollbackConfiguration$61,annotatedProcessingGroupOfType,lambda$registerPooledStreamingEventProcessor$65,lambda$annotatedProcessingGroupOfType$70,lambda$null$32,lambda$new$13,lambda$new$1,lambda$registerSagaManagers$43,lambda$buildEventProcessor$46,deadLetterQueue,lambda$new$22,lambda$registerEventHandlerInvokers$34,rollbackConfiguration,deadLetterPolicy,lambda$usingSubscribingEventProcessors$54,lambda$deadLetteringInvoker$38,lambda$new$3,lambda$registerEventHandlerInvokers$30,lambda$registerListenerInvocationErrorHandler$50,messageMonitor,lambda$usingPooledStreamingEventProcessors$56,lambda$sagaConfigurations$48,lambda$initializeProcessors$27,buildEventProcessor,lambda$registerTrackingEventProcessor$52,initializeProcessors,lambda$new$12,lambda$registerEventHandler$49,lambda$new$2,lambda$new$15,lambda$selectProcessingGroupByType$29,lambda$registerTokenStore$53,lambda$registerTrackingEventProcessor$51,lambda$registerSubscribingEventProcessor$57,lambda$new$14,lambda$buildEventProcessor$44,simpleInvoker,registerEventProcessor,noSagaProcessorCustomization,errorHandler,tokenStore,lambda$registerEventHandlerInvokers$37,lambda$new$23,lambda$selectProcessingGroupByType$28,retrieveHandlerDefinition,lambda$new$16,lambda$new$10,lambda$new$24,lambda$new$17,lambda$new$25,processorNameForProcessingGroup,lambda$registerSequencingPolicy$60,lambda$new$7,lambda$new$20,lambda$eventProcessors$47,transactionManager,registerTrackingEventProcessor,defaultEventProcessor,lambda$new$4,lambda$new$6,lambda$deadLetteringInvoker$39,validateConfigInitialization,lambda$new$8,lambda$registerHandlerInterceptor$59,lambda$new$9,packageOfObject,lambda$usingTrackingEventProcessors$55,lambda$new$5,lambda$buildEventProcessor$45,selectProcessingGroupByType,registerEventHandlerInvokers,lambda$new$21,eventProcessors,lambda$registerErrorHandler$58,deadLetteringInvoker,registerSagaManagers,sequencingPolicy,listenerInvocationErrorHandler",103,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$null$31,lambda$invokeLifecycleHandlers$52,lambda$null$36,lambda$null$43,lambda$null$25,lambda$onStart$53,lambda$invokeLifecycleHandlers$51,lambda$null$32,lambda$static$0,lambda$onShutdown$54,lambda$null$35,lambda$null$12,lambda$null$17,lambda$null$46,invokeInitHandlers,lambda$jpaConfiguration$5,lambda$defaultQueryUpdateEmitter$14,verifyIdentifierFactory,defaultParameterResolverFactory,lambda$eventProcessing$28,lambda$jpaConfiguration$7,defaultDeadlineManager,defaultEventGateway,eventProcessing,lambda$registerHandlerDefinition$44,defaultCommandBus,registerQueryHandler,lambda$defaultParameterResolverFactory$15,registerModule,lambda$new$3,lambda$prepareMessageHandlerRegistrars$47,retrieveHandlerDefinition,lambda$new$2,lambda$defaultResourceInjector$19,defaultQueryBus,lambda$invokeInitHandlers$48,defaultQueryUpdateEmitter,prepareMessageHandlerRegistrars,lambda$defaultQueryBus$13,defaultComponent,registerComponent,registerCommandHandler,lambda$prepareModules$45,lambda$registerQueryHandler$34,defaultEventBus,lambda$defaultScopeAwareProvider$20,prepareModules,lambda$invokeShutdownHandlers$50,defaultSnapshotter,lambda$registerMessageHandler$40,lambda$registerCommandHandler$33,defaultQueryGateway,invokeShutdownHandlers,lambda$new$1,defaultCommandGateway,lambda$defaultCommandGateway$10,defaultSpanFactory,defaultUpcasterChain,defaultResourceInjector,lambda$defaultConfiguration$4,lambda$jpaConfiguration$9,lambda$invokeStartHandlers$49,invokeLifecycleHandlers,lambda$registerMessageHandler$41,lambda$defaultHandlerDefinition$16,lambda$configureMessageMonitor$29,lambda$defaultSnapshotter$26,lambda$defaultEventGateway$23,defaultConfiguration,lambda$defaultEventBus$22,lambda$defaultQueryGateway$11,defaultScopeAwareProvider,lambda$registerMessageHandler$38,lambda$defaultSerializer$24,lambda$jpaConfiguration$6,lambda$defaultDeadlineManager$21,lambda$eventProcessing$27,lambda$configureEmbeddedEventStore$42,jpaConfiguration,lambda$defaultCommandBus$18,lambda$registerCommandHandler$30,defaultHandlerDefinition,lambda$registerMessageHandler$39,lambda$registerQueryHandler$37,defaultSerializer,lambda$jpaConfiguration$8",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"aggregateModel,assertValidWorkingAggregateState,ensureValuesEqual,failIllegalStateChange,lambda$buildResultValidator$9,lambda$null$3,lambda$null$5,detectIllegalStateChanges,andGivenCurrentTime,given,finalizeConfiguration,lambda$whenInvoking$6,whenTimeElapses,clearGivenWhenState,executeAtSimulatedTime,registerRepository,getHandlerDefinition,lambda$andGivenCommands$1,registerCommandHandler,andGiven,registerRepositoryProvider,lambda$whenConstructing$4,when,registerFieldFilter,ensureRepositoryConfiguration,useStateStorage,getParameterResolverFactory,lambda$when$8,handleDeadline,buildResultValidator,getRepositoryProvider,givenCommands,currentTime,lambda$givenState$0,lambda$when$7,whenTimeAdvancesTo,andGivenCommands,lambda$when$2,registerAggregateCommandHandlers",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectExceptionMessage,expectNoScheduledDeadlineMatching,expectException,lambda$expectNoScheduledDeadlineMatching$5,recordException,verifyMetaDataEquality,verifyPayloadEquality,expectTriggeredDeadlinesMatching,lambda$expectNoScheduledDeadlineMatching$3,expectTriggeredDeadlines,expectResultMessageMatching,lambda$expectNoScheduledDeadlineWithName$2,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$4,lambda$expectScheduledDeadlineWithName$1,expectExceptionDetails,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectScheduledDeadlineWithName$0,expectEvents,expectResultMessagePayload",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"expectTriggeredDeadlines,lambda$expectNoScheduledDeadlineWithName$3,lambda$expectNoScheduledDeadlineWithName$7,lambda$expectScheduledDeadlineWithName$2,expectNoScheduledDeadlineMatching,expectNoScheduledEventMatching,expectScheduledDeadlineMatching,expectScheduledEventMatching,lambda$registerStartRecordingCallback$0,expectTriggeredDeadlinesMatching,lambda$expectNoScheduledDeadlineWithName$5,lambda$expectNoScheduledDeadlineMatching$6,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineMatching$4",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$300,access$900,defaultComponent,access$200,access$500,access$1100,access$400,access$700,access$1200,access$1500,access$1400,invokeShutdownHandlers,access$1000,access$800,access$1300,invokeStartHandlers,access$600",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"isEarlierPhaseDuringStartUp,registerLifecycleHandler,isEarlierPhaseDuringShutdown,lambda$getComponent$1,lambda$null$0,lambda$registerLifecycleHandler$2",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"registerStartRecordingCallback,startRecording",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"timeCorrectedEventMessage,registerCommandGateway,getCommandBus,currentTime,ensureSagaResourcesInitialized,lambda$handleInSaga$1,givenAggregate,registerFieldFilter,lambda$null$0,getPublisherFor,handleInSaga,handleDeadline,getParameterResolverFactory,registerResource,getResourceInjector,getHandlerDefinition",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"recordException,assertValidRecording",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$800,access$900,access$700,access$602,access$600",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"phase,delegateAfterCommitToParent,lambda$start$1,changePhase,notifyHandlers,commitAsRoot,lambda$rollback$8,lambda$null$2,lambda$start$3,addHandler,commitAsNested,lambda$rollback$7,lambda$commit$4,setRollbackCause,lambda$commitAsNested$6,lambda$commit$5,lambda$start$0,setPhase,onRollback",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"resetTokens,lambda$resetTokens$10,lambda$singleStatusUpdater$12,lambda$null$11,lambda$null$8,lambda$new$0,spawnWorker,lambda$null$9,shutdownAsync,lambda$null$7,lambda$calculateIdentifier$4,lambda$new$2,lambda$null$1,lambda$statusUpdater$13,statusUpdater,start,lambda$getTokenStoreIdentifier$3,calculateIdentifier,releaseSegment,singleStatusUpdater,lambda$resetTokens$5,supportsReset,lambda$resetTokens$6,isRunning",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"processLetterAndFollowing,lambda$size$15,lambda$toLetter$7,lambda$deadLetterSequence$5,lambda$enqueue$2,lambda$enqueue$0,lambda$enqueue$3,lambda$enqueue$1,amountOfSequences,entityManager,toLetter,lambda$amountOfSequences$16,getNextIndexForSequence,claimDeadLetter,lambda$evict$4,evict,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$sequenceSize$14,getProcessingStartedLimit,findFirstLetterOfEachAvailableSequence,requeue,isFull,getMaxIndexForSequence,lambda$findNextDeadLetter$11,lambda$clear$13,toStringSequenceIdentifier,lambda$claimDeadLetter$12,lambda$processLetterAndFollowing$9,sequenceSize,findNextDeadLetter,lambda$toLetter$8,lambda$getMaxIndexForSequence$17,lambda$deadLetters$6",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$toLetter$7,requeue,claimDeadLetter,lambda$evict$4,processLetterAndFollowing,lambda$processLetterAndFollowing$9,lambda$getMaxIndexForSequence$17,lambda$sequenceSize$14,lambda$toLetter$8,sequenceSize,getProcessingStartedLimit,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$clear$13,getMaxIndexForSequence,lambda$size$15,amountOfSequences,evict,lambda$deadLetters$6,findFirstLetterOfEachAvailableSequence,lambda$enqueue$3,toStringSequenceIdentifier,lambda$claimDeadLetter$12,lambda$enqueue$0,lambda$findNextDeadLetter$11,lambda$enqueue$2,findNextDeadLetter,lambda$deadLetterSequence$5,getNextIndexForSequence,entityManager,lambda$enqueue$1,isFull,toLetter,lambda$amountOfSequences$16",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"doEmit,lambda$completeExceptionally$10,lambda$null$7,lambda$emit$8,lambda$complete$9,lambda$doEmit$14,lambda$doCompleteExceptionally$19,intercept,lambda$emit$5,lambda$doComplete$17,lambda$registerDispatchInterceptor$11,emitError,doCompleteExceptionally,lambda$null$6,lambda$payloadMatchesQueryResponseType$15,lambda$doEmit$12,runOnAfterCommitOrNow,lambda$queryUpdateHandlerRegistered$0,lambda$registerUpdateHandler$4,lambda$registerUpdateHandler$3,lambda$registerUpdateHandler$1,lambda$registerUpdateHandler$2,payloadMatchesQueryResponseType,lambda$null$13,inStartedPhaseOfUnitOfWork,lambda$null$16,doComplete,lambda$null$18,lambda$runOnAfterCommitOrNow$21,lambda$null$20",31,1,""
"org.axonframework.test.saga.SagaTestFixture",37,"currentTime,handleInSaga,access$300",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$doApply$11,applyMessageOrPayload,lambda$null$8,lambda$findHandlerAndHandleCommand$10,doApply,findHandlerAndHandleCommand,createMessage,handle,lambda$andThenApply$13,andThen,lambda$findHandlerAndHandleCommand$9,lambda$handle$7,lambda$createMessage$12,lambda$handle$6,lambda$execute$2,lambda$handle$4,registerRoot,initSequence,initialize,rootType,publish,lambda$registerRoot$0,lambda$invoke$1,lambda$handle$5,publishOnEventBus,lambda$handle$3",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$findModules$0,getComponent,lambda$aggregateConfiguration$5,getModules,findModules,lambda$findModules$1,lambda$resourceInjector$2,aggregateConfiguration,lambda$eventProcessingConfiguration$4,lambda$eventProcessingConfiguration$3,lambda$aggregateConfiguration$6,eventBus,lambda$aggregateConfiguration$7,lambda$getComponent$8",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$2200,access$1400,access$2000,access$1200,access$900,access$800,access$600,access$1000,getState,access$1600,access$1500,access$1700,access$2100,access$700,doSleepFor,access$1300,access$1800,access$1100",18,1,""
"org.axonframework.config.Configurer",29,"registerCommandHandler,configureMessageMonitor,lambda$configureMessageMonitor$1,configureAggregate,registerModule,registerQueryHandler,registerComponent,buildConfiguration,lambda$configureMessageMonitor$0,eventProcessing",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1400,access$1200,access$900,access$800,processingLoop,access$1000,getState,access$1500,access$1300,access$1100",10,1,""
"org.axonframework.config.Configuration",27,"parameterResolverFactory,handlerDefinition,spanFactory,messageMonitor,eventBus,getComponent,correlationDataProviders",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$600,access$700",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"releaseSegment,access$2000,access$800,access$1000",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$2000,access$800,access$1000",3,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$null$3,handle,lambda$handle$6,getAssociationValues,canHandle,lambda$invoke$1,lambda$canHandle$4,lambda$execute$2,lambda$handle$8,lambda$new$0,lambda$null$5,lambda$handle$7",13,1,""
"org.axonframework.config.Configuration",25,"messageSerializer,getComponent,parameterResolverFactory,scopeAwareProvider,handlerDefinition,spanFactory,eventStore,upcasterChain,findModules,queryBus,eventSerializer,commandBus,messageMonitor,repository,eventBus,serializer,snapshotFilter,correlationDataProviders",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"isFull,requeue,lambda$process$3,builder,lambda$enqueue$0,getLastTouchedSequence,lambda$process$5,lambda$process$6,contains,lambda$clear$7,lambda$requeue$2,lambda$evict$1,lambda$process$4,evict,maximumSequenceSizeReached,maximumNumberOfSequencesReached,toIdentifier",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$query$2,lambda$streamingQuery$3,lambda$query$1,lambda$getSubscriptionQueryResult$6,getSubscriptionQueryResult,processInterceptors,lambda$getSubscriptionQueryResult$5,getSubscriptionQueryMessage,lambda$getSubscriptionQueryResult$7,lambda$query$0,lambda$streamingQuery$4,lambda$registerDispatchInterceptor$8",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"getSegment,isErrorState,isCaughtUp,markError,caughtUp,advancedTo,unmarkError",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"lambda$schedulePayload$66ef0dda$1,schedulePayload,lambda$publishEventMessage$0,publishWithRevision,schedule,schedulePayloadAndMetadata,lambda$schedulePayload$edc2443f$1,lambda$schedulePayloadAndMetadata$3b5ac046$1,createMessage,lambda$schedulePayloadAndMetadata$efde5fa1$1,shutdown,publish,publishEventMessage",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"loadToken,initializeTokenSegments,lambda$fetchAvailableSegments$2,fetchSegments,validateSegment,getConfig,lambda$fetchAvailableSegments$1,lambda$retrieveStorageIdentifier$3,lambda$fetchSegments$0",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"initializeTokenSegments,validateSegment,lambda$fetchSegments$0,loadToken,fetchSegments,getConfig,lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$1,lambda$fetchAvailableSegments$2",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"advanceToNextTrigger,lambda$registerDispatchInterceptor$3,lambda$cancelSchedule$0,processDispatchInterceptors,lambda$consumeDeadline$5,schedule,lambda$registerHandlerInterceptor$4,lambda$cancelAll$1,lambda$cancelAllWithinScope$2,advanceTimeTo,consumeDeadline",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"context,createReplayToken,isReplay,replayContext,advancedTo,lambda$getTokenAtReset$2,getTokenAtReset,lambda$isReplay$0,lambda$replayContext$1",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$registerDispatchInterceptor$4,lambda$publish$0,injectAggregateIdentifier,openStream,lambda$doAppendEvents$2,doAppendEvents,lambda$doAppendEvents$1,lambda$subscribe$3",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"initializeInvokerThreads,lambda$initializePublisherThreads$0,createRepository,lambda$registerHandlerInterceptor$7,lambda$doDispatch$3,initializePublisherThreads,lambda$subscribe$5,lambda$subscribe$4,dispatch,lambda$initializeInvokerThreads$1,lambda$registerDispatchInterceptor$6,lambda$dispatch$2,doDispatch",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"next,nextSequenceNumber,initActiveIfRequired",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"getError,isMerging,getSegment,isErrorState,mergeCompletedPosition,getTrackingToken,isCaughtUp,getResetPosition,split,getCurrentPosition,isReplaying",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState,markError,advancedTo",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"getSnapshotSerializer,getEventSerializer,isFirstDomainEvent,lambda$readSnapshot$0,readSnapshotData,readEventData,storeSnapshot,appendEvents,buildExceptionMessage,lambda$readSnapshot$1",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"next,lambda$getLastSequenceNumber$0,hasNext",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"peekGlobalStream,peek,lastToken,lambda$closePrivateStream$0,behindGlobalCache,nextNode,closePrivateStream,nextAvailable,peekPrivateStream,stopTailingGlobalStream",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"behindGlobalCache,lastToken,peek,lambda$closePrivateStream$0,nextAvailable,peekPrivateStream,nextNode,closePrivateStream,stopTailingGlobalStream,peekGlobalStream",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"withMetaData,getPayload,isExceptional,andMetaData,findExceptionResult",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getAssociationValues,getSagaIdentifier,isActive,root",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getScheduledDeadlines,getTriggeredDeadlines,getCurrentDateTime",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$makeCurrent$0,lambda$recordException$1",2,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"initializeTokenSegments,lambda$fetchSegments$1,fetchSegments,lambda$storeToken$0",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"lambda$stagedDomainEventMessages$0,lambda$readEvents$3,stagedDomainEventMessages,handleSnapshotReadingError,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$2",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"next,readNext",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$000,access$100",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$3,lambda$handle$0,lambda$handle$2,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"lambda$new$0,queryResultType,unwrapType,upperBound",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$getSpanMessage$3,lambda$createInternalSpan$8,lambda$getSpanMessage$4,lambda$createRootTrace$0,getSpanMessage,lambda$createDispatchSpan$2,lambda$null$5,lambda$createInternalSpan$7,lambda$createHandlerSpan$1,lambda$null$6",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"purgeItems,lambda$removeAll$2,lambda$containsKey$3,lambda$get$1,lambda$computeIfPresent$4,lambda$registerCacheEntryListener$0",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"lambda$eventProcessor$0,initialize,lambda$initialize$1,lambda$initialize$2,ensureInitialized,processingGroup,lambda$ensureInitialized$3",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$registerHandlerInterceptor$2,dispatchInterceptors,lambda$registerDispatchInterceptor$1,lambda$runOnPrepareCommitOrNow$0",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"lambda$mergePosition$1,mergePosition,lambda$mergePosition$0,doAdvance",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"lambda$new$0,peekForMessages,lambda$skipMessagesWithPayloadTypeOf$3,lambda$peekForMessages$2,lambda$setOnAvailableCallback$5,lambda$setOnAvailableCallback$4,doConsumeNext,skipMessagesWithPayloadTypeOf,messageSource,lambda$doConsumeNext$1,nextAvailable",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,getInternalTrackingToken",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"parameterResolverFactory,handlerDefinition,spanFactory,eventStore,commandBus,repository,eventBus,getComponent",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll,deadlineNameMatch",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$null$2,getName,getSpanName,lambda$null$1,lambda$processInUnitOfWork$3,processInUnitOfWork,lambda$registerHandlerInterceptor$0",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"upperSegmentToken,mergePosition,lowerSegmentToken,position,isMergeInProgress",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"lowerBound,getTokenAtReset,createReplayToken,position,isReplay",6,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$new$0,lambda$new$1,lambda$handle$3,lambda$canHandle$2",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"andMetaData,withMetaData,optionalExceptionResult,isExceptional",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"doApply,publish,publishOnEventBus",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asNullableResponseMessage,asResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType,getData",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"routingKey,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$prepareReset$4,lambda$canHandleType$2,lambda$handle$0,lambda$canHandle$1,lambda$canHandleType$3,canHandle,prepareReset,handle",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"withMetaData,getSequenceNumber,getAggregateIdentifier,andMetaData,getType",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"andMetaData,withTrackingToken,withMetaData,trackingToken",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"hasNextAvailable,access$300,close,peek,skipMessagesWithPayloadTypeOf,setOnAvailableCallback",7,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getId,getSequenceIdentifier,getIndex",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getId,getSequenceIdentifier,getIndex",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"typeMatches,parametersMatch,resolveParameterValues,checkAndRethrowForExceptionOrError",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"handle,canHandle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isAssignableFrom,isWildcardTypeWithMatchingUpperBound,isParameterizedTypeOfExpectedType,isGenericAssignableFrom,isWildcardType,isGenericArrayType,isTypeVariable,isArray,isParameterizedType",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"declaredType,getVersion,type",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"version,initialize,isDeleted,identifier",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"send,access$300,access$200,load,newInstance,access$500,getAggregate",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createInternalSpan$4,lambda$createRootTrace$0,lambda$createHandlerSpan$1,lambda$createDispatchSpan$2,lambda$createInternalSpan$3,lambda$registerSpanAttributeProvider$5",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"dispatch,shutdownDispatching,updateFilter,localSegment,lambda$subscribe$0,disconnect,lambda$registerDispatchInterceptor$1,intercept",8,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"lambda$asDeadlineMessage$0,withMetaData,asDeadlineMessage,lambda$asDeadlineMessage$1,andMetaData",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"lambda$performReset$2,canHandle,delegates,lambda$canHandle$0,performReset,flatten,lambda$canHandleType$1",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"isExceptional,optionalExceptionResult,andMetaData,exceptionDetails,withMetaData",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$1,lambda$new$0",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"types,type",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"getSagaTypeName,storeAssociationValue,sagaEntryEntityName,serializedObjectType,addNamedQueriesTo,loadAssociationValues,createSagaEntry,serializedSagaAsString,removeAssociationValue",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"serializedObjectType,serializedSagaAsString,getSagaTypeName,storeAssociationValue,addNamedQueriesTo,removeAssociationValue,sagaEntryEntityName,createSagaEntry,loadAssociationValues",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"withMetaData,getResponseType,andMetaData,getQueryName",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"parameterResolverFactory,handlerDefinition,spanFactory,eventProcessingConfiguration,resourceInjector",5,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"trackingToken,withTrackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"upperSegmentToken,isLowerSegmentAdvanced,lowerSegmentToken,isUpperSegmentAdvanced",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"performReset,sequenceIdentifier,invokeHandlers,sequencingPolicyMatchesSegment,detectList,lambda$new$0,hasHandler,lambda$canHandleType$1",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$1,lambda$readEvents$0",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"lambda$new$0,cause,enqueuedAt,message,diagnostics",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$addCachedAssociations$3,lambda$updateSaga$4,lambda$findSagas$0,addCachedAssociations,lambda$deleteSaga$1,lambda$removeAssociationValueFromCache$2,removeAssociationValueFromCache,cacheKey",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$load$3,load,lambda$load$2,canResolve,lambda$getAggregate$4,lambda$loadOrCreate$0,validateIdentifier,lambda$newInstance$1",8,1,""
"org.axonframework.test.saga.EventValidator",13,"assertPublishedEventsMatching,lambda$startRecording$0,handle,unwrapEvent,createEqualToMatchers",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"getCommandName,withMetaData,andMetaData",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"canResolve,removeFromCache,load,newInstance,lambda$load$0",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"withMetaData,getTimestamp,andMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"buildJobDetail,buildTrigger,shutdown,lambda$schedule$0,initialize,schedule,lambda$cancelSchedule$1",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"lambda$readEvents$0,readEvents",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"version,getWrappedAggregate,isLockHeld",3,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"advanceTimeBy,getCurrentDateTime,initializeAt,advanceTimeTo",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"builder,subscribe,dispatch,registerHandlerInterceptor,registerDispatchInterceptor",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"asRuntime,lambda$send$0,send",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"load,newInstance,loadOrCreate",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"send,load,lambda$send$1,lambda$send$0,canResolve,lambda$send$2",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.messaging.ResultMessage",11,"isExceptional,exceptionResult",2,1,""
"org.axonframework.queryhandling.QueryGateway",11,"scatterGather,query,subscriptionQuery,streamingQuery",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"andMetaData,withMetaData,getQueryName",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"typeIdentifierOf,registerConverters,typeForClass,classForType,getConverter,doDeserialize,doSerialize,revisionOf",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"resolveClassName,classForType,registerConverters,getWriter,getReader,typeForClass,builder",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"newInstance,canResolve,load,lambda$newInstance$0",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"doRegisterListener,createListenerAdapter,lambda$registerCacheEntryListener$0",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"snapshotFilter,aggregateFactory,aggregateType,repository",4,1,""
"org.axonframework.config.Configuration",10,"findModules,eventProcessingConfiguration",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored,canHandle,processInUnitOfWork",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"performReset,sequenceIdentifier,invokeHandlers,sequencingPolicyMatchesSegment,eventHandlers",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"lambda$isReplaying$0,resetTokens,processingStatus",3,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.MessageDecorator",10,"describeType,getMetaData,getIdentifier,getPayload,describeTo",5,1,""
"org.axonframework.messaging.MessageDecorator",10,"serializePayload,getPayload",2,1,""
"org.axonframework.messaging.ResultMessage",10,"isExceptional,exceptionResult",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"contains,mergedWith,getAll,isEmpty,get",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"revisionOf,getSerializedType,classForType",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,getGlobalIndex,next",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,lambda$covers$2,compareTo,lambda$upperBound$1,lambda$lowerBound$0",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTailToken,createTokenSince,createTokenAt,createHeadToken,sourceId",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"alterToken,nextAvailable",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$300,access$500,access$400,access$600",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"schedule,shutdown",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"prefixedKey,lambda$constructHandlerAttributesFor$1,lambda$null$0,constructHandlerAttributesFor",4,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"loadAssociations,sagaTypeName",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"hashes,equals,access$100,toString",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateFactory,aggregateType",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"cancelAllWithinScope,schedule",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2400,access$2200,access$2100,access$2300,access$1900",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"advancedTo,upperBound,unwrap,lowerBound",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"findSagas,size",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"registerConverter,canConvert",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getAggregateIdentifier,getType,getSequenceNumber",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"handle,prepareReset,supportsReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"advancedTo,getTokenForStream",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"canHandle,lambda$handle$0,handle",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"lambda$handle$0,canHandle,handle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"getProperty,lambda$getProperty$0,createProperty,getHandlerName",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"isHeldBy,queuedThreads,lock",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"handle,prepareReset",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"openStream,sourceId",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"lambda$unexpectedEvents$0,unexpectedEvents",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600,access$400",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$700,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,resolveReturnValue",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.Repository",6,"load,newInstance,loadOrCreate",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$resolveAssociation$0,lambda$findHandlerMethods$1",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$1,lambda$findSagas$0",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getType,getData,getContentType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"disposeIfUnused,checkForDeadlock",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getGaps,getIndex",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$handle$0,lambda$process$1",2,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0,lambda$onMessageIngested$1",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"bytesFrom,convert",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
