"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.messaging.ResultMessage",9,"exceptionResult,isExceptional",2,10,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier,getTimestamp",2,8,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber,getType,getAggregateIdentifier",3,5,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber,getType,getAggregateIdentifier",3,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber,getAggregateIdentifier",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"newInstance,withGapsTruncatedAt,advanceTo,getGaps,getIndex",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,split,getTrackingToken",3,2,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"getAggregateRoot,initSequence,initialize",4,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getSequenceNumber,getAggregateIdentifier",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"withTrackingToken,trackingToken",2,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName,getResponseType",2,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",156,"subscribingEventProcessor,trackingEventProcessor,lambda$null$42,lambda$pooledStreamingEventProcessor$68,lambda$registerDeadLetterQueue$66,lambda$registerDeadLetterPolicy$67,lambda$registerTrackingEventProcessorConfiguration$64,lambda$registerTransactionManager$62,lambda$static$0,trackingEventProcessorConfig,lambda$registerTrackingEventProcessorConfiguration$63,lambda$null$18,defaultExecutor,lambda$null$35,registerTrackingEventProcessorConfiguration,lambda$null$33,lambda$null$26,lambda$null$11,lambda$null$19,lambda$null$41,lambda$pooledStreamingEventProcessor$69,lambda$null$36,pooledStreamingEventProcessor,lambda$null$40,lambda$null$31,lambda$registerRollbackConfiguration$61,annotatedProcessingGroupOfType,lambda$registerPooledStreamingEventProcessor$65,lambda$annotatedProcessingGroupOfType$70,lambda$null$32,lambda$new$13,lambda$new$1,lambda$registerSagaManagers$43,lambda$buildEventProcessor$46,deadLetterQueue,lambda$new$22,lambda$registerEventHandlerInvokers$34,rollbackConfiguration,deadLetterPolicy,lambda$usingSubscribingEventProcessors$54,lambda$deadLetteringInvoker$38,lambda$new$3,lambda$registerEventHandlerInvokers$30,lambda$registerListenerInvocationErrorHandler$50,messageMonitor,lambda$usingPooledStreamingEventProcessors$56,lambda$sagaConfigurations$48,lambda$initializeProcessors$27,buildEventProcessor,lambda$registerTrackingEventProcessor$52,initializeProcessors,lambda$new$12,lambda$registerEventHandler$49,lambda$new$2,lambda$new$15,lambda$selectProcessingGroupByType$29,lambda$registerTokenStore$53,lambda$registerTrackingEventProcessor$51,lambda$registerSubscribingEventProcessor$57,lambda$new$14,lambda$buildEventProcessor$44,simpleInvoker,registerEventProcessor,noSagaProcessorCustomization,errorHandler,tokenStore,lambda$registerEventHandlerInvokers$37,lambda$new$23,lambda$selectProcessingGroupByType$28,retrieveHandlerDefinition,lambda$new$16,lambda$new$10,lambda$new$24,lambda$new$17,lambda$new$25,processorNameForProcessingGroup,lambda$registerSequencingPolicy$60,lambda$new$7,lambda$new$20,lambda$eventProcessors$47,transactionManager,registerTrackingEventProcessor,defaultEventProcessor,lambda$new$4,lambda$new$6,lambda$deadLetteringInvoker$39,validateConfigInitialization,lambda$new$8,lambda$registerHandlerInterceptor$59,lambda$new$9,packageOfObject,lambda$usingTrackingEventProcessors$55,lambda$new$5,lambda$buildEventProcessor$45,selectProcessingGroupByType,registerEventHandlerInvokers,lambda$new$21,eventProcessors,lambda$registerErrorHandler$58,deadLetteringInvoker,registerSagaManagers,sequencingPolicy,listenerInvocationErrorHandler",103,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$null$31,lambda$invokeLifecycleHandlers$52,lambda$null$36,lambda$null$43,lambda$null$25,lambda$onStart$53,lambda$invokeLifecycleHandlers$51,lambda$null$32,lambda$static$0,lambda$onShutdown$54,lambda$null$35,lambda$null$12,lambda$null$17,lambda$null$46,invokeInitHandlers,lambda$jpaConfiguration$5,lambda$defaultQueryUpdateEmitter$14,verifyIdentifierFactory,defaultParameterResolverFactory,lambda$eventProcessing$28,lambda$jpaConfiguration$7,defaultDeadlineManager,defaultEventGateway,eventProcessing,lambda$registerHandlerDefinition$44,defaultCommandBus,registerQueryHandler,lambda$defaultParameterResolverFactory$15,registerModule,lambda$new$3,lambda$prepareMessageHandlerRegistrars$47,retrieveHandlerDefinition,lambda$new$2,lambda$defaultResourceInjector$19,defaultQueryBus,lambda$invokeInitHandlers$48,defaultQueryUpdateEmitter,prepareMessageHandlerRegistrars,lambda$defaultQueryBus$13,defaultComponent,registerComponent,registerCommandHandler,lambda$prepareModules$45,lambda$registerQueryHandler$34,defaultEventBus,lambda$defaultScopeAwareProvider$20,prepareModules,lambda$invokeShutdownHandlers$50,defaultSnapshotter,lambda$registerMessageHandler$40,lambda$registerCommandHandler$33,defaultQueryGateway,invokeShutdownHandlers,lambda$new$1,defaultCommandGateway,lambda$defaultCommandGateway$10,defaultSpanFactory,defaultUpcasterChain,defaultResourceInjector,lambda$defaultConfiguration$4,lambda$jpaConfiguration$9,lambda$invokeStartHandlers$49,invokeLifecycleHandlers,lambda$registerMessageHandler$41,lambda$defaultHandlerDefinition$16,lambda$configureMessageMonitor$29,lambda$defaultSnapshotter$26,lambda$defaultEventGateway$23,defaultConfiguration,lambda$defaultEventBus$22,lambda$defaultQueryGateway$11,defaultScopeAwareProvider,lambda$registerMessageHandler$38,lambda$defaultSerializer$24,lambda$jpaConfiguration$6,lambda$defaultDeadlineManager$21,lambda$eventProcessing$27,lambda$configureEmbeddedEventStore$42,jpaConfiguration,lambda$defaultCommandBus$18,lambda$registerCommandHandler$30,defaultHandlerDefinition,lambda$registerMessageHandler$39,lambda$registerQueryHandler$37,defaultSerializer,lambda$jpaConfiguration$8",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"registerAggregateCommandHandlers,lambda$null$5,aggregateModel,ensureValuesEqual,failIllegalStateChange,assertValidWorkingAggregateState,lambda$null$3,lambda$buildResultValidator$9,getParameterResolverFactory,andGivenCurrentTime,given,handleDeadline,givenCommands,lambda$andGivenCommands$1,when,lambda$whenInvoking$6,clearGivenWhenState,lambda$whenConstructing$4,getHandlerDefinition,useStateStorage,buildResultValidator,lambda$when$7,detectIllegalStateChanges,registerRepository,whenTimeAdvancesTo,registerRepositoryProvider,andGiven,lambda$when$8,lambda$givenState$0,andGivenCommands,registerCommandHandler,ensureRepositoryConfiguration,whenTimeElapses,registerFieldFilter,finalizeConfiguration,currentTime,executeAtSimulatedTime,getRepositoryProvider,lambda$when$2",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"recordException,lambda$expectScheduledDeadlineWithName$1,expectScheduledDeadlineMatching,expectNoScheduledDeadlineMatching,expectTriggeredDeadlinesMatching,expectResultMessageMatching,verifyPayloadEquality,expectExceptionMessage,lambda$expectNoScheduledDeadlineWithName$6,expectExceptionDetails,expectTriggeredDeadlines,lambda$expectNoScheduledDeadlineMatching$5,expectEvents,expectException,lambda$expectScheduledDeadlineWithName$0,expectResultMessagePayload,verifyMetaDataEquality,lambda$expectNoScheduledDeadlineWithName$2,lambda$expectNoScheduledDeadlineMatching$3,lambda$expectNoScheduledDeadlineWithName$4",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"expectNoScheduledEventMatching,expectScheduledEventMatching,lambda$registerStartRecordingCallback$0,lambda$expectNoScheduledDeadlineMatching$6,expectTriggeredDeadlinesMatching,lambda$expectNoScheduledDeadlineWithName$5,expectScheduledDeadlineMatching,lambda$expectScheduledDeadlineWithName$2,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$4,lambda$expectNoScheduledDeadlineWithName$3,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineWithName$7,expectTriggeredDeadlines",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$300,access$900,defaultComponent,access$200,access$500,access$1100,access$400,access$700,access$1200,access$1500,access$1400,invokeShutdownHandlers,access$1000,access$800,access$1300,invokeStartHandlers,access$600",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"isEarlierPhaseDuringStartUp,registerLifecycleHandler,isEarlierPhaseDuringShutdown,lambda$getComponent$1,lambda$null$0,lambda$registerLifecycleHandler$2",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"startRecording,registerStartRecordingCallback",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"ensureSagaResourcesInitialized,givenAggregate,getCommandBus,timeCorrectedEventMessage,lambda$null$0,getHandlerDefinition,getPublisherFor,handleDeadline,registerCommandGateway,registerFieldFilter,registerResource,handleInSaga,getParameterResolverFactory,currentTime,getResourceInjector,lambda$handleInSaga$1",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"recordException,assertValidRecording",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$900,access$800,access$600,access$602,access$700",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"lambda$rollback$7,lambda$commit$5,delegateAfterCommitToParent,lambda$null$2,lambda$commit$4,lambda$rollback$8,lambda$start$3,commitAsNested,changePhase,notifyHandlers,lambda$start$0,onRollback,commitAsRoot,setPhase,lambda$commitAsNested$6,setRollbackCause,lambda$start$1,phase,addHandler",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"lambda$calculateIdentifier$4,lambda$new$0,lambda$resetTokens$10,singleStatusUpdater,lambda$null$1,resetTokens,lambda$resetTokens$6,lambda$singleStatusUpdater$12,start,lambda$statusUpdater$13,lambda$null$8,calculateIdentifier,lambda$null$11,releaseSegment,lambda$null$9,lambda$new$2,lambda$resetTokens$5,shutdownAsync,spawnWorker,lambda$getTokenStoreIdentifier$3,lambda$null$7,supportsReset,isRunning,statusUpdater",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"lambda$toLetter$8,lambda$enqueue$3,toStringSequenceIdentifier,amountOfSequences,lambda$deadLetterSequence$5,lambda$enqueue$0,lambda$getMaxIndexForSequence$17,isFull,findNextDeadLetter,lambda$size$15,requeue,lambda$enqueue$1,lambda$deadLetters$6,entityManager,processLetterAndFollowing,lambda$amountOfSequences$16,lambda$clear$13,findFirstLetterOfEachAvailableSequence,lambda$processLetterAndFollowing$9,lambda$evict$4,lambda$enqueue$2,getNextIndexForSequence,lambda$findNextDeadLetter$11,lambda$claimDeadLetter$12,getProcessingStartedLimit,toLetter,lambda$toLetter$7,claimDeadLetter,evict,lambda$sequenceSize$14,lambda$findFirstLetterOfEachAvailableSequence$10,sequenceSize,getMaxIndexForSequence",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$size$15,lambda$amountOfSequences$16,lambda$sequenceSize$14,lambda$enqueue$1,claimDeadLetter,lambda$processLetterAndFollowing$9,evict,lambda$getMaxIndexForSequence$17,findNextDeadLetter,getProcessingStartedLimit,lambda$enqueue$2,lambda$deadLetters$6,lambda$findFirstLetterOfEachAvailableSequence$10,sequenceSize,toLetter,isFull,toStringSequenceIdentifier,lambda$enqueue$3,lambda$findNextDeadLetter$11,amountOfSequences,lambda$toLetter$7,getNextIndexForSequence,lambda$claimDeadLetter$12,getMaxIndexForSequence,lambda$evict$4,findFirstLetterOfEachAvailableSequence,lambda$enqueue$0,requeue,lambda$deadLetterSequence$5,lambda$toLetter$8,entityManager,lambda$clear$13,processLetterAndFollowing",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"emitError,lambda$completeExceptionally$10,lambda$null$16,lambda$null$13,lambda$doCompleteExceptionally$19,lambda$registerDispatchInterceptor$11,doEmit,lambda$payloadMatchesQueryResponseType$15,lambda$null$18,doCompleteExceptionally,lambda$doEmit$14,lambda$doComplete$17,doComplete,lambda$doEmit$12,payloadMatchesQueryResponseType,lambda$null$6,inStartedPhaseOfUnitOfWork,lambda$registerUpdateHandler$4,lambda$queryUpdateHandlerRegistered$0,lambda$registerUpdateHandler$2,lambda$registerUpdateHandler$1,lambda$registerUpdateHandler$3,runOnAfterCommitOrNow,lambda$runOnAfterCommitOrNow$21,lambda$null$7,lambda$emit$8,lambda$null$20,lambda$complete$9,lambda$emit$5,intercept",31,1,""
"org.axonframework.test.saga.SagaTestFixture",37,"access$300,handleInSaga,currentTime",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$doApply$11,applyMessageOrPayload,lambda$null$8,lambda$findHandlerAndHandleCommand$10,doApply,findHandlerAndHandleCommand,createMessage,handle,lambda$andThenApply$13,andThen,lambda$findHandlerAndHandleCommand$9,lambda$handle$7,lambda$createMessage$12,lambda$handle$6,lambda$execute$2,lambda$handle$4,registerRoot,initSequence,initialize,rootType,publish,lambda$registerRoot$0,lambda$invoke$1,lambda$handle$5,publishOnEventBus,lambda$handle$3",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$findModules$0,getComponent,lambda$aggregateConfiguration$5,getModules,findModules,lambda$findModules$1,lambda$resourceInjector$2,aggregateConfiguration,lambda$eventProcessingConfiguration$4,lambda$eventProcessingConfiguration$3,lambda$aggregateConfiguration$6,eventBus,lambda$aggregateConfiguration$7,lambda$getComponent$8",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$700,access$1600,access$1800,access$600,doSleepFor,getState,access$1700,access$800,access$1500,access$1100,access$1000,access$900,access$2000,access$1200,access$2100,access$1300,access$2200,access$1400",18,1,""
"org.axonframework.config.Configurer",29,"registerCommandHandler,configureMessageMonitor,lambda$configureMessageMonitor$1,configureAggregate,registerModule,registerQueryHandler,registerComponent,buildConfiguration,lambda$configureMessageMonitor$0,eventProcessing",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"processingLoop,getState,access$800,access$1500,access$1100,access$1000,access$900,access$1200,access$1300,access$1400",10,1,""
"org.axonframework.config.Configuration",27,"parameterResolverFactory,handlerDefinition,spanFactory,messageMonitor,eventBus,getComponent,correlationDataProviders",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$700,access$600",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"releaseSegment,access$800,access$1000,access$2000",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$800,access$1000,access$2000",3,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$null$3,handle,lambda$handle$6,getAssociationValues,canHandle,lambda$invoke$1,lambda$canHandle$4,lambda$execute$2,lambda$handle$8,lambda$new$0,lambda$null$5,lambda$handle$7",13,1,""
"org.axonframework.config.Configuration",25,"messageSerializer,getComponent,parameterResolverFactory,scopeAwareProvider,handlerDefinition,spanFactory,eventStore,upcasterChain,findModules,queryBus,eventSerializer,commandBus,messageMonitor,repository,eventBus,serializer,snapshotFilter,correlationDataProviders",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"lambda$evict$1,evict,lambda$enqueue$0,lambda$requeue$2,maximumSequenceSizeReached,builder,isFull,contains,lambda$process$3,requeue,lambda$clear$7,maximumNumberOfSequencesReached,lambda$process$5,lambda$process$6,getLastTouchedSequence,lambda$process$4,toIdentifier",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$query$0,lambda$getSubscriptionQueryResult$7,getSubscriptionQueryResult,lambda$query$2,lambda$getSubscriptionQueryResult$5,getSubscriptionQueryMessage,lambda$streamingQuery$3,lambda$registerDispatchInterceptor$8,processInterceptors,lambda$query$1,lambda$streamingQuery$4,lambda$getSubscriptionQueryResult$6",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"advancedTo,getSegment,isCaughtUp,caughtUp,isErrorState,unmarkError,markError",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"lambda$schedulePayload$66ef0dda$1,shutdown,lambda$publishEventMessage$0,publishWithRevision,publishEventMessage,schedule,schedulePayloadAndMetadata,lambda$schedulePayloadAndMetadata$3b5ac046$1,lambda$schedulePayloadAndMetadata$efde5fa1$1,schedulePayload,publish,createMessage,lambda$schedulePayload$edc2443f$1",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"getConfig,lambda$fetchAvailableSegments$1,initializeTokenSegments,lambda$retrieveStorageIdentifier$3,validateSegment,fetchSegments,loadToken,lambda$fetchSegments$0,lambda$fetchAvailableSegments$2",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"validateSegment,lambda$fetchSegments$0,loadToken,getConfig,lambda$fetchAvailableSegments$1,fetchSegments,initializeTokenSegments,lambda$fetchAvailableSegments$2,lambda$retrieveStorageIdentifier$3",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"advanceTimeTo,lambda$cancelAllWithinScope$2,advanceToNextTrigger,schedule,consumeDeadline,lambda$cancelAll$1,lambda$registerHandlerInterceptor$4,processDispatchInterceptors,lambda$registerDispatchInterceptor$3,lambda$cancelSchedule$0,lambda$consumeDeadline$5",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"context,lambda$replayContext$1,isReplay,createReplayToken,replayContext,lambda$getTokenAtReset$2,advancedTo,lambda$isReplay$0,getTokenAtReset",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$registerDispatchInterceptor$4,openStream,lambda$publish$0,lambda$doAppendEvents$1,injectAggregateIdentifier,doAppendEvents,lambda$subscribe$3,lambda$doAppendEvents$2",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"lambda$doDispatch$3,dispatch,lambda$dispatch$2,lambda$registerDispatchInterceptor$6,createRepository,initializePublisherThreads,lambda$initializeInvokerThreads$1,lambda$subscribe$4,lambda$registerHandlerInterceptor$7,lambda$initializePublisherThreads$0,initializeInvokerThreads,doDispatch,lambda$subscribe$5",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"next,nextSequenceNumber,initActiveIfRequired",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isMerging,getResetPosition,getCurrentPosition,getSegment,isCaughtUp,mergeCompletedPosition,split,isErrorState,isReplaying,getError,getTrackingToken",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"advancedTo,isErrorState,markError",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"getSnapshotSerializer,getEventSerializer,isFirstDomainEvent,lambda$readSnapshot$0,readSnapshotData,readEventData,storeSnapshot,appendEvents,buildExceptionMessage,lambda$readSnapshot$1",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"next,lambda$getLastSequenceNumber$0,hasNext",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"peekGlobalStream,peek,lastToken,lambda$closePrivateStream$0,behindGlobalCache,nextNode,closePrivateStream,nextAvailable,peekPrivateStream,stopTailingGlobalStream",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"behindGlobalCache,lastToken,peek,lambda$closePrivateStream$0,nextAvailable,peekPrivateStream,nextNode,closePrivateStream,stopTailingGlobalStream,peekGlobalStream",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"andMetaData,getPayload,isExceptional,withMetaData,findExceptionResult",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getAssociationValues,getSagaIdentifier,isActive,root",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getTriggeredDeadlines,getScheduledDeadlines,getCurrentDateTime",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$recordException$1,lambda$makeCurrent$0",2,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"initializeTokenSegments,lambda$storeToken$0,lambda$fetchSegments$1,fetchSegments",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"lambda$stagedDomainEventMessages$0,lambda$readEvents$3,stagedDomainEventMessages,handleSnapshotReadingError,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$2",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"next,readNext",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$000,access$100",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$3,lambda$handle$0,lambda$handle$2,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"unwrapType,lambda$new$0,queryResultType,upperBound",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$createRootTrace$0,lambda$createInternalSpan$8,lambda$null$5,lambda$getSpanMessage$3,getSpanMessage,lambda$createHandlerSpan$1,lambda$createInternalSpan$7,lambda$createDispatchSpan$2,lambda$getSpanMessage$4,lambda$null$6",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$containsKey$3,lambda$registerCacheEntryListener$0,purgeItems,lambda$computeIfPresent$4,lambda$removeAll$2,lambda$get$1",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"lambda$eventProcessor$0,initialize,lambda$initialize$1,lambda$initialize$2,ensureInitialized,processingGroup,lambda$ensureInitialized$3",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$registerHandlerInterceptor$2,dispatchInterceptors,lambda$registerDispatchInterceptor$1,lambda$runOnPrepareCommitOrNow$0",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"lambda$mergePosition$0,mergePosition,lambda$mergePosition$1,doAdvance",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"lambda$doConsumeNext$1,messageSource,nextAvailable,lambda$setOnAvailableCallback$4,skipMessagesWithPayloadTypeOf,doConsumeNext,lambda$skipMessagesWithPayloadTypeOf$3,peekForMessages,lambda$setOnAvailableCallback$5,lambda$peekForMessages$2,lambda$new$0",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,getInternalTrackingToken",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"parameterResolverFactory,handlerDefinition,spanFactory,eventStore,commandBus,repository,eventBus,getComponent",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll,deadlineNameMatch",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"processInUnitOfWork,getName,getSpanName,lambda$null$1,lambda$null$2,lambda$registerHandlerInterceptor$0,lambda$processInUnitOfWork$3",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"mergePosition,lowerSegmentToken,isMergeInProgress,position,upperSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"position,isReplay,createReplayToken,getTokenAtReset,lowerBound",6,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$handle$3,lambda$new$1,lambda$canHandle$2,lambda$new$0",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"andMetaData,withMetaData,optionalExceptionResult,isExceptional",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"doApply,publish,publishOnEventBus",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asNullableResponseMessage,asResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getData,getType",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"routingKey,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$canHandleType$3,lambda$canHandle$1,lambda$prepareReset$4,lambda$canHandleType$2,prepareReset,lambda$handle$0,canHandle,handle",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"getAggregateIdentifier,withMetaData,getSequenceNumber,getType,andMetaData",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"withMetaData,trackingToken,withTrackingToken,andMetaData",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"hasNextAvailable,peek,access$300,setOnAvailableCallback,close,skipMessagesWithPayloadTypeOf",7,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getSequenceIdentifier,getId,getIndex",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getIndex,getSequenceIdentifier,getId",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"resolveParameterValues,checkAndRethrowForExceptionOrError,parametersMatch,typeMatches",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"handle,canHandle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isWildcardType,isArray,isGenericArrayType,isParameterizedType,isAssignableFrom,isGenericAssignableFrom,isTypeVariable,isWildcardTypeWithMatchingUpperBound,isParameterizedTypeOfExpectedType",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"declaredType,getVersion,type",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"version,initialize,isDeleted,identifier",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"getAggregate,access$200,access$300,send,access$500,newInstance,load",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$registerSpanAttributeProvider$5,lambda$createInternalSpan$4,lambda$createDispatchSpan$2,lambda$createRootTrace$0,lambda$createInternalSpan$3,lambda$createHandlerSpan$1",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"dispatch,shutdownDispatching,updateFilter,localSegment,lambda$subscribe$0,disconnect,lambda$registerDispatchInterceptor$1,intercept",8,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"withMetaData,asDeadlineMessage,andMetaData,lambda$asDeadlineMessage$1,lambda$asDeadlineMessage$0",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"lambda$canHandle$0,canHandle,delegates,performReset,flatten,lambda$performReset$2,lambda$canHandleType$1",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"optionalExceptionResult,andMetaData,isExceptional,withMetaData,exceptionDetails",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$1,lambda$new$0",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"types,type",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"getSagaTypeName,storeAssociationValue,sagaEntryEntityName,serializedObjectType,addNamedQueriesTo,loadAssociationValues,createSagaEntry,serializedSagaAsString,removeAssociationValue",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"serializedObjectType,serializedSagaAsString,getSagaTypeName,storeAssociationValue,addNamedQueriesTo,removeAssociationValue,sagaEntryEntityName,createSagaEntry,loadAssociationValues",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"andMetaData,getResponseType,getQueryName,withMetaData",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getQueryName,getResponseType",2,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getQueryName,getResultType",2,1,""
"org.axonframework.config.Configuration",13,"parameterResolverFactory,handlerDefinition,spanFactory,eventProcessingConfiguration,resourceInjector",5,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"trackingToken,withTrackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"isUpperSegmentAdvanced,lowerSegmentToken,isLowerSegmentAdvanced,upperSegmentToken",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"lambda$new$0,detectList,hasHandler,sequenceIdentifier,invokeHandlers,sequencingPolicyMatchesSegment,lambda$canHandleType$1,performReset",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$1,lambda$readEvents$0",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"enqueuedAt,diagnostics,message,cause,lambda$new$0",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$addCachedAssociations$3,lambda$updateSaga$4,lambda$findSagas$0,addCachedAssociations,lambda$deleteSaga$1,lambda$removeAssociationValueFromCache$2,removeAssociationValueFromCache,cacheKey",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$newInstance$1,lambda$load$3,canResolve,validateIdentifier,lambda$loadOrCreate$0,lambda$load$2,lambda$getAggregate$4,load",8,1,""
"org.axonframework.test.saga.EventValidator",13,"lambda$startRecording$0,handle,assertPublishedEventsMatching,createEqualToMatchers,unwrapEvent",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"getCommandName,withMetaData,andMetaData",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"removeFromCache,load,lambda$load$0,canResolve,newInstance",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"getTimestamp,andMetaData,withMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"buildJobDetail,buildTrigger,shutdown,initialize,lambda$schedule$0,lambda$cancelSchedule$1,schedule",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"lambda$readEvents$0,readEvents",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"version,getWrappedAggregate,isLockHeld",3,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"advanceTimeBy,advanceTimeTo,getCurrentDateTime,initializeAt",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"builder,subscribe,dispatch,registerHandlerInterceptor,registerDispatchInterceptor",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"asRuntime,lambda$send$0,send",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"load,loadOrCreate,newInstance",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"load,lambda$send$0,lambda$send$2,lambda$send$1,send,canResolve",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.messaging.ResultMessage",11,"exceptionResult,isExceptional",2,1,""
"org.axonframework.queryhandling.QueryGateway",11,"subscriptionQuery,query,scatterGather,streamingQuery",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"andMetaData,getQueryName,withMetaData",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"registerConverters,revisionOf,getConverter,typeForClass,typeIdentifierOf,doDeserialize,classForType,doSerialize",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"resolveClassName,getWriter,registerConverters,classForType,getReader,typeForClass,builder",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"canResolve,lambda$newInstance$0,load,newInstance",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"createListenerAdapter,doRegisterListener,lambda$registerCacheEntryListener$0",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"snapshotFilter,aggregateFactory,aggregateType,repository",4,1,""
"org.axonframework.config.Configuration",10,"findModules,eventProcessingConfiguration",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"processInUnitOfWork,canHandle,reportIgnored",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"nextAvailable,skipMessagesWithPayloadTypeOf",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"eventHandlers,sequenceIdentifier,invokeHandlers,sequencingPolicyMatchesSegment,performReset",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"lambda$isReplaying$0,processingStatus,resetTokens",3,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2600,access$2500",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.MessageDecorator",10,"getMetaData,getPayload,getIdentifier,describeType,describeTo",5,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,serializePayload",2,1,""
"org.axonframework.messaging.ResultMessage",10,"exceptionResult,isExceptional",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"getAll,contains,mergedWith,get,isEmpty",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"revisionOf,getSerializedType,classForType",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"compareTo,lambda$covers$2,lambda$upperBound$1,offsetBy,lambda$lowerBound$0",5,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"getGlobalIndex,next,offsetBy",3,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createHeadToken,createTokenAt,createTokenSince,sourceId,createTailToken",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"alterToken,nextAvailable",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$600,access$500,access$400,access$300",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$null$0,lambda$constructHandlerAttributesFor$1,constructHandlerAttributesFor,prefixedKey",4,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"loadAssociations,sagaTypeName",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"hashes,equals,access$100,toString",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateFactory,aggregateType",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2300,access$2200,access$2100,access$1900,access$2400",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"advancedTo,upperBound,unwrap,lowerBound",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"findSagas,size",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"canConvert,registerConverter",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getType,getSequenceNumber,getAggregateIdentifier",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"prepareReset,handle,supportsReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"advancedTo,getTokenForStream",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"canHandle,lambda$handle$0,handle",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"lambda$handle$0,canHandle,handle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"getProperty,lambda$getProperty$0,createProperty,getHandlerName",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"queuedThreads,isHeldBy,lock",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"handle,prepareReset",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"openStream,sourceId",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"lambda$unexpectedEvents$0,unexpectedEvents",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600,access$400",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$700,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,resolveReturnValue",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.Repository",6,"load,newInstance,loadOrCreate",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$resolveAssociation$0,lambda$findHandlerMethods$1",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$1,lambda$findSagas$0",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getContentType,getData,getType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"checkForDeadlock,disposeIfUnused",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getGaps,getIndex",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$process$1,lambda$handle$0",2,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$onMessageIngested$1,lambda$new$0",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"bytesFrom,convert",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
