"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,18,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,9,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp,getIdentifier",2,9,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType,getAggregateIdentifier,getSequenceNumber",3,5,""
"org.axonframework.messaging.ResultMessage",9,"exceptionResult,isExceptional",2,5,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getType,getAggregateIdentifier,getSequenceNumber",3,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier,getSequenceNumber",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"getIndex,newInstance,getGaps,withGapsTruncatedAt,advanceTo",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"getAggregateRoot,initialize,initSequence",4,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getAggregateIdentifier,getSequenceNumber",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"withTrackingToken,trackingToken",2,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",156,"lambda$null$42,lambda$null$33,lambda$null$32,lambda$null$36,lambda$static$0,lambda$null$31,lambda$null$41,lambda$null$40,lambda$null$11,lambda$null$26,lambda$null$18,lambda$null$19,lambda$null$35,validateConfigInitialization,subscribingEventProcessor,lambda$registerEventHandlerInvokers$34,lambda$annotatedProcessingGroupOfType$70,lambda$registerTransactionManager$62,registerTrackingEventProcessorConfiguration,lambda$sagaConfigurations$48,lambda$pooledStreamingEventProcessor$68,lambda$registerEventHandlerInvokers$37,lambda$registerTrackingEventProcessorConfiguration$63,sequencingPolicy,lambda$registerEventHandlerInvokers$30,registerSagaManagers,lambda$usingTrackingEventProcessors$55,deadLetterPolicy,lambda$deadLetteringInvoker$39,lambda$buildEventProcessor$45,listenerInvocationErrorHandler,transactionManager,lambda$eventProcessors$47,messageMonitor,lambda$registerListenerInvocationErrorHandler$50,lambda$registerSubscribingEventProcessor$57,registerEventHandlerInvokers,simpleInvoker,annotatedProcessingGroupOfType,lambda$registerTrackingEventProcessor$52,lambda$new$21,lambda$registerPooledStreamingEventProcessor$65,lambda$pooledStreamingEventProcessor$69,lambda$registerSagaManagers$43,lambda$deadLetteringInvoker$38,deadLetterQueue,lambda$registerTrackingEventProcessorConfiguration$64,lambda$new$23,lambda$new$15,lambda$selectProcessingGroupByType$29,lambda$buildEventProcessor$46,buildEventProcessor,trackingEventProcessor,lambda$registerTrackingEventProcessor$51,lambda$registerDeadLetterQueue$66,lambda$registerTokenStore$53,lambda$usingPooledStreamingEventProcessors$56,lambda$new$20,lambda$usingSubscribingEventProcessors$54,processorNameForProcessingGroup,eventProcessors,lambda$selectProcessingGroupByType$28,defaultEventProcessor,lambda$new$22,trackingEventProcessorConfig,registerEventProcessor,deadLetteringInvoker,pooledStreamingEventProcessor,lambda$buildEventProcessor$44,lambda$new$25,lambda$registerHandlerInterceptor$59,lambda$new$17,rollbackConfiguration,lambda$new$24,lambda$registerRollbackConfiguration$61,selectProcessingGroupByType,errorHandler,lambda$registerSequencingPolicy$60,lambda$new$16,lambda$registerErrorHandler$58,retrieveHandlerDefinition,noSagaProcessorCustomization,defaultExecutor,initializeProcessors,tokenStore,registerTrackingEventProcessor,lambda$registerDeadLetterPolicy$67,lambda$initializeProcessors$27,lambda$registerEventHandler$49,lambda$new$7,lambda$new$2,lambda$new$3,lambda$new$8,lambda$new$5,lambda$new$12,lambda$new$6,lambda$new$10,lambda$new$14,lambda$new$13,lambda$new$1,packageOfObject,lambda$new$4,lambda$new$9",103,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$registerCommandHandler$30,lambda$null$25,lambda$defaultDeadlineManager$21,defaultQueryBus,lambda$defaultCommandGateway$10,lambda$defaultQueryBus$13,lambda$new$2,lambda$onStart$53,lambda$registerHandlerDefinition$44,prepareMessageHandlerRegistrars,lambda$eventProcessing$28,lambda$prepareModules$45,defaultDeadlineManager,lambda$null$36,lambda$prepareMessageHandlerRegistrars$47,defaultEventBus,lambda$registerQueryHandler$37,defaultCommandGateway,lambda$configureEmbeddedEventStore$42,lambda$defaultQueryUpdateEmitter$14,invokeLifecycleHandlers,lambda$jpaConfiguration$9,lambda$defaultResourceInjector$19,registerComponent,defaultQueryUpdateEmitter,lambda$null$43,lambda$defaultSnapshotter$26,lambda$registerCommandHandler$33,defaultHandlerDefinition,lambda$defaultHandlerDefinition$16,lambda$defaultConfiguration$4,lambda$new$3,lambda$defaultParameterResolverFactory$15,lambda$invokeStartHandlers$49,lambda$defaultQueryGateway$11,defaultConfiguration,lambda$static$0,defaultParameterResolverFactory,lambda$defaultCommandBus$18,lambda$null$31,lambda$jpaConfiguration$8,lambda$null$46,registerCommandHandler,registerQueryHandler,lambda$jpaConfiguration$7,defaultEventGateway,defaultResourceInjector,defaultQueryGateway,lambda$invokeShutdownHandlers$50,prepareModules,lambda$null$32,lambda$jpaConfiguration$6,lambda$onShutdown$54,lambda$defaultEventBus$22,invokeShutdownHandlers,jpaConfiguration,lambda$defaultScopeAwareProvider$20,defaultSpanFactory,defaultCommandBus,lambda$new$1,invokeInitHandlers,defaultSerializer,lambda$null$35,lambda$defaultEventGateway$23,lambda$invokeInitHandlers$48,lambda$null$12,eventProcessing,lambda$registerMessageHandler$41,registerModule,lambda$registerMessageHandler$38,lambda$registerMessageHandler$39,lambda$configureMessageMonitor$29,defaultScopeAwareProvider,lambda$invokeLifecycleHandlers$51,lambda$invokeLifecycleHandlers$52,lambda$registerMessageHandler$40,lambda$null$17,defaultUpcasterChain,lambda$registerQueryHandler$34,retrieveHandlerDefinition,lambda$jpaConfiguration$5,lambda$defaultSerializer$24,defaultSnapshotter,verifyIdentifierFactory,defaultComponent,lambda$eventProcessing$27",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"lambda$buildResultValidator$9,lambda$null$3,registerFieldFilter,givenCommands,registerRepository,lambda$givenState$0,getRepositoryProvider,given,registerRepositoryProvider,ensureValuesEqual,handleDeadline,aggregateModel,whenTimeAdvancesTo,lambda$whenConstructing$4,failIllegalStateChange,lambda$when$7,whenTimeElapses,registerAggregateCommandHandlers,buildResultValidator,currentTime,clearGivenWhenState,lambda$null$5,finalizeConfiguration,lambda$whenInvoking$6,andGivenCommands,getParameterResolverFactory,ensureRepositoryConfiguration,assertValidWorkingAggregateState,registerCommandHandler,when,lambda$andGivenCommands$1,lambda$when$2,getHandlerDefinition,useStateStorage,andGivenCurrentTime,lambda$when$8,detectIllegalStateChanges,executeAtSimulatedTime,andGiven",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectExceptionDetails,recordException,lambda$expectNoScheduledDeadlineWithName$4,lambda$expectNoScheduledDeadlineMatching$3,expectException,lambda$expectNoScheduledDeadlineWithName$6,expectResultMessagePayload,expectExceptionMessage,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$5,expectTriggeredDeadlines,expectTriggeredDeadlinesMatching,lambda$expectScheduledDeadlineWithName$1,expectScheduledDeadlineMatching,verifyPayloadEquality,expectEvents,expectResultMessageMatching,verifyMetaDataEquality,lambda$expectScheduledDeadlineWithName$0,lambda$expectNoScheduledDeadlineWithName$2",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"expectNoScheduledEventMatching,expectNoScheduledDeadlineMatching,expectScheduledEventMatching,expectTriggeredDeadlines,lambda$expectNoScheduledDeadlineWithName$3,lambda$registerStartRecordingCallback$0,expectTriggeredDeadlinesMatching,lambda$expectNoScheduledDeadlineMatching$4,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$6,lambda$expectNoScheduledDeadlineWithName$7,lambda$expectScheduledDeadlineWithName$2,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineWithName$5",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"access$1000,access$800,access$1400,access$500,access$1300,invokeStartHandlers,access$200,access$1100,access$900,access$1500,invokeShutdownHandlers,access$400,access$300,access$1200,access$700,access$600,defaultComponent",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"lambda$registerLifecycleHandler$2,isEarlierPhaseDuringStartUp,lambda$null$0,registerLifecycleHandler,lambda$getComponent$1,isEarlierPhaseDuringShutdown",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"startRecording,registerStartRecordingCallback",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"registerFieldFilter,lambda$null$0,getResourceInjector,getPublisherFor,getHandlerDefinition,timeCorrectedEventMessage,registerCommandGateway,handleDeadline,getCommandBus,ensureSagaResourcesInitialized,handleInSaga,lambda$handleInSaga$1,givenAggregate,registerResource,getParameterResolverFactory,currentTime",16,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"recordException,assertValidRecording",2,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"lambda$start$3,addHandler,changePhase,lambda$rollback$8,onRollback,commitAsRoot,lambda$start$1,notifyHandlers,setRollbackCause,lambda$commit$5,lambda$null$2,lambda$rollback$7,commitAsNested,phase,delegateAfterCommitToParent,lambda$commitAsNested$6,setPhase,lambda$start$0,lambda$commit$4",19,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"lambda$resetTokens$5,lambda$null$1,lambda$null$8,lambda$null$7,lambda$statusUpdater$13,lambda$null$9,singleStatusUpdater,lambda$null$11,lambda$singleStatusUpdater$12,isRunning,lambda$getTokenStoreIdentifier$3,lambda$calculateIdentifier$4,lambda$resetTokens$6,lambda$new$0,resetTokens,lambda$new$2,calculateIdentifier,spawnWorker,statusUpdater,supportsReset,releaseSegment,start,shutdownAsync,lambda$resetTokens$10",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"toLetter,getNextIndexForSequence,lambda$sequenceSize$14,lambda$amountOfSequences$16,lambda$getMaxIndexForSequence$17,lambda$clear$13,lambda$size$15,getProcessingStartedLimit,lambda$claimDeadLetter$12,getMaxIndexForSequence,lambda$enqueue$1,lambda$enqueue$3,isFull,lambda$enqueue$0,amountOfSequences,lambda$evict$4,findNextDeadLetter,lambda$enqueue$2,requeue,sequenceSize,lambda$toLetter$8,evict,claimDeadLetter,lambda$deadLetterSequence$5,lambda$toLetter$7,lambda$findNextDeadLetter$11,lambda$processLetterAndFollowing$9,entityManager,toStringSequenceIdentifier,findFirstLetterOfEachAvailableSequence,processLetterAndFollowing,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$deadLetters$6",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$deadLetterSequence$5,lambda$toLetter$8,claimDeadLetter,toStringSequenceIdentifier,lambda$enqueue$2,processLetterAndFollowing,evict,lambda$evict$4,requeue,lambda$toLetter$7,lambda$enqueue$0,lambda$findNextDeadLetter$11,findNextDeadLetter,lambda$clear$13,lambda$getMaxIndexForSequence$17,lambda$enqueue$1,toLetter,isFull,lambda$processLetterAndFollowing$9,sequenceSize,lambda$claimDeadLetter$12,amountOfSequences,lambda$findFirstLetterOfEachAvailableSequence$10,lambda$enqueue$3,lambda$amountOfSequences$16,findFirstLetterOfEachAvailableSequence,getProcessingStartedLimit,getNextIndexForSequence,entityManager,lambda$size$15,getMaxIndexForSequence,lambda$sequenceSize$14,lambda$deadLetters$6",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$doEmit$14,lambda$null$18,lambda$null$16,lambda$emit$5,runOnAfterCommitOrNow,lambda$doEmit$12,lambda$registerDispatchInterceptor$11,lambda$registerUpdateHandler$1,inStartedPhaseOfUnitOfWork,doEmit,lambda$null$7,lambda$payloadMatchesQueryResponseType$15,intercept,lambda$queryUpdateHandlerRegistered$0,lambda$completeExceptionally$10,lambda$null$6,lambda$registerUpdateHandler$4,doCompleteExceptionally,lambda$complete$9,lambda$emit$8,doComplete,lambda$null$20,lambda$runOnAfterCommitOrNow$21,lambda$registerUpdateHandler$2,lambda$null$13,lambda$registerUpdateHandler$3,payloadMatchesQueryResponseType,lambda$doCompleteExceptionally$19,emitError,lambda$doComplete$17",31,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",35,"lambda$handle$7,registerRoot,doApply,lambda$execute$2,initialize,initSequence,lambda$findHandlerAndHandleCommand$10,findHandlerAndHandleCommand,lambda$invoke$1,publishOnEventBus,handle,andThen,lambda$findHandlerAndHandleCommand$9,lambda$handle$5,publish,lambda$null$8,lambda$andThenApply$13,createMessage,rootType,lambda$createMessage$12,lambda$doApply$11,lambda$registerRoot$0,lambda$handle$3,lambda$handle$4,lambda$handle$6,applyMessageOrPayload",30,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$aggregateConfiguration$6,eventBus,lambda$eventProcessingConfiguration$4,lambda$getComponent$8,getModules,lambda$findModules$0,lambda$eventProcessingConfiguration$3,getComponent,aggregateConfiguration,lambda$aggregateConfiguration$5,lambda$aggregateConfiguration$7,lambda$resourceInjector$2,findModules,lambda$findModules$1",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$1100,access$800,access$2200,access$1800,access$700,access$1000,access$2000,doSleepFor,access$600,access$900,access$2100,access$1500,access$1700,access$1600,access$1400,getState,access$1300,access$1200",18,1,""
"org.axonframework.config.Configurer",29,"registerQueryHandler,registerCommandHandler,lambda$configureMessageMonitor$1,buildConfiguration,registerModule,configureMessageMonitor,lambda$configureMessageMonitor$0,eventProcessing,registerComponent,configureAggregate",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1100,access$800,access$1000,processingLoop,access$900,access$1500,access$1400,getState,access$1300,access$1200",10,1,""
"org.axonframework.config.Configuration",27,"correlationDataProviders,eventBus,spanFactory,getComponent,messageMonitor,handlerDefinition,parameterResolverFactory",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$700,access$600",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$800,access$1000,access$2000",3,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$800,access$1000,access$2000,releaseSegment",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"canHandle,lambda$handle$8,lambda$handle$6,lambda$new$0,handle,lambda$handle$7,lambda$null$3,lambda$invoke$1,lambda$canHandle$4,lambda$null$5,lambda$execute$2,getAssociationValues",13,1,""
"org.axonframework.config.Configuration",25,"correlationDataProviders,eventSerializer,eventBus,queryBus,snapshotFilter,spanFactory,messageSerializer,getComponent,commandBus,upcasterChain,serializer,scopeAwareProvider,messageMonitor,findModules,repository,handlerDefinition,eventStore,parameterResolverFactory",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"requeue,evict,lambda$requeue$2,contains,isFull,lambda$process$3,maximumNumberOfSequencesReached,toIdentifier,lambda$process$4,getLastTouchedSequence,lambda$process$6,lambda$clear$7,builder,lambda$process$5,maximumSequenceSizeReached,lambda$evict$1,lambda$enqueue$0",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$getSubscriptionQueryResult$5,lambda$getSubscriptionQueryResult$7,lambda$streamingQuery$4,getSubscriptionQueryMessage,lambda$query$0,lambda$query$1,lambda$registerDispatchInterceptor$8,lambda$streamingQuery$3,processInterceptors,getSubscriptionQueryResult,lambda$getSubscriptionQueryResult$6,lambda$query$2",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"unmarkError,markError,getSegment,advancedTo,isErrorState,isCaughtUp,caughtUp",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"lambda$publishEventMessage$0,schedulePayload,createMessage,publishWithRevision,lambda$schedulePayloadAndMetadata$efde5fa1$1,publish,publishEventMessage,lambda$schedulePayload$edc2443f$1,lambda$schedulePayloadAndMetadata$3b5ac046$1,shutdown,schedule,schedulePayloadAndMetadata,lambda$schedulePayload$66ef0dda$1",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"loadToken,fetchSegments,getConfig,validateSegment,lambda$fetchSegments$0,lambda$fetchAvailableSegments$2,lambda$fetchAvailableSegments$1,lambda$retrieveStorageIdentifier$3,initializeTokenSegments",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"loadToken,lambda$fetchAvailableSegments$1,initializeTokenSegments,getConfig,fetchSegments,lambda$fetchSegments$0,validateSegment,lambda$fetchAvailableSegments$2,lambda$retrieveStorageIdentifier$3",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"advanceToNextTrigger,consumeDeadline,lambda$consumeDeadline$5,lambda$cancelSchedule$0,lambda$cancelAllWithinScope$2,schedule,lambda$cancelAll$1,lambda$registerDispatchInterceptor$3,advanceTimeTo,processDispatchInterceptors,lambda$registerHandlerInterceptor$4",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"createReplayToken,lambda$getTokenAtReset$2,context,lambda$isReplay$0,getTokenAtReset,isReplay,lambda$replayContext$1,advancedTo,replayContext",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"openStream,injectAggregateIdentifier,lambda$publish$0,lambda$doAppendEvents$1,doAppendEvents,lambda$doAppendEvents$2,lambda$registerDispatchInterceptor$4,lambda$subscribe$3",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"dispatch,createRepository,lambda$registerHandlerInterceptor$7,lambda$registerDispatchInterceptor$6,lambda$initializePublisherThreads$0,lambda$subscribe$5,lambda$dispatch$2,doDispatch,initializeInvokerThreads,lambda$doDispatch$3,lambda$subscribe$4,initializePublisherThreads,lambda$initializeInvokerThreads$1",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"nextSequenceNumber,initActiveIfRequired,next",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"getCurrentPosition,isReplaying,split,mergeCompletedPosition,getSegment,isMerging,getError,getResetPosition,isErrorState,getTrackingToken,isCaughtUp",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"markError,advancedTo,isErrorState",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"readEventData,readSnapshotData,isFirstDomainEvent,getEventSerializer,lambda$readSnapshot$0,lambda$readSnapshot$1,getSnapshotSerializer,buildExceptionMessage,storeSnapshot,appendEvents",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"hasNext,lambda$getLastSequenceNumber$0,next",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"lambda$closePrivateStream$0,peekPrivateStream,behindGlobalCache,lastToken,nextAvailable,peek,nextNode,closePrivateStream,stopTailingGlobalStream,peekGlobalStream",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"stopTailingGlobalStream,lambda$closePrivateStream$0,peekGlobalStream,peekPrivateStream,behindGlobalCache,peek,nextNode,closePrivateStream,lastToken,nextAvailable",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"findExceptionResult,isExceptional,andMetaData,getPayload,withMetaData",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"root,getSagaIdentifier,isActive,getAssociationValues",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getTriggeredDeadlines,getScheduledDeadlines,getCurrentDateTime",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$makeCurrent$0,lambda$recordException$1",2,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"lambda$fetchSegments$1,initializeTokenSegments,lambda$storeToken$0,fetchSegments",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"lambda$stagedDomainEventMessages$0,lambda$readEvents$3,stagedDomainEventMessages,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$2,handleSnapshotReadingError",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"hasNext,next",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"next,readNext",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$100,access$000",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$2,lambda$handle$3,lambda$handle$0,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"upperBound,unwrapType,queryResultType,lambda$new$0",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$null$6,lambda$getSpanMessage$3,lambda$null$5,lambda$createHandlerSpan$1,lambda$createRootTrace$0,lambda$getSpanMessage$4,lambda$createInternalSpan$7,lambda$createDispatchSpan$2,getSpanMessage,lambda$createInternalSpan$8",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$computeIfPresent$4,purgeItems,lambda$containsKey$3,lambda$removeAll$2,lambda$registerCacheEntryListener$0,lambda$get$1",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"lambda$initialize$2,initialize,lambda$eventProcessor$0,lambda$initialize$1,lambda$ensureInitialized$3,ensureInitialized,processingGroup",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"dispatchInterceptors,lambda$runOnPrepareCommitOrNow$0,lambda$registerDispatchInterceptor$1,lambda$registerHandlerInterceptor$2",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"mergePosition,lambda$mergePosition$0,lambda$mergePosition$1,doAdvance",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"lambda$new$0,lambda$setOnAvailableCallback$5,lambda$doConsumeNext$1,lambda$peekForMessages$2,lambda$setOnAvailableCallback$4,peekForMessages,doConsumeNext,skipMessagesWithPayloadTypeOf,messageSource,lambda$skipMessagesWithPayloadTypeOf$3,nextAvailable",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken,getSegment",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"split,getSegment,getTrackingToken",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,getTrackingToken,split",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"eventBus,spanFactory,getComponent,commandBus,repository,handlerDefinition,eventStore,parameterResolverFactory",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll,deadlineNameMatch",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$null$2,lambda$registerHandlerInterceptor$0,getName,getSpanName,lambda$processInUnitOfWork$3,processInUnitOfWork,lambda$null$1",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"mergePosition,isMergeInProgress,position,lowerSegmentToken,upperSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"createReplayToken,getTokenAtReset,position,lowerBound,isReplay",6,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$canHandle$2,lambda$handle$3,lambda$new$0,lambda$new$1",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"optionalExceptionResult,withMetaData,andMetaData,isExceptional",4,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",16,"doApply,publishOnEventBus,publish",3,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asNullableResponseMessage,asResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getData,getType",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"routingKey,commandName",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$canHandle$1,canHandle,lambda$handle$0,lambda$prepareReset$4,lambda$canHandleType$2,lambda$canHandleType$3,handle,prepareReset",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"andMetaData,withMetaData,getSequenceNumber,getAggregateIdentifier,getType",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"andMetaData,trackingToken,withMetaData,withTrackingToken",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"hasNextAvailable,close,access$300,skipMessagesWithPayloadTypeOf,peek,setOnAvailableCallback",7,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getId,getIndex,getSequenceIdentifier",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getId,getSequenceIdentifier,getIndex",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"typeMatches,resolveParameterValues,checkAndRethrowForExceptionOrError,parametersMatch",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"handle,canHandle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isTypeVariable,isGenericAssignableFrom,isParameterizedTypeOfExpectedType,isWildcardType,isAssignableFrom,isGenericArrayType,isWildcardTypeWithMatchingUpperBound,isParameterizedType,isArray",9,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",15,"declaredType,getVersion,type",3,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"version,identifier,isDeleted,initialize",4,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createInternalSpan$4,lambda$createHandlerSpan$1,lambda$createInternalSpan$3,lambda$createRootTrace$0,lambda$createDispatchSpan$2,lambda$registerSpanAttributeProvider$5",6,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"localSegment,lambda$subscribe$0,lambda$registerDispatchInterceptor$1,dispatch,intercept,disconnect,shutdownDispatching,updateFilter",8,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"andMetaData,withMetaData,asDeadlineMessage,lambda$asDeadlineMessage$1,lambda$asDeadlineMessage$0",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"lambda$performReset$2,canHandle,flatten,lambda$canHandle$0,delegates,performReset,lambda$canHandleType$1",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"withMetaData,andMetaData,isExceptional,exceptionDetails,optionalExceptionResult",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$1,lambda$new$0",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"types,type",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"createSagaEntry,serializedObjectType,getSagaTypeName,addNamedQueriesTo,removeAssociationValue,serializedSagaAsString,sagaEntryEntityName,storeAssociationValue,loadAssociationValues",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"loadAssociationValues,storeAssociationValue,getSagaTypeName,addNamedQueriesTo,serializedObjectType,sagaEntryEntityName,serializedSagaAsString,createSagaEntry,removeAssociationValue",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"andMetaData,getQueryName,getResponseType,withMetaData",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"eventProcessingConfiguration,spanFactory,resourceInjector,handlerDefinition,parameterResolverFactory",5,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"trackingToken,withTrackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"isLowerSegmentAdvanced,isUpperSegmentAdvanced,lowerSegmentToken,upperSegmentToken",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"detectList,sequencingPolicyMatchesSegment,sequenceIdentifier,invokeHandlers,lambda$new$0,lambda$canHandleType$1,hasHandler,performReset",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$0,lambda$readEvents$1",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"lambda$new$0,diagnostics,message,enqueuedAt,cause",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$deleteSaga$1,cacheKey,removeAssociationValueFromCache,lambda$findSagas$0,addCachedAssociations,lambda$removeAssociationValueFromCache$2,lambda$updateSaga$4,lambda$addCachedAssociations$3",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$newInstance$1,load,lambda$getAggregate$4,canResolve,lambda$load$3,validateIdentifier,lambda$loadOrCreate$0,lambda$load$2",8,1,""
"org.axonframework.test.saga.EventValidator",13,"createEqualToMatchers,assertPublishedEventsMatching,lambda$startRecording$0,unwrapEvent,handle",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"getCommandName,withMetaData,andMetaData",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"load,removeFromCache,canResolve,lambda$load$0,newInstance",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"getTimestamp,andMetaData,withMetaData",3,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"buildJobDetail,lambda$schedule$0,buildTrigger,schedule,shutdown,initialize,lambda$cancelSchedule$1",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"lambda$readEvents$0,readEvents",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"isLockHeld,getWrappedAggregate,version",3,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"getCurrentDateTime,advanceTimeTo,initializeAt,advanceTimeBy",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",11,"subscribe,builder,registerDispatchInterceptor,dispatch,registerHandlerInterceptor",5,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"asRuntime,lambda$send$0,send",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"load,loadOrCreate,newInstance",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"load,send,canResolve,lambda$send$2,lambda$send$0,lambda$send$1",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventhandling.GenericEventMessage",11,"getTimestamp",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.messaging.ResultMessage",11,"exceptionResult,isExceptional",2,1,""
"org.axonframework.modelling.saga.Saga",11,"isActive,getSagaIdentifier,getAssociationValues",3,1,""
"org.axonframework.queryhandling.QueryGateway",11,"query,subscriptionQuery,streamingQuery,scatterGather",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"getQueryName,andMetaData,withMetaData",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"typeIdentifierOf,doSerialize,typeForClass,registerConverters,doDeserialize,revisionOf,getConverter,classForType",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"typeForClass,getReader,getWriter,registerConverters,resolveClassName,classForType,builder",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"lambda$newInstance$0,load,newInstance,canResolve",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"lambda$registerCacheEntryListener$0,createListenerAdapter,doRegisterListener",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"aggregateType,aggregateFactory,repository,snapshotFilter",4,1,""
"org.axonframework.config.Configuration",10,"eventProcessingConfiguration,findModules",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored,processInUnitOfWork,canHandle",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"eventHandlers,sequencingPolicyMatchesSegment,sequenceIdentifier,invokeHandlers,performReset",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"resetTokens,lambda$isReplaying$0,processingStatus",3,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2500,access$2600",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.MessageDecorator",10,"getMetaData,getPayload,describeType,getIdentifier,describeTo",5,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,serializePayload",2,1,""
"org.axonframework.messaging.ResultMessage",10,"exceptionResult,isExceptional",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"isEmpty,getAll,contains,get,mergedWith",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"classForType,getSerializedType,revisionOf",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"lambda$lowerBound$0,lambda$covers$2,offsetBy,compareTo,lambda$upperBound$1",5,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,getGlobalIndex,next",3,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTokenAt,sourceId,createTailToken,createHeadToken,createTokenSince",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"nextAvailable,alterToken",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$500,access$600,access$300,access$400",4,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$null$0,lambda$constructHandlerAttributesFor$1,prefixedKey,constructHandlerAttributesFor",4,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"loadAssociations,sagaTypeName",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"access$100,equals,hashes,toString",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateType,aggregateFactory",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2300,access$2200,access$2100,access$1900,access$2400",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"upperBound,unwrap,lowerBound,advancedTo",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"findSagas,size",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"canConvert,registerConverter",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.test.utils.RecordingCommandBus",8,"clearCommands,getDispatchedCommands",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"lambda$and$97c94f44$1,matches",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getSequenceNumber,getAggregateIdentifier,getType",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"handle,supportsReset,prepareReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"getTokenForStream,advancedTo",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"handle,canHandle,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"lambda$handle$0,canHandle,handle",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"lambda$getProperty$0,getHandlerName,getProperty,createProperty",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"queuedThreads,lock,isHeldBy",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"handle,prepareReset",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"sourceId,openStream",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"unexpectedEvents,lambda$unexpectedEvents$0",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"isEmpty,getAll",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$700,access$400",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$500,access$600",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,resolveReturnValue",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.Repository",6,"loadOrCreate,newInstance,load",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$resolveAssociation$0,lambda$findHandlerMethods$1",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$1,lambda$findSagas$0",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.test.utils.RecordingCommandBus",6,"setCallbackBehavior",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"disposeIfUnused,checkForDeadlock",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getIndex,getGaps",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$process$1,lambda$handle$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.ConflictResolution",5,"initialize",1,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0,lambda$onMessageIngested$1",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"convert,bytesFrom",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
