"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,17,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp,getIdentifier",2,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType,getSequenceNumber,getAggregateIdentifier",3,5,""
"org.axonframework.messaging.ResultMessage",9,"exceptionResult,isExceptional",2,5,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getType,getSequenceNumber,getAggregateIdentifier",3,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber,getAggregateIdentifier",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"withGapsTruncatedAt,getGaps,newInstance,getIndex,advanceTo",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",15,"initialize",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getSequenceNumber,getAggregateIdentifier",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",12,"getUpdateResponseType",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken,withTrackingToken",2,2,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",156,"lambda$pooledStreamingEventProcessor$68,lambda$null$11,lambda$null$18,annotatedProcessingGroupOfType,lambda$annotatedProcessingGroupOfType$70,lambda$null$32,lambda$null$42,lambda$registerDeadLetterPolicy$67,lambda$null$33,lambda$null$41,lambda$null$40,lambda$null$35,pooledStreamingEventProcessor,subscribingEventProcessor,lambda$registerDeadLetterQueue$66,lambda$static$0,lambda$null$19,lambda$null$31,lambda$pooledStreamingEventProcessor$69,defaultExecutor,trackingEventProcessorConfig,lambda$null$36,lambda$null$26,trackingEventProcessor,lambda$deadLetteringInvoker$38,tokenStore,lambda$new$16,registerEventProcessor,lambda$registerListenerInvocationErrorHandler$50,lambda$new$10,registerTrackingEventProcessorConfiguration,lambda$registerTrackingEventProcessorConfiguration$64,lambda$registerPooledStreamingEventProcessor$65,lambda$registerTrackingEventProcessor$51,selectProcessingGroupByType,deadLetterPolicy,lambda$usingTrackingEventProcessors$55,lambda$new$22,lambda$new$6,lambda$buildEventProcessor$45,listenerInvocationErrorHandler,lambda$deadLetteringInvoker$39,lambda$registerRollbackConfiguration$61,transactionManager,lambda$new$3,lambda$registerTransactionManager$62,lambda$registerTrackingEventProcessorConfiguration$63,retrieveHandlerDefinition,lambda$registerTokenStore$53,processorNameForProcessingGroup,lambda$sagaConfigurations$48,lambda$new$21,registerTrackingEventProcessor,deadLetteringInvoker,lambda$eventProcessors$47,eventProcessors,lambda$new$15,lambda$new$12,lambda$usingPooledStreamingEventProcessors$56,rollbackConfiguration,lambda$registerSubscribingEventProcessor$57,lambda$new$17,lambda$new$9,lambda$registerEventHandlerInvokers$30,lambda$new$5,buildEventProcessor,lambda$new$20,lambda$new$7,errorHandler,lambda$registerEventHandlerInvokers$37,sequencingPolicy,lambda$registerEventHandler$49,messageMonitor,lambda$new$23,initializeProcessors,lambda$new$1,lambda$selectProcessingGroupByType$28,lambda$initializeProcessors$27,registerEventHandlerInvokers,packageOfObject,lambda$buildEventProcessor$46,lambda$new$2,lambda$registerSequencingPolicy$60,deadLetterQueue,lambda$registerHandlerInterceptor$59,lambda$new$4,lambda$registerErrorHandler$58,lambda$new$8,registerSagaManagers,defaultEventProcessor,lambda$registerTrackingEventProcessor$52,lambda$selectProcessingGroupByType$29,lambda$new$14,lambda$registerSagaManagers$43,noSagaProcessorCustomization,lambda$new$24,lambda$buildEventProcessor$44,lambda$registerEventHandlerInvokers$34,simpleInvoker,lambda$new$13,lambda$new$25,lambda$usingSubscribingEventProcessors$54,validateConfigInitialization",103,1,""
"org.axonframework.config.DefaultConfigurer",97,"lambda$static$0,lambda$null$17,lambda$null$43,lambda$null$12,lambda$null$36,lambda$null$32,lambda$null$25,lambda$null$35,lambda$null$31,lambda$defaultCommandBus$18,defaultResourceInjector,lambda$defaultQueryGateway$11,lambda$new$1,lambda$registerHandlerDefinition$44,lambda$jpaConfiguration$6,registerComponent,verifyIdentifierFactory,lambda$defaultSerializer$24,invokeInitHandlers,jpaConfiguration,lambda$invokeShutdownHandlers$50,lambda$invokeStartHandlers$49,lambda$defaultEventBus$22,lambda$defaultQueryBus$13,defaultEventGateway,lambda$registerCommandHandler$30,lambda$invokeLifecycleHandlers$52,defaultComponent,defaultHandlerDefinition,defaultCommandBus,lambda$jpaConfiguration$5,defaultDeadlineManager,registerModule,lambda$onShutdown$54,defaultConfiguration,lambda$defaultResourceInjector$19,defaultSerializer,lambda$defaultParameterResolverFactory$15,lambda$defaultConfiguration$4,invokeShutdownHandlers,lambda$registerMessageHandler$41,lambda$defaultQueryUpdateEmitter$14,lambda$defaultCommandGateway$10,defaultEventBus,defaultQueryGateway,lambda$defaultSnapshotter$26,lambda$null$46,retrieveHandlerDefinition,lambda$registerCommandHandler$33,lambda$new$2,defaultScopeAwareProvider,prepareMessageHandlerRegistrars,lambda$defaultHandlerDefinition$16,lambda$prepareModules$45,lambda$invokeInitHandlers$48,prepareModules,defaultUpcasterChain,registerCommandHandler,registerQueryHandler,defaultSpanFactory,lambda$jpaConfiguration$7,lambda$registerQueryHandler$34,lambda$configureEmbeddedEventStore$42,defaultSnapshotter,lambda$registerMessageHandler$40,lambda$defaultScopeAwareProvider$20,lambda$registerMessageHandler$39,lambda$onStart$53,lambda$jpaConfiguration$9,defaultQueryUpdateEmitter,lambda$defaultDeadlineManager$21,lambda$registerQueryHandler$37,lambda$eventProcessing$27,lambda$jpaConfiguration$8,lambda$registerMessageHandler$38,lambda$new$3,defaultCommandGateway,lambda$prepareMessageHandlerRegistrars$47,lambda$configureMessageMonitor$29,lambda$invokeLifecycleHandlers$51,lambda$eventProcessing$28,lambda$defaultEventGateway$23,eventProcessing,defaultParameterResolverFactory,defaultQueryBus,invokeLifecycleHandlers",86,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectResultMessagePayload,expectScheduledDeadlineMatching,recordException,expectExceptionDetails,expectTriggeredDeadlinesMatching,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectNoScheduledDeadlineWithName$2,expectTriggeredDeadlines,lambda$expectScheduledDeadlineWithName$1,verifyMetaDataEquality,lambda$expectNoScheduledDeadlineWithName$4,lambda$expectNoScheduledDeadlineMatching$5,expectNoScheduledDeadlineMatching,expectExceptionMessage,lambda$expectNoScheduledDeadlineMatching$3,lambda$expectScheduledDeadlineWithName$0,expectException,expectResultMessageMatching,verifyPayloadEquality,expectEvents",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"lambda$expectScheduledDeadlineWithName$1,expectScheduledDeadlineMatching,expectScheduledEventMatching,expectNoScheduledDeadlineMatching,expectTriggeredDeadlinesMatching,lambda$registerStartRecordingCallback$0,lambda$expectNoScheduledDeadlineMatching$4,lambda$expectScheduledDeadlineWithName$2,lambda$expectNoScheduledDeadlineWithName$5,lambda$expectNoScheduledDeadlineMatching$6,lambda$expectNoScheduledDeadlineWithName$3,expectNoScheduledEventMatching,expectTriggeredDeadlines,lambda$expectNoScheduledDeadlineWithName$7",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"invokeStartHandlers,access$900,access$600,access$1100,access$400,access$300,access$700,access$1200,access$1400,defaultComponent,invokeShutdownHandlers,access$1500,access$800,access$500,access$1000,access$200,access$1300",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"registerLifecycleHandler,isEarlierPhaseDuringShutdown,lambda$getComponent$1,lambda$null$0,lambda$registerLifecycleHandler$2,isEarlierPhaseDuringStartUp",6,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",56,"startRecording,registerStartRecordingCallback",2,1,""
"org.axonframework.test.saga.SagaTestFixture",55,"lambda$null$0,handleInSaga,lambda$handleInSaga$1,getPublisherFor,registerFieldFilter,getParameterResolverFactory,currentTime,registerResource,getHandlerDefinition,ensureSagaResourcesInitialized,getCommandBus,givenAggregate,timeCorrectedEventMessage,getResourceInjector,handleDeadline,registerCommandGateway",16,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"commitAsNested,phase,lambda$null$2,lambda$rollback$8,notifyHandlers,lambda$commit$5,lambda$start$0,lambda$commitAsNested$6,addHandler,setPhase,commitAsRoot,lambda$commit$4,setRollbackCause,delegateAfterCommitToParent,lambda$start$3,onRollback,changePhase,lambda$rollback$7,lambda$start$1",19,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"start,singleStatusUpdater,lambda$null$7,shutdownAsync,statusUpdater,lambda$calculateIdentifier$4,lambda$null$1,lambda$null$8,lambda$resetTokens$5,lambda$statusUpdater$13,lambda$resetTokens$10,lambda$resetTokens$6,isRunning,lambda$null$11,resetTokens,lambda$getTokenStoreIdentifier$3,lambda$null$9,lambda$singleStatusUpdater$12,supportsReset,calculateIdentifier,lambda$new$0,lambda$new$2,spawnWorker,releaseSegment",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"isFull,lambda$evict$4,lambda$processLetterAndFollowing$9,lambda$amountOfSequences$16,sequenceSize,lambda$enqueue$2,lambda$enqueue$0,getProcessingStartedLimit,lambda$enqueue$1,lambda$toLetter$7,findNextDeadLetter,entityManager,amountOfSequences,getNextIndexForSequence,lambda$findNextDeadLetter$11,lambda$deadLetterSequence$5,findFirstLetterOfEachAvailableSequence,claimDeadLetter,lambda$getMaxIndexForSequence$17,lambda$findFirstLetterOfEachAvailableSequence$10,toLetter,lambda$size$15,requeue,lambda$claimDeadLetter$12,getMaxIndexForSequence,lambda$enqueue$3,evict,lambda$sequenceSize$14,lambda$deadLetters$6,toStringSequenceIdentifier,lambda$toLetter$8,lambda$clear$13,processLetterAndFollowing",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$enqueue$1,lambda$findNextDeadLetter$11,lambda$getMaxIndexForSequence$17,lambda$claimDeadLetter$12,entityManager,findNextDeadLetter,lambda$size$15,isFull,findFirstLetterOfEachAvailableSequence,lambda$toLetter$7,lambda$enqueue$3,getMaxIndexForSequence,evict,requeue,claimDeadLetter,toLetter,lambda$toLetter$8,amountOfSequences,toStringSequenceIdentifier,lambda$deadLetterSequence$5,sequenceSize,lambda$deadLetters$6,lambda$enqueue$2,processLetterAndFollowing,lambda$evict$4,lambda$amountOfSequences$16,lambda$enqueue$0,lambda$clear$13,lambda$processLetterAndFollowing$9,lambda$findFirstLetterOfEachAvailableSequence$10,getProcessingStartedLimit,lambda$sequenceSize$14,getNextIndexForSequence",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$null$6,lambda$null$18,doCompleteExceptionally,lambda$null$7,lambda$doCompleteExceptionally$19,lambda$null$20,inStartedPhaseOfUnitOfWork,lambda$null$16,lambda$null$13,lambda$runOnAfterCommitOrNow$21,lambda$queryUpdateHandlerRegistered$0,lambda$emit$8,lambda$completeExceptionally$10,lambda$registerDispatchInterceptor$11,lambda$emit$5,lambda$doComplete$17,lambda$complete$9,intercept,lambda$registerUpdateHandler$1,doEmit,lambda$doEmit$14,lambda$registerUpdateHandler$2,lambda$payloadMatchesQueryResponseType$15,runOnAfterCommitOrNow,lambda$registerUpdateHandler$4,doComplete,payloadMatchesQueryResponseType,emitError,lambda$doEmit$12,lambda$registerUpdateHandler$3",31,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"lambda$aggregateConfiguration$5,lambda$eventProcessingConfiguration$4,getModules,lambda$findModules$0,eventBus,getComponent,lambda$findModules$1,aggregateConfiguration,lambda$aggregateConfiguration$6,lambda$getComponent$8,lambda$resourceInjector$2,findModules,lambda$aggregateConfiguration$7,lambda$eventProcessingConfiguration$3",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$700,access$2000,doSleepFor,getState,access$1300,access$600,access$1400,access$1500,access$800,access$2100,access$1100,access$1800,access$1000,access$900,access$1700,access$2200,access$1600,access$1200",18,1,""
"org.axonframework.config.Configurer",29,"eventProcessing,configureAggregate,buildConfiguration,lambda$configureMessageMonitor$1,registerComponent,registerQueryHandler,lambda$configureMessageMonitor$0,registerCommandHandler,registerModule,configureMessageMonitor",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"getState,access$1300,access$1400,access$1500,access$800,access$1100,processingLoop,access$1000,access$900,access$1200",10,1,""
"org.axonframework.config.Configuration",27,"spanFactory,messageMonitor,eventBus,getComponent,handlerDefinition,correlationDataProviders,parameterResolverFactory",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$700,access$600",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$2000,access$800,access$1000,releaseSegment",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$2000,access$800,access$1000",3,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"getAssociationValues,lambda$handle$7,lambda$handle$6,lambda$null$5,lambda$canHandle$4,lambda$handle$8,lambda$new$0,lambda$execute$2,handle,lambda$null$3,canHandle,lambda$invoke$1",13,1,""
"org.axonframework.config.Configuration",25,"spanFactory,messageMonitor,eventBus,commandBus,getComponent,upcasterChain,handlerDefinition,eventStore,findModules,correlationDataProviders,eventSerializer,parameterResolverFactory,snapshotFilter,queryBus,repository,scopeAwareProvider,messageSerializer,serializer",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"lambda$clear$7,lambda$evict$1,lambda$requeue$2,isFull,lambda$enqueue$0,builder,contains,maximumSequenceSizeReached,lambda$process$3,toIdentifier,maximumNumberOfSequencesReached,lambda$process$4,requeue,lambda$process$6,getLastTouchedSequence,lambda$process$5,evict",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$streamingQuery$4,lambda$getSubscriptionQueryResult$6,lambda$query$1,lambda$streamingQuery$3,lambda$getSubscriptionQueryResult$7,lambda$query$2,getSubscriptionQueryResult,lambda$query$0,getSubscriptionQueryMessage,processInterceptors,lambda$registerDispatchInterceptor$8,lambda$getSubscriptionQueryResult$5",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"getSegment,isErrorState,markError,unmarkError,caughtUp,isCaughtUp,advancedTo",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"lambda$schedulePayload$66ef0dda$1,lambda$schedulePayload$edc2443f$1,schedulePayloadAndMetadata,schedule,lambda$schedulePayloadAndMetadata$3b5ac046$1,publishWithRevision,publish,lambda$schedulePayloadAndMetadata$efde5fa1$1,schedulePayload,shutdown,createMessage,publishEventMessage,lambda$publishEventMessage$0",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"fetchSegments,lambda$fetchAvailableSegments$2,initializeTokenSegments,lambda$fetchAvailableSegments$1,lambda$fetchSegments$0,getConfig,validateSegment,lambda$retrieveStorageIdentifier$3,loadToken",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"loadToken,lambda$fetchSegments$0,getConfig,fetchSegments,validateSegment,initializeTokenSegments,lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$2,lambda$fetchAvailableSegments$1",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"lambda$cancelAll$1,advanceTimeTo,lambda$registerHandlerInterceptor$4,processDispatchInterceptors,lambda$cancelSchedule$0,lambda$registerDispatchInterceptor$3,schedule,advanceToNextTrigger,lambda$consumeDeadline$5,consumeDeadline,lambda$cancelAllWithinScope$2",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"isReplay,createReplayToken,lambda$isReplay$0,context,lambda$getTokenAtReset$2,replayContext,lambda$replayContext$1,advancedTo,getTokenAtReset",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"injectAggregateIdentifier,lambda$doAppendEvents$1,lambda$publish$0,lambda$doAppendEvents$2,openStream,lambda$registerDispatchInterceptor$4,doAppendEvents,lambda$subscribe$3",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"lambda$subscribe$5,createRepository,lambda$initializeInvokerThreads$1,doDispatch,dispatch,lambda$dispatch$2,lambda$registerDispatchInterceptor$6,lambda$registerHandlerInterceptor$7,lambda$initializePublisherThreads$0,initializeInvokerThreads,lambda$doDispatch$3,lambda$subscribe$4,initializePublisherThreads",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"next,initActiveIfRequired,nextSequenceNumber",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"getSegment,mergeCompletedPosition,isErrorState,getError,split,isMerging,isCaughtUp,isReplaying,getTrackingToken,getCurrentPosition,getResetPosition",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"isErrorState,markError,advancedTo",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"getEventSerializer,lambda$readSnapshot$1,readEventData,appendEvents,buildExceptionMessage,lambda$readSnapshot$0,storeSnapshot,getSnapshotSerializer,isFirstDomainEvent,readSnapshotData",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"lambda$getLastSequenceNumber$0,next,hasNext",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"lambda$closePrivateStream$0,peekGlobalStream,nextAvailable,peek,closePrivateStream,peekPrivateStream,lastToken,stopTailingGlobalStream,behindGlobalCache,nextNode",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"nextNode,lambda$closePrivateStream$0,lastToken,peekGlobalStream,behindGlobalCache,stopTailingGlobalStream,closePrivateStream,nextAvailable,peek,peekPrivateStream",10,1,""
"org.axonframework.messaging.GenericResultMessage",19,"isExceptional,withMetaData,findExceptionResult,getPayload,andMetaData",5,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"isActive,getAssociationValues,root,getSagaIdentifier",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getCurrentDateTime,getScheduledDeadlines,getTriggeredDeadlines",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$recordException$1,lambda$makeCurrent$0",2,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"lambda$fetchSegments$1,fetchSegments,initializeTokenSegments,lambda$storeToken$0",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"stagedDomainEventMessages,lambda$stagedDomainEventMessages$2,lambda$readEvents$3,handleSnapshotReadingError,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$0",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"hasNext,next",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"readNext,next",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$000,access$100",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$0,lambda$handle$3,lambda$handle$2,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"upperBound,queryResultType,lambda$new$0,unwrapType",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"lambda$null$5,lambda$createInternalSpan$7,lambda$null$6,lambda$createInternalSpan$8,lambda$getSpanMessage$3,lambda$createDispatchSpan$2,lambda$createRootTrace$0,lambda$getSpanMessage$4,getSpanMessage,lambda$createHandlerSpan$1",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$removeAll$2,lambda$get$1,lambda$computeIfPresent$4,lambda$containsKey$3,lambda$registerCacheEntryListener$0,purgeItems",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"initialize,lambda$initialize$2,lambda$initialize$1,lambda$ensureInitialized$3,processingGroup,lambda$eventProcessor$0,ensureInitialized",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$registerHandlerInterceptor$2,dispatchInterceptors,lambda$registerDispatchInterceptor$1,lambda$runOnPrepareCommitOrNow$0",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"doAdvance,mergePosition,lambda$mergePosition$0,lambda$mergePosition$1",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"nextAvailable,lambda$doConsumeNext$1,lambda$new$0,peekForMessages,messageSource,doConsumeNext,lambda$setOnAvailableCallback$4,lambda$setOnAvailableCallback$5,skipMessagesWithPayloadTypeOf,lambda$peekForMessages$2,lambda$skipMessagesWithPayloadTypeOf$3",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,split,getTrackingToken",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,getInternalTrackingToken",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment,getTrackingToken,split",3,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",17,"initialize",3,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"spanFactory,eventBus,commandBus,getComponent,handlerDefinition,eventStore,parameterResolverFactory,repository",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatchesAll,deadlineNameMatch",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$null$1,lambda$processInUnitOfWork$3,getSpanName,lambda$registerHandlerInterceptor$0,getName,processInUnitOfWork,lambda$null$2",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"upperSegmentToken,mergePosition,position,isMergeInProgress,lowerSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"isReplay,createReplayToken,position,getTokenAtReset,lowerBound",6,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$handle$3,lambda$new$0,lambda$canHandle$2,lambda$new$1",4,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",16,"optionalExceptionResult,andMetaData,withMetaData,isExceptional",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asNullableResponseMessage,asResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getType,getData",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"routingKey,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"lambda$canHandleType$3,canHandle,lambda$prepareReset$4,lambda$canHandle$1,lambda$canHandleType$2,lambda$handle$0,prepareReset,handle",8,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"withMetaData,andMetaData,withTrackingToken,trackingToken",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"skipMessagesWithPayloadTypeOf,access$300,setOnAvailableCallback,peek,hasNextAvailable,close",7,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getSequenceIdentifier,getIndex,getId",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getIndex,getSequenceIdentifier,getId",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"parametersMatch,checkAndRethrowForExceptionOrError,resolveParameterValues,typeMatches",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"handle,canHandle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isParameterizedType,isGenericAssignableFrom,isParameterizedTypeOfExpectedType,isAssignableFrom,isGenericArrayType,isTypeVariable,isWildcardType,isWildcardTypeWithMatchingUpperBound,isArray",9,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createRootTrace$0,lambda$createInternalSpan$4,lambda$registerSpanAttributeProvider$5,lambda$createDispatchSpan$2,lambda$createInternalSpan$3,lambda$createHandlerSpan$1",6,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"isFactoryHandler,commandName",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName",1,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"dispatch,intercept,lambda$registerDispatchInterceptor$1,localSegment,lambda$subscribe$0,disconnect,updateFilter,shutdownDispatching",8,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"withMetaData,lambda$asDeadlineMessage$1,asDeadlineMessage,andMetaData,lambda$asDeadlineMessage$0",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"canHandle,lambda$performReset$2,flatten,performReset,lambda$canHandleType$1,delegates,lambda$canHandle$0",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"isExceptional,withMetaData,andMetaData,exceptionDetails,optionalExceptionResult",5,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$InterceptedMessageHandlingMember",14,"lambda$new$0,lambda$new$1",2,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"type,types",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregate",14,"initialize",1,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"loadAssociationValues,serializedObjectType,addNamedQueriesTo,createSagaEntry,sagaEntryEntityName,removeAssociationValue,serializedSagaAsString,getSagaTypeName,storeAssociationValue",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"createSagaEntry,addNamedQueriesTo,serializedObjectType,loadAssociationValues,storeAssociationValue,removeAssociationValue,sagaEntryEntityName,serializedSagaAsString,getSagaTypeName",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"andMetaData,withMetaData,getQueryName,getResponseType",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"spanFactory,eventProcessingConfiguration,handlerDefinition,parameterResolverFactory,resourceInjector",5,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"withTrackingToken,trackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"upperSegmentToken,isLowerSegmentAdvanced,isUpperSegmentAdvanced,lowerSegmentToken",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"hasHandler,performReset,sequenceIdentifier,lambda$canHandleType$1,lambda$new$0,invokeHandlers,detectList,sequencingPolicyMatchesSegment",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$0,lambda$readEvents$1",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"diagnostics,cause,enqueuedAt,message,lambda$new$0",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$removeAssociationValueFromCache$2,cacheKey,lambda$findSagas$0,removeAssociationValueFromCache,lambda$updateSaga$4,lambda$deleteSaga$1,addCachedAssociations,lambda$addCachedAssociations$3",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$load$3,lambda$newInstance$1,canResolve,lambda$loadOrCreate$0,lambda$getAggregate$4,lambda$load$2,load,validateIdentifier",8,1,""
"org.axonframework.test.saga.EventValidator",13,"assertPublishedEventsMatching,lambda$startRecording$0,handle,createEqualToMatchers,unwrapEvent",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"andMetaData,withMetaData,getCommandName",3,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"newInstance,canResolve,removeFromCache,lambda$load$0,load",5,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"andMetaData,getTimestamp,withMetaData",3,1,""
"org.axonframework.eventhandling.GenericEventMessage",12,"asEventMessage",1,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"buildTrigger,lambda$cancelSchedule$1,buildJobDetail,schedule,shutdown,lambda$schedule$0,initialize",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"lambda$readEvents$0,readEvents",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"isLockHeld,version,getWrappedAggregate",3,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",12,"initializeAt,advanceTimeBy,advanceTimeTo,getCurrentDateTime",4,1,""
"org.axonframework.commandhandling.CommandMessage",11,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"lambda$send$0,send,asRuntime",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.messaging.ResultMessage",11,"exceptionResult,isExceptional",2,1,""
"org.axonframework.queryhandling.QueryGateway",11,"query,subscriptionQuery,scatterGather,streamingQuery",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"withMetaData,andMetaData,getQueryName",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"revisionOf,registerConverters,doDeserialize,typeForClass,getConverter,doSerialize,classForType,typeIdentifierOf",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"registerConverters,builder,classForType,typeForClass,resolveClassName,getReader,getWriter",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"load,newInstance,canResolve,lambda$newInstance$0",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"doRegisterListener,createListenerAdapter,lambda$registerCacheEntryListener$0",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"snapshotFilter,repository,aggregateType,aggregateFactory",4,1,""
"org.axonframework.config.Configuration",10,"eventProcessingConfiguration,findModules",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"reportIgnored,canHandle,processInUnitOfWork",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"getIdentifier,andMetaData",2,1,""
"org.axonframework.eventhandling.GenericEventMessage",10,"describeTo",1,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"skipMessagesWithPayloadTypeOf,nextAvailable",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"performReset,sequenceIdentifier,eventHandlers,invokeHandlers,sequencingPolicyMatchesSegment",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"processingStatus,lambda$isReplaying$0,resetTokens",3,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2500,access$2600",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,getIdentifier,describeType,getMetaData,describeTo",5,1,""
"org.axonframework.messaging.MessageDecorator",10,"getPayload,serializePayload",2,1,""
"org.axonframework.messaging.ResultMessage",10,"exceptionResult,isExceptional",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"getAll,isEmpty,mergedWith,get,contains",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"getSerializedType,revisionOf,classForType",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",9,"load",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,getGlobalIndex,next",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,lambda$lowerBound$0,compareTo,lambda$upperBound$1,lambda$covers$2",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTokenAt,createTokenSince,createTailToken,createHeadToken,sourceId",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"alterToken,nextAvailable",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$600,access$400,access$500,access$300",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$null$0,prefixedKey,lambda$constructHandlerAttributesFor$1,constructHandlerAttributesFor",4,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"loadAssociations,sagaTypeName",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"equals,access$100,toString,hashes",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateType,aggregateFactory",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2100,access$1900",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"lowerBound,unwrap,advancedTo,upperBound",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"size,findSagas",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"canConvert,registerConverter",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceTimeTo,advanceToNextTrigger",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getAggregateIdentifier,getSequenceNumber,getType",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"prepareReset,handle,supportsReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"getTokenForStream,advancedTo",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"canHandle,lambda$handle$0,handle",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"canHandle,handle,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"createProperty,getHandlerName,lambda$getProperty$0,getProperty",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"lambda$hashes$0,name",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"lock,isHeldBy,queuedThreads",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"prepareReset,handle",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"openStream,sourceId",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$1,lambda$convert$0",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"unexpectedEvents,lambda$unexpectedEvents$0",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"initializeAggregateFactory",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"handle,canHandle",2,1,""
"org.axonframework.modelling.command.Repository",6,"load,newInstance,loadOrCreate",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$findHandlerMethods$1,lambda$resolveAssociation$0",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$0,lambda$findSagas$1",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.ChainedConverter",6,"isContinuous,calculateRoute",2,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getType,getData,getContentType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"disposeIfUnused,checkForDeadlock",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getGaps,getIndex",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$process$1,lambda$handle$0",2,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"lambda$handle$0,validateMessage",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0,lambda$onMessageIngested$1",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"bytesFrom,convert",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
