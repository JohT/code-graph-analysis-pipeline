"dependentType.fqn","declaredMethods","calledMethodNames","calledMethods","callerTypes","Source Cypher File: Candidates_for_Interface_Segregation.cypher"
"org.axonframework.commandhandling.CommandMessage",9,"getCommandName",1,17,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber",1,8,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp,getIdentifier",2,8,""
"org.axonframework.eventhandling.EventMessage",9,"getIdentifier",1,8,""
"org.axonframework.eventhandling.TrackedEventMessage",10,"trackingToken",1,7,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType,getSequenceNumber,getAggregateIdentifier",3,5,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"asCommandResultMessage",1,4,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",1,4,""
"org.axonframework.eventhandling.TrackedEventMessage",12,"trackingToken",1,4,""
"org.axonframework.deadline.GenericDeadlineMessage",11,"asDeadlineMessage",1,4,""
"org.axonframework.deadline.DeadlineMessage",10,"getDeadlineName",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getType",1,4,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getAggregateIdentifier",1,4,""
"org.axonframework.eventhandling.GenericEventMessage",10,"asEventMessage",1,4,""
"org.axonframework.messaging.ResultMessage",9,"isExceptional,exceptionResult",2,4,""
"org.axonframework.common.transaction.NoTransactionManager",4,"instance",1,4,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"type",1,3,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getType,getSequenceNumber,getAggregateIdentifier",3,3,""
"org.axonframework.eventhandling.DomainEventMessage",10,"getSequenceNumber,getAggregateIdentifier",2,3,""
"org.axonframework.eventhandling.GapAwareTrackingToken",10,"advanceTo,getGaps,withGapsTruncatedAt,getIndex,newInstance",5,3,""
"org.axonframework.eventhandling.EventMessage",9,"getTimestamp",1,3,""
"org.axonframework.eventhandling.TrackedEventData",5,"trackingToken",1,3,""
"org.axonframework.eventhandling.tokenstore.ConfigToken",5,"get",1,3,""
"org.axonframework.eventhandling.TrackerStatus",17,"split,getTrackingToken,getSegment",3,2,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",17,"builder",1,2,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",14,"commandName,isFactoryHandler",2,2,""
"org.axonframework.commandhandling.GenericCommandResultMessage",14,"asCommandResultMessage",2,2,""
"org.axonframework.deadline.DeadlineMessage",14,"getDeadlineName",1,2,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",1,2,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"handle",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",13,"getSequenceNumber,getAggregateIdentifier",2,2,""
"org.axonframework.eventhandling.ReplayToken",13,"isReplay",1,2,""
"org.axonframework.eventhandling.ReplayToken",13,"createReplayToken",1,2,""
"org.axonframework.commandhandling.GenericCommandMessage",11,"asCommandMessage",1,2,""
"org.axonframework.eventhandling.DomainEventMessage",11,"getSequenceNumber",1,2,""
"org.axonframework.eventhandling.GenericEventMessage",11,"asEventMessage",1,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"withTrackingToken,trackingToken",2,2,""
"org.axonframework.eventhandling.TrackedEventMessage",11,"trackingToken",1,2,""
"org.axonframework.config.Configuration",9,"getComponent",1,2,""
"org.axonframework.eventhandling.EventMessage",9,"andMetaData",1,2,""
"org.axonframework.messaging.MessageDecorator",9,"describeTo",1,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getResponseType,getQueryName",2,2,""
"org.axonframework.queryhandling.QueryMessage",9,"getQueryName",1,2,""
"org.axonframework.commandhandling.AnnotationCommandHandlerAdapter",6,"subscribe",1,2,""
"org.axonframework.serialization.ChainingConverter",5,"registerConverter",1,2,""
"org.axonframework.serialization.SimpleSerializedObject",4,"getType",1,2,""
"org.axonframework.config.EventProcessingModule",156,"lambda$null$33,lambda$null$32,lambda$annotatedProcessingGroupOfType$70,lambda$null$35,lambda$null$42,lambda$null$18,annotatedProcessingGroupOfType,lambda$null$11,subscribingEventProcessor,lambda$pooledStreamingEventProcessor$68,pooledStreamingEventProcessor,defaultExecutor,lambda$null$40,lambda$null$36,trackingEventProcessor,lambda$registerDeadLetterPolicy$67,lambda$null$19,lambda$null$26,lambda$pooledStreamingEventProcessor$69,trackingEventProcessorConfig,lambda$null$31,lambda$null$41,lambda$static$0,lambda$new$4,errorHandler,lambda$new$9,lambda$registerSubscribingEventProcessor$57,lambda$registerDeadLetterQueue$66,lambda$selectProcessingGroupByType$28,simpleInvoker,lambda$buildEventProcessor$45,lambda$new$15,lambda$usingTrackingEventProcessors$55,lambda$registerTrackingEventProcessor$51,lambda$registerEventHandlerInvokers$34,lambda$new$16,lambda$registerTrackingEventProcessorConfiguration$64,messageMonitor,noSagaProcessorCustomization,processorNameForProcessingGroup,lambda$sagaConfigurations$48,lambda$new$17,rollbackConfiguration,lambda$registerTrackingEventProcessor$52,lambda$new$10,lambda$new$7,lambda$new$8,lambda$registerTransactionManager$62,lambda$registerHandlerInterceptor$59,lambda$new$23,lambda$new$12,lambda$new$14,lambda$registerEventHandlerInvokers$37,sequencingPolicy,lambda$registerSagaManagers$43,deadLetteringInvoker,lambda$usingSubscribingEventProcessors$54,lambda$new$1,lambda$registerTokenStore$53,lambda$new$20,lambda$deadLetteringInvoker$39,deadLetterPolicy,lambda$registerSequencingPolicy$60,eventProcessors,registerEventProcessor,deadLetterQueue,initializeProcessors,lambda$new$25,lambda$new$22,lambda$new$13,registerTrackingEventProcessor,registerEventHandlerInvokers,lambda$new$3,retrieveHandlerDefinition,lambda$deadLetteringInvoker$38,tokenStore,defaultEventProcessor,packageOfObject,buildEventProcessor,validateConfigInitialization,lambda$registerPooledStreamingEventProcessor$65,lambda$eventProcessors$47,lambda$registerRollbackConfiguration$61,lambda$new$2,listenerInvocationErrorHandler,lambda$new$6,registerTrackingEventProcessorConfiguration,lambda$buildEventProcessor$46,selectProcessingGroupByType,lambda$new$24,lambda$initializeProcessors$27,lambda$selectProcessingGroupByType$29,lambda$new$5,lambda$new$21,lambda$registerTrackingEventProcessorConfiguration$63,lambda$registerEventHandlerInvokers$30,registerSagaManagers,lambda$buildEventProcessor$44,lambda$registerErrorHandler$58,transactionManager,lambda$registerListenerInvocationErrorHandler$50,lambda$registerEventHandler$49,lambda$usingPooledStreamingEventProcessors$56",103,1,""
"org.axonframework.config.DefaultConfigurer",97,"defaultSpanFactory,lambda$null$17,lambda$null$12,lambda$static$0,lambda$null$31,lambda$null$35,lambda$null$25,lambda$null$36,lambda$null$32,prepareModules,lambda$new$2,lambda$defaultDeadlineManager$21,defaultCommandGateway,lambda$defaultQueryUpdateEmitter$14,lambda$invokeStartHandlers$49,lambda$registerHandlerDefinition$44,verifyIdentifierFactory,lambda$defaultParameterResolverFactory$15,invokeLifecycleHandlers,defaultCommandBus,lambda$registerQueryHandler$34,lambda$registerMessageHandler$41,lambda$defaultScopeAwareProvider$20,lambda$jpaConfiguration$9,jpaConfiguration,lambda$jpaConfiguration$8,defaultEventBus,lambda$defaultHandlerDefinition$16,defaultQueryUpdateEmitter,lambda$invokeLifecycleHandlers$51,lambda$registerMessageHandler$40,lambda$registerMessageHandler$39,lambda$registerCommandHandler$33,lambda$invokeLifecycleHandlers$52,lambda$prepareModules$45,defaultSerializer,defaultUpcasterChain,lambda$null$43,lambda$jpaConfiguration$6,lambda$invokeInitHandlers$48,registerComponent,lambda$defaultCommandBus$18,registerCommandHandler,lambda$defaultEventBus$22,registerQueryHandler,lambda$registerQueryHandler$37,lambda$eventProcessing$28,defaultQueryGateway,lambda$configureEmbeddedEventStore$42,lambda$defaultSnapshotter$26,prepareMessageHandlerRegistrars,lambda$defaultEventGateway$23,invokeShutdownHandlers,invokeInitHandlers,lambda$eventProcessing$27,lambda$defaultConfiguration$4,lambda$new$3,lambda$defaultSerializer$24,defaultScopeAwareProvider,lambda$registerMessageHandler$38,lambda$defaultCommandGateway$10,lambda$null$46,defaultQueryBus,defaultDeadlineManager,defaultParameterResolverFactory,lambda$invokeShutdownHandlers$50,retrieveHandlerDefinition,eventProcessing,lambda$jpaConfiguration$5,lambda$defaultQueryBus$13,lambda$jpaConfiguration$7,lambda$defaultResourceInjector$19,lambda$new$1,defaultSnapshotter,defaultResourceInjector,lambda$registerCommandHandler$30,registerModule,defaultComponent,lambda$prepareMessageHandlerRegistrars$47,defaultEventGateway,lambda$defaultQueryGateway$11,lambda$onStart$53,defaultHandlerDefinition,defaultConfiguration,lambda$onShutdown$54,lambda$configureMessageMonitor$29",86,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",85,"aggregateModel,lambda$whenConstructing$4,currentTime,lambda$whenInvoking$6,buildResultValidator,ensureValuesEqual,handleDeadline,lambda$when$7,when,lambda$null$5,lambda$buildResultValidator$9,whenTimeAdvancesTo,failIllegalStateChange,lambda$when$8,lambda$null$3,lambda$when$2,detectIllegalStateChanges,assertValidWorkingAggregateState,andGivenCurrentTime,whenTimeElapses,registerRepository,ensureRepositoryConfiguration,givenCommands,getRepositoryProvider,useStateStorage,given,clearGivenWhenState,lambda$andGivenCommands$1,registerRepositoryProvider,getParameterResolverFactory,executeAtSimulatedTime,registerAggregateCommandHandlers,andGivenCommands,lambda$givenState$0,finalizeConfiguration,registerCommandHandler,registerFieldFilter,andGiven,getHandlerDefinition",40,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",79,"expectExceptionMessage,expectTriggeredDeadlines,verifyPayloadEquality,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineMatching$3,expectScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$2,expectTriggeredDeadlinesMatching,lambda$expectScheduledDeadlineWithName$0,lambda$expectNoScheduledDeadlineWithName$6,lambda$expectNoScheduledDeadlineWithName$4,expectExceptionDetails,recordException,expectEvents,lambda$expectScheduledDeadlineWithName$1,expectResultMessagePayload,expectResultMessageMatching,expectException,verifyMetaDataEquality,lambda$expectNoScheduledDeadlineMatching$5",24,1,""
"org.axonframework.test.saga.FixtureExecutionResultImpl",79,"expectTriggeredDeadlinesMatching,expectTriggeredDeadlines,lambda$registerStartRecordingCallback$0,lambda$expectScheduledDeadlineWithName$1,lambda$expectNoScheduledDeadlineWithName$3,lambda$expectNoScheduledDeadlineMatching$6,expectNoScheduledDeadlineMatching,lambda$expectNoScheduledDeadlineWithName$7,expectNoScheduledEventMatching,lambda$expectScheduledDeadlineWithName$2,expectScheduledDeadlineMatching,expectScheduledEventMatching,lambda$expectNoScheduledDeadlineMatching$4,lambda$expectNoScheduledDeadlineWithName$5",20,1,""
"org.axonframework.config.DefaultConfigurer",66,"invokeStartHandlers,access$300,access$200,access$800,access$700,access$1200,access$400,access$1500,access$1000,access$600,access$1300,invokeShutdownHandlers,access$900,access$1400,access$1100,defaultComponent,access$500",17,1,""
"org.axonframework.config.DefaultConfigurer$ConfigurationImpl",57,"isEarlierPhaseDuringShutdown,lambda$null$0,lambda$getComponent$1,registerLifecycleHandler,lambda$registerLifecycleHandler$2,isEarlierPhaseDuringStartUp",6,1,""
"org.axonframework.test.aggregate.ResultValidatorImpl",53,"recordException,assertValidRecording",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",51,"access$700,access$602,access$800,access$600,access$900",5,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",50,"lambda$commit$4,changePhase,addHandler,commitAsRoot,lambda$start$3,lambda$start$1,notifyHandlers,lambda$start$0,phase,lambda$commit$5,delegateAfterCommitToParent,lambda$rollback$8,setPhase,lambda$null$2,setRollbackCause,lambda$rollback$7,onRollback,commitAsNested,lambda$commitAsNested$6",19,1,""
"org.axonframework.test.aggregate.AggregateTestFixture",48,"access$1100",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",44,"lambda$resetTokens$5,lambda$null$8,spawnWorker,resetTokens,lambda$singleStatusUpdater$12,singleStatusUpdater,calculateIdentifier,lambda$null$1,lambda$new$0,lambda$null$11,statusUpdater,lambda$resetTokens$6,supportsReset,lambda$getTokenStoreIdentifier$3,lambda$new$2,lambda$calculateIdentifier$4,lambda$null$9,lambda$resetTokens$10,lambda$null$7,releaseSegment,lambda$statusUpdater$13,isRunning,shutdownAsync,start",27,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",41,"lambda$sequenceSize$14,lambda$findFirstLetterOfEachAvailableSequence$10,sequenceSize,findNextDeadLetter,findFirstLetterOfEachAvailableSequence,lambda$toLetter$8,lambda$getMaxIndexForSequence$17,getNextIndexForSequence,lambda$enqueue$2,lambda$enqueue$1,lambda$evict$4,lambda$toLetter$7,toStringSequenceIdentifier,lambda$claimDeadLetter$12,amountOfSequences,toLetter,lambda$amountOfSequences$16,requeue,claimDeadLetter,lambda$clear$13,getMaxIndexForSequence,isFull,entityManager,lambda$size$15,processLetterAndFollowing,lambda$enqueue$3,lambda$deadLetterSequence$5,lambda$findNextDeadLetter$11,lambda$processLetterAndFollowing$9,lambda$enqueue$0,evict,getProcessingStartedLimit,lambda$deadLetters$6",33,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaSequencedDeadLetterQueue",41,"lambda$toLetter$8,lambda$enqueue$0,lambda$size$15,getProcessingStartedLimit,claimDeadLetter,lambda$deadLetters$6,lambda$findFirstLetterOfEachAvailableSequence$10,toLetter,isFull,lambda$deadLetterSequence$5,lambda$claimDeadLetter$12,requeue,lambda$getMaxIndexForSequence$17,lambda$enqueue$3,lambda$evict$4,lambda$toLetter$7,toStringSequenceIdentifier,entityManager,evict,lambda$amountOfSequences$16,lambda$enqueue$1,lambda$findNextDeadLetter$11,amountOfSequences,lambda$sequenceSize$14,lambda$processLetterAndFollowing$9,lambda$clear$13,getMaxIndexForSequence,sequenceSize,findNextDeadLetter,findFirstLetterOfEachAvailableSequence,lambda$enqueue$2,getNextIndexForSequence,processLetterAndFollowing",33,1,""
"org.axonframework.queryhandling.SimpleQueryUpdateEmitter",40,"lambda$doCompleteExceptionally$19,doCompleteExceptionally,runOnAfterCommitOrNow,lambda$emit$5,lambda$registerDispatchInterceptor$11,intercept,lambda$null$7,doEmit,lambda$null$13,lambda$runOnAfterCommitOrNow$21,lambda$null$6,lambda$null$20,lambda$registerUpdateHandler$1,lambda$doEmit$14,lambda$queryUpdateHandlerRegistered$0,lambda$doEmit$12,payloadMatchesQueryResponseType,lambda$registerUpdateHandler$4,lambda$null$18,lambda$registerUpdateHandler$2,doComplete,emitError,lambda$complete$9,lambda$doComplete$17,inStartedPhaseOfUnitOfWork,lambda$null$16,lambda$emit$8,lambda$registerUpdateHandler$3,lambda$completeExceptionally$10,lambda$payloadMatchesQueryResponseType$15",31,1,""
"org.axonframework.messaging.unitofwork.AbstractUnitOfWork",34,"rollback",1,1,""
"org.axonframework.config.Configuration",32,"findModules,lambda$aggregateConfiguration$7,lambda$getComponent$8,lambda$eventProcessingConfiguration$3,getComponent,lambda$aggregateConfiguration$6,aggregateConfiguration,lambda$findModules$1,lambda$findModules$0,lambda$resourceInjector$2,eventBus,getModules,lambda$eventProcessingConfiguration$4,lambda$aggregateConfiguration$5",15,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",31,"access$1600,access$1200,access$800,access$600,getState,access$1100,access$2200,access$1700,doSleepFor,access$2000,access$700,access$900,access$1400,access$1800,access$1500,access$1000,access$1300,access$2100",18,1,""
"org.axonframework.config.Configurer",29,"eventProcessing,configureAggregate,buildConfiguration,registerQueryHandler,registerCommandHandler,registerModule,lambda$configureMessageMonitor$0,configureMessageMonitor,registerComponent,lambda$configureMessageMonitor$1",11,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",28,"access$1200,access$800,getState,processingLoop,access$1100,access$900,access$1400,access$1500,access$1000,access$1300",10,1,""
"org.axonframework.config.Configuration",27,"messageMonitor,parameterResolverFactory,correlationDataProviders,spanFactory,getComponent,eventBus,handlerDefinition",7,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",27,"access$600,access$700",2,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$800,access$2000,access$1000",3,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"access$800,releaseSegment,access$2000,access$1000",4,1,""
"org.axonframework.eventhandling.TrackingEventProcessor",26,"builder",1,1,""
"org.axonframework.eventhandling.pooled.PooledStreamingEventProcessor",26,"builder",1,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",26,"lambda$canHandle$4,handle,lambda$handle$8,canHandle,getAssociationValues,lambda$new$0,lambda$handle$6,lambda$null$3,lambda$execute$2,lambda$null$5,lambda$invoke$1,lambda$handle$7",13,1,""
"org.axonframework.config.Configuration",25,"scopeAwareProvider,queryBus,findModules,commandBus,messageMonitor,parameterResolverFactory,correlationDataProviders,repository,upcasterChain,spanFactory,getComponent,eventStore,serializer,eventBus,messageSerializer,handlerDefinition,snapshotFilter,eventSerializer",19,1,""
"org.axonframework.messaging.deadletter.InMemorySequencedDeadLetterQueue",25,"lambda$process$5,requeue,lambda$process$6,getLastTouchedSequence,lambda$enqueue$0,lambda$clear$7,lambda$requeue$2,builder,lambda$process$4,lambda$process$3,maximumSequenceSizeReached,contains,toIdentifier,evict,maximumNumberOfSequencesReached,lambda$evict$1,isFull",17,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",25,"lambda$registerDispatchInterceptor$8,lambda$query$0,lambda$streamingQuery$3,processInterceptors,lambda$query$1,lambda$streamingQuery$4,lambda$query$2,lambda$getSubscriptionQueryResult$5,lambda$getSubscriptionQueryResult$7,getSubscriptionQueryMessage,lambda$getSubscriptionQueryResult$6,getSubscriptionQueryResult",12,1,""
"org.axonframework.eventhandling.TrackerStatus",24,"advancedTo,isErrorState,caughtUp,unmarkError,getSegment,isCaughtUp,markError",7,1,""
"org.axonframework.eventhandling.scheduling.jobrunr.JobRunrEventScheduler",23,"shutdown,lambda$schedulePayload$66ef0dda$1,lambda$schedulePayload$edc2443f$1,schedulePayloadAndMetadata,publish,createMessage,publishWithRevision,lambda$schedulePayloadAndMetadata$3b5ac046$1,schedule,schedulePayload,publishEventMessage,lambda$schedulePayloadAndMetadata$efde5fa1$1,lambda$publishEventMessage$0",16,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",23,"lambda$fetchAvailableSegments$1,lambda$fetchAvailableSegments$2,lambda$retrieveStorageIdentifier$3,validateSegment,initializeTokenSegments,loadToken,fetchSegments,getConfig,lambda$fetchSegments$0",10,1,""
"org.axonframework.eventhandling.tokenstore.legacyjpa.JpaTokenStore",23,"lambda$fetchAvailableSegments$1,lambda$retrieveStorageIdentifier$3,lambda$fetchAvailableSegments$2,initializeTokenSegments,fetchSegments,lambda$fetchSegments$0,loadToken,getConfig,validateSegment",10,1,""
"org.axonframework.test.deadline.StubDeadlineManager",23,"advanceTimeTo,lambda$cancelAllWithinScope$2,lambda$registerHandlerInterceptor$4,lambda$consumeDeadline$5,consumeDeadline,schedule,processDispatchInterceptors,advanceToNextTrigger,lambda$cancelAll$1,lambda$cancelSchedule$0,lambda$registerDispatchInterceptor$3",11,1,""
"org.axonframework.eventhandling.ReplayToken",22,"getTokenAtReset,isReplay,lambda$isReplay$0,createReplayToken,lambda$replayContext$1,lambda$getTokenAtReset$2,context,replayContext,advancedTo",11,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$RecordingEventStore",22,"lambda$doAppendEvents$1,lambda$subscribe$3,openStream,lambda$publish$0,lambda$registerDispatchInterceptor$4,doAppendEvents,injectAggregateIdentifier,lambda$doAppendEvents$2",8,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",21,"createRepository,dispatch,lambda$registerHandlerInterceptor$7,lambda$registerDispatchInterceptor$6,lambda$initializePublisherThreads$0,doDispatch,lambda$doDispatch$3,lambda$subscribe$5,initializeInvokerThreads,initializePublisherThreads,lambda$subscribe$4,lambda$dispatch$2,lambda$initializeInvokerThreads$1",16,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine$ConcatenatingDomainEventStream",21,"next,nextSequenceNumber,initActiveIfRequired",3,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"getCurrentPosition,getError,mergeCompletedPosition,split,isErrorState,getTrackingToken,isMerging,isReplaying,getSegment,isCaughtUp,getResetPosition",11,1,""
"org.axonframework.eventhandling.TrackerStatus",19,"advancedTo,isErrorState,markError",3,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStorageEngine",19,"lambda$readSnapshot$1,appendEvents,getEventSerializer,readSnapshotData,readEventData,getSnapshotSerializer,storeSnapshot,isFirstDomainEvent,buildExceptionMessage,lambda$readSnapshot$0",11,1,""
"org.axonframework.eventsourcing.eventstore.ConcatenatingDomainEventStream",19,"hasNext,lambda$getLastSequenceNumber$0,next",3,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",19,"lambda$closePrivateStream$0,peekPrivateStream,peekGlobalStream,stopTailingGlobalStream,peek,lastToken,nextAvailable,behindGlobalCache,nextNode,closePrivateStream",10,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",19,"peekGlobalStream,peek,nextNode,peekPrivateStream,nextAvailable,stopTailingGlobalStream,behindGlobalCache,closePrivateStream,lastToken,lambda$closePrivateStream$0",10,1,""
"org.axonframework.modelling.saga.AnnotatedSaga",19,"getAssociationValues,isActive,getSagaIdentifier,root",4,1,""
"org.axonframework.test.deadline.StubDeadlineManager",19,"getTriggeredDeadlines,getScheduledDeadlines,getCurrentDateTime",3,1,""
"org.axonframework.tracing.MultiSpanFactory$MultiSpan",19,"lambda$recordException$1,lambda$makeCurrent$0",2,1,""
"org.axonframework.eventhandling.tokenstore.inmemory.InMemoryTokenStore",18,"initializeTokenSegments,fetchSegments,lambda$storeToken$0,lambda$fetchSegments$1",4,1,""
"org.axonframework.eventsourcing.eventstore.AbstractEventStore",18,"handleSnapshotReadingError,lambda$stagedDomainEventMessages$2,lambda$readEvents$3,lambda$stagedDomainEventMessages$1,lambda$stagedDomainEventMessages$0,stagedDomainEventMessages",6,1,""
"org.axonframework.eventsourcing.eventstore.FilteringDomainEventStream",18,"next,hasNext",2,1,""
"org.axonframework.eventsourcing.eventstore.IteratorBackedDomainEventStream",18,"next,readNext",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory$AnnotatedAggregateModel",18,"access$000,access$100",2,1,""
"org.axonframework.modelling.command.inspection.ChildForwardingCommandMessageHandlingMember",18,"lambda$handle$0,lambda$handle$2,lambda$handle$3,lambda$handle$1",4,1,""
"org.axonframework.queryhandling.annotation.MethodQueryMessageHandlerDefinition$MethodQueryMessageHandlingMember",18,"unwrapType,queryResultType,lambda$new$0,upperBound",4,1,""
"org.axonframework.tracing.LoggingSpanFactory",18,"getSpanMessage,lambda$createInternalSpan$7,lambda$getSpanMessage$3,lambda$createInternalSpan$8,lambda$createRootTrace$0,lambda$createDispatchSpan$2,lambda$null$6,lambda$getSpanMessage$4,lambda$null$5,lambda$createHandlerSpan$1",10,1,""
"org.axonframework.tracing.NoOpSpanFactory$NoOpSpan",18,"lambda$makeCurrent$0",1,1,""
"org.axonframework.commandhandling.MethodCommandHandlerDefinition$MethodCommandMessageHandlingMember",17,"lambda$new$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",17,"lambda$get$1,lambda$removeAll$2,lambda$registerCacheEntryListener$0,lambda$containsKey$3,purgeItems,lambda$computeIfPresent$4",6,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",17,"lambda$ensureInitialized$3,lambda$initialize$1,lambda$initialize$2,processingGroup,initialize,lambda$eventProcessor$0,ensureInitialized",7,1,""
"org.axonframework.deadline.AbstractDeadlineManager",17,"lambda$runOnPrepareCommitOrNow$0,dispatchInterceptors,lambda$registerDispatchInterceptor$1,lambda$registerHandlerInterceptor$2",4,1,""
"org.axonframework.eventhandling.MergedTrackingToken",17,"lambda$mergePosition$1,mergePosition,doAdvance,lambda$mergePosition$0",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$MultiSourceBlockingStream",17,"nextAvailable,lambda$doConsumeNext$1,lambda$skipMessagesWithPayloadTypeOf$3,lambda$peekForMessages$2,lambda$setOnAvailableCallback$5,skipMessagesWithPayloadTypeOf,lambda$setOnAvailableCallback$4,lambda$new$0,peekForMessages,doConsumeNext,messageSource",11,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"caughtUp",1,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getInternalTrackingToken,getSegment",2,1,""
"org.axonframework.eventhandling.TrackerStatus",17,"getSegment",1,1,""
"org.axonframework.eventsourcing.eventstore.DomainEventStream$2",17,"next",1,1,""
"org.axonframework.queryhandling.DefaultQueryGateway",17,"builder",1,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",16,"asCommandResultMessage",2,1,""
"org.axonframework.config.Configuration",16,"commandBus,parameterResolverFactory,repository,spanFactory,eventStore,getComponent,eventBus,handlerDefinition",8,1,""
"org.axonframework.deadline.annotation.DeadlineMethodMessageHandlerDefinition$DeadlineMethodMessageHandlingMember",16,"deadlineNameMatch,deadlineNameMatchesAll",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",16,"lambda$processInUnitOfWork$3,processInUnitOfWork,lambda$null$2,getName,lambda$registerHandlerInterceptor$0,getSpanName,lambda$null$1",7,1,""
"org.axonframework.eventhandling.MergedTrackingToken",16,"upperSegmentToken,mergePosition,isMergeInProgress,position,lowerSegmentToken",5,1,""
"org.axonframework.eventhandling.ReplayToken",16,"getTokenAtReset,lowerBound,isReplay,position,createReplayToken",6,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaSequencedDeadLetterQueue",16,"deadLetterSequence",1,1,""
"org.axonframework.messaging.annotation.MessageHandlerInterceptorDefinition$ResultHandlingInterceptorMember",16,"lambda$new$1,lambda$canHandle$2,lambda$handle$3,lambda$new$0",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",16,"asNullableResponseMessage,asResponseMessage",2,1,""
"org.axonframework.serialization.upcasting.event.UpcastedEventRepresentation",16,"getData,getType",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,isFactoryHandler",2,1,""
"org.axonframework.commandhandling.CommandMessageHandlingMember",15,"commandName,routingKey",2,1,""
"org.axonframework.commandhandling.CommandResultMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandResultMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.AnnotationEventHandlerAdapter",15,"prepareReset,lambda$handle$0,lambda$canHandle$1,lambda$prepareReset$4,lambda$canHandleType$3,lambda$canHandleType$2,canHandle,handle",8,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",15,"getSequenceNumber,getType,withMetaData,getAggregateIdentifier,andMetaData",5,1,""
"org.axonframework.eventhandling.GenericTrackedDomainEventMessage",15,"trackingToken,withTrackingToken,withMetaData,andMetaData",4,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",15,"hasNextAvailable,setOnAvailableCallback,skipMessagesWithPayloadTypeOf,peek,close,access$300",7,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",15,"getId,getIndex,getSequenceIdentifier",3,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",15,"getId,getIndex,getSequenceIdentifier",3,1,""
"org.axonframework.eventhandling.tokenstore.jpa.JpaTokenStore",15,"builder",1,1,""
"org.axonframework.messaging.GenericResultMessage",15,"findExceptionResult,isExceptional",2,1,""
"org.axonframework.messaging.annotation.AnnotatedMessageHandlingMember",15,"resolveParameterValues,typeMatches,parametersMatch,checkAndRethrowForExceptionOrError",4,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",15,"canHandle,handle",2,1,""
"org.axonframework.messaging.responsetypes.AbstractResponseType",15,"isAssignableFrom,isWildcardType,isGenericAssignableFrom,isParameterizedTypeOfExpectedType,isGenericArrayType,isTypeVariable,isParameterizedType,isWildcardTypeWithMatchingUpperBound,isArray",9,1,""
"org.axonframework.modelling.saga.repository.jdbc.GenericSagaSqlSchema",15,"sql_loadSaga",1,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryUpdateMessage",15,"asUpdateMessage",1,1,""
"org.axonframework.queryhandling.QueryResponseMessage",15,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryUpdateMessage",15,"andMetaData,withMetaData",2,1,""
"org.axonframework.serialization.upcasting.event.InitialEventRepresentation",15,"getSequenceNumber",1,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",15,"newInstance,access$200,access$500,access$300,load,send,getAggregate",7,1,""
"org.axonframework.tracing.MultiSpanFactory",15,"lambda$createInternalSpan$4,lambda$registerSpanAttributeProvider$5,lambda$createRootTrace$0,lambda$createInternalSpan$3,lambda$createHandlerSpan$1,lambda$createDispatchSpan$2",6,1,""
"org.axonframework.commandhandling.distributed.DistributedCommandBus",14,"shutdownDispatching,dispatch,updateFilter,localSegment,lambda$registerDispatchInterceptor$1,intercept,lambda$subscribe$0,disconnect",8,1,""
"org.axonframework.deadline.GenericDeadlineMessage",14,"lambda$asDeadlineMessage$1,andMetaData,lambda$asDeadlineMessage$0,withMetaData,asDeadlineMessage",5,1,""
"org.axonframework.eventhandling.MultiEventHandlerInvoker",14,"lambda$performReset$2,performReset,canHandle,flatten,lambda$canHandleType$1,lambda$canHandle$0,delegates",7,1,""
"org.axonframework.messaging.GenericResultMessage",14,"asResultMessage",2,1,""
"org.axonframework.messaging.ResultMessage",14,"optionalExceptionResult,isExceptional,exceptionDetails,andMetaData,withMetaData",5,1,""
"org.axonframework.messaging.annotation.WrappedMessageHandlingMember",14,"canHandle",1,1,""
"org.axonframework.messaging.responsetypes.ConvertingResponseMessage",14,"isExceptional,optionalExceptionResult",2,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",14,"type,types",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",14,"sagaEntryEntityName,storeAssociationValue,removeAssociationValue,createSagaEntry,addNamedQueriesTo,getSagaTypeName,serializedSagaAsString,serializedObjectType,loadAssociationValues",9,1,""
"org.axonframework.modelling.saga.repository.legacyjpa.JpaSagaStore",14,"serializedObjectType,addNamedQueriesTo,storeAssociationValue,getSagaTypeName,loadAssociationValues,createSagaEntry,serializedSagaAsString,removeAssociationValue,sagaEntryEntityName",9,1,""
"org.axonframework.queryhandling.GenericQueryMessage",14,"getResponseType,andMetaData,withMetaData,getQueryName",4,1,""
"org.axonframework.queryhandling.GenericQueryResponseMessage",14,"asResponseMessage",1,1,""
"org.axonframework.queryhandling.GenericSubscriptionQueryMessage",14,"andMetaData,withMetaData",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"getResponseType,getQueryName",2,1,""
"org.axonframework.queryhandling.QueryMessage",14,"queryName",1,1,""
"org.axonframework.queryhandling.annotation.QueryHandlingMember",14,"getResultType,getQueryName",2,1,""
"org.axonframework.config.Configuration",13,"parameterResolverFactory,spanFactory,resourceInjector,handlerDefinition,eventProcessingConfiguration",5,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"describeTo",1,1,""
"org.axonframework.eventhandling.GenericDomainEventMessage",13,"andMetaData",1,1,""
"org.axonframework.eventhandling.GenericTrackedEventMessage",13,"trackingToken,withTrackingToken",2,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"merged",1,1,""
"org.axonframework.eventhandling.MergedTrackingToken",13,"isUpperSegmentAdvanced,upperSegmentToken,lowerSegmentToken,isLowerSegmentAdvanced",4,1,""
"org.axonframework.eventhandling.ReplayToken",13,"replayContext",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",13,"invokeHandlers,detectList,sequencingPolicyMatchesSegment,lambda$new$0,lambda$canHandleType$1,sequenceIdentifier,performReset,hasHandler",8,1,""
"org.axonframework.eventhandling.TrackedEventMessage",13,"trackingToken",1,1,""
"org.axonframework.eventsourcing.eventstore.SequenceEventStorageEngine",13,"lambda$readEvents$0,lambda$readEvents$1",2,1,""
"org.axonframework.messaging.deadletter.GenericDeadLetter",13,"message,diagnostics,lambda$new$0,cause,enqueuedAt",5,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"types",1,1,""
"org.axonframework.modelling.command.inspection.AggregateModel",13,"declaredType",1,1,""
"org.axonframework.modelling.saga.repository.CachingSagaStore",13,"lambda$updateSaga$4,lambda$findSagas$0,addCachedAssociations,lambda$deleteSaga$1,cacheKey,lambda$addCachedAssociations$3,lambda$removeAssociationValueFromCache$2,removeAssociationValueFromCache",8,1,""
"org.axonframework.queryhandling.GenericStreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",13,"withMetaData,andMetaData",2,1,""
"org.axonframework.queryhandling.SubscriptionQueryMessage",13,"andMetaData,withMetaData",2,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$IdentifierValidatingRepository",13,"lambda$getAggregate$4,lambda$load$2,validateIdentifier,lambda$loadOrCreate$0,lambda$newInstance$1,load,canResolve,lambda$load$3",8,1,""
"org.axonframework.test.saga.EventValidator",13,"lambda$startRecording$0,handle,createEqualToMatchers,unwrapEvent,assertPublishedEventsMatching",5,1,""
"org.axonframework.tracing.LoggingSpanFactory",13,"access$100",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"asCommandMessage",1,1,""
"org.axonframework.commandhandling.GenericCommandMessage",12,"andMetaData,withMetaData,getCommandName",3,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",12,"newInstance,load,removeFromCache,canResolve,lambda$load$0",5,1,""
"org.axonframework.eventhandling.scheduling.quartz.QuartzEventScheduler",12,"buildTrigger,buildJobDetail,lambda$schedule$0,shutdown,initialize,schedule,lambda$cancelSchedule$1",7,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",12,"lambda$readEvents$0,readEvents",2,1,""
"org.axonframework.modelling.command.LockAwareAggregate",12,"isLockHeld,getWrappedAggregate,version",3,1,""
"org.axonframework.queryhandling.StreamingQueryMessage",12,"getResponseType",1,1,""
"org.axonframework.commandhandling.CommandMessage",11,"andMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",11,"send,asRuntime,lambda$send$0",3,1,""
"org.axonframework.config.AggregateConfigurer",11,"defaultConfiguration",1,1,""
"org.axonframework.config.Configuration",11,"eventBus",1,1,""
"org.axonframework.deadline.DeadlineMessage",11,"withMetaData,andMetaData",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",11,"newInstance,load,loadOrCreate",4,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus$DisruptorRepository",11,"canResolve,send,load,lambda$send$2,lambda$send$0,lambda$send$1",6,1,""
"org.axonframework.eventhandling.DomainEventMessage",11,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",11,"getIdentifier",1,1,""
"org.axonframework.eventsourcing.eventstore.EventStore",11,"readEvents",1,1,""
"org.axonframework.messaging.ResultMessage",11,"isExceptional,exceptionResult",2,1,""
"org.axonframework.queryhandling.QueryGateway",11,"query,scatterGather,subscriptionQuery,streamingQuery",8,1,""
"org.axonframework.queryhandling.QueryMessage",11,"withMetaData,getQueryName,andMetaData",3,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"access$700",1,1,""
"org.axonframework.queryhandling.SimpleQueryBus",11,"builder",1,1,""
"org.axonframework.serialization.AbstractXStreamSerializer",11,"getConverter,typeIdentifierOf,doDeserialize,classForType,registerConverters,typeForClass,revisionOf,doSerialize",8,1,""
"org.axonframework.serialization.json.JacksonSerializer",11,"getWriter,registerConverters,getReader,typeForClass,builder,resolveClassName,classForType",7,1,""
"org.axonframework.test.aggregate.AggregateTestFixture$InMemoryRepository",11,"newInstance,load,lambda$newInstance$0,canResolve",5,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",11,"getCurrentDateTime,getScheduledItems",2,1,""
"org.axonframework.test.saga.EventValidator",11,"assertPublishedEvents,assertPublishedEventsMatching,startRecording",3,1,""
"org.axonframework.commandhandling.CommandMessage",10,"getCommandName",1,1,""
"org.axonframework.commandhandling.CommandMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.commandhandling.GenericCommandMessage",10,"asCommandMessage",1,1,""
"org.axonframework.common.caching.AbstractCacheAdapter",10,"createListenerAdapter,doRegisterListener,lambda$registerCacheEntryListener$0",3,1,""
"org.axonframework.common.caching.NoCache",10,"lambda$registerCacheEntryListener$0",1,1,""
"org.axonframework.common.caching.WeakReferenceCache",10,"access$000",1,1,""
"org.axonframework.config.AggregateConfiguration",10,"aggregateFactory,aggregateType,repository,snapshotFilter",4,1,""
"org.axonframework.config.Configuration",10,"findModules,eventProcessingConfiguration",2,1,""
"org.axonframework.eventhandling.AbstractEventProcessor",10,"processInUnitOfWork,reportIgnored,canHandle",3,1,""
"org.axonframework.eventhandling.EventMessage",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.EventMessage",10,"andMetaData,getIdentifier",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$SourceIdAwareBlockingStream",10,"nextAvailable,skipMessagesWithPayloadTypeOf",2,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",10,"eventHandlers,invokeHandlers,sequencingPolicyMatchesSegment,sequenceIdentifier,performReset",5,1,""
"org.axonframework.eventhandling.StreamingEventProcessor",10,"lambda$isReplaying$0,processingStatus,resetTokens",3,1,""
"org.axonframework.eventhandling.deadletter.jpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.JpaDeadLetter",10,"message",1,1,""
"org.axonframework.eventhandling.replay.GenericResetContext",10,"withMetaData,andMetaData",2,1,""
"org.axonframework.eventhandling.replay.ResetContext",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",10,"access$2500,access$2600",2,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",10,"access$2700,access$2800",2,1,""
"org.axonframework.messaging.AbstractMessage",10,"withMetaData",1,1,""
"org.axonframework.messaging.AbstractMessage",10,"andMetaData,withMetaData",2,1,""
"org.axonframework.messaging.MessageDecorator",10,"getMetaData,getIdentifier,getPayload,describeType,describeTo",5,1,""
"org.axonframework.messaging.ResultMessage",10,"isExceptional,exceptionResult",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",10,"get,getAll,contains,isEmpty,mergedWith",5,1,""
"org.axonframework.modelling.command.LockAwareAggregate",10,"lambda$new$0",1,1,""
"org.axonframework.serialization.JavaSerializer",10,"getSerializedType,classForType,revisionOf",3,1,""
"org.axonframework.tracing.LoggingSpanFactory",10,"access$100",1,1,""
"org.axonframework.tracing.NestingSpanFactory",10,"messageShouldBeForcedToNest",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"andMetaData",1,1,""
"org.axonframework.commandhandling.CommandMessage",9,"withMetaData",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"builder",1,1,""
"org.axonframework.commandhandling.gateway.DefaultCommandGateway",9,"access$100",1,1,""
"org.axonframework.config.Configuration",9,"start",1,1,""
"org.axonframework.config.Configuration",9,"eventProcessingConfiguration",1,1,""
"org.axonframework.config.Configurer",9,"configureEmbeddedEventStore,registerComponent",2,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,getGlobalIndex,next",3,1,""
"org.axonframework.eventhandling.GlobalSequenceTrackingToken",9,"offsetBy,lambda$covers$2,lambda$upperBound$1,lambda$lowerBound$0,compareTo",5,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",9,"createTokenSince,createTailToken,createHeadToken,sourceId,createTokenAt",5,1,""
"org.axonframework.eventhandling.TrackingEventProcessor$WrappedMessageStream",9,"nextAvailable,alterToken",2,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"access$500,access$300,access$600,access$400",4,1,""
"org.axonframework.eventhandling.scheduling.java.SimpleEventScheduler",9,"shutdown,schedule",2,1,""
"org.axonframework.eventsourcing.eventstore.EmbeddedEventStore$EventConsumer",9,"access$1900",1,1,""
"org.axonframework.eventsourcing.eventstore.legacyjpa.EmbeddedEventStore$EventConsumer",9,"access$2000",1,1,""
"org.axonframework.messaging.MessageDecorator",9,"serializePayload",1,1,""
"org.axonframework.messaging.annotation.AnnotatedHandlerAttributes",9,"lambda$constructHandlerAttributesFor$1,lambda$null$0,prefixedKey,constructHandlerAttributesFor",4,1,""
"org.axonframework.modelling.saga.Saga",9,"getSagaIdentifier",1,1,""
"org.axonframework.modelling.saga.Saga",9,"prepareReset",1,1,""
"org.axonframework.modelling.saga.repository.jdbc.JdbcSagaStore",9,"loadAssociations,sagaTypeName",2,1,""
"org.axonframework.queryhandling.QueryBus$1",9,"lambda$initialResult$0",1,1,""
"org.axonframework.queryhandling.QueryMessage",9,"queryName",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",8,"builder,dispatch",2,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",8,"toString,hashes,equals,access$100",4,1,""
"org.axonframework.config.AggregateConfiguration",8,"aggregateFactory,aggregateType",2,1,""
"org.axonframework.config.SagaConfigurer$SagaConfigurationImpl",8,"access$000",1,1,""
"org.axonframework.deadline.DeadlineManager",8,"schedule,cancelAllWithinScope",5,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlerInvoker$DisruptorRepository",8,"access$000",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$2400,access$1900,access$2200,access$2300,access$2100",5,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",8,"access$1900,access$2100",2,1,""
"org.axonframework.eventhandling.WrappedToken",8,"lowerBound,advancedTo,upperBound,unwrap",4,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"builder",1,1,""
"org.axonframework.eventsourcing.snapshotting.RevisionSnapshotFilter",8,"test",1,1,""
"org.axonframework.modelling.command.AbstractRepository",8,"prepareForCommit",1,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",8,"size,findSagas",2,1,""
"org.axonframework.serialization.ChainingConverter",8,"canConvert,registerConverter",2,1,""
"org.axonframework.test.eventscheduler.StubEventScheduler",8,"advanceToNextTrigger,advanceTimeTo",2,1,""
"org.axonframework.test.utils.RecordingCommandBus",8,"clearCommands,getDispatchedCommands",2,1,""
"org.axonframework.commandhandling.distributed.commandfilter.CommandNameFilter",7,"matches,lambda$and$97c94f44$1",2,1,""
"org.axonframework.config.AggregateConfiguration",7,"repository",1,1,""
"org.axonframework.eventhandling.DomainEventData",7,"getType,getAggregateIdentifier,getSequenceNumber",3,1,""
"org.axonframework.eventhandling.EventMessageHandler",7,"handle,supportsReset,prepareReset",3,1,""
"org.axonframework.eventhandling.MultiSourceTrackingToken",7,"advancedTo,getTokenForStream",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource",7,"access$200",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"builder",1,1,""
"org.axonframework.eventhandling.SimpleEventHandlerInvoker",7,"access$300",1,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",7,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateConstructorCommandHandler",7,"lambda$handle$0,handle,canHandle",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCreateOrUpdateCommandHandler",7,"canHandle,handle,lambda$handle$0",3,1,""
"org.axonframework.modelling.command.AggregateScopeDescriptor",7,"getIdentifier,lambda$new$0",2,1,""
"org.axonframework.modelling.saga.PayloadAssociationResolver",7,"getProperty,createProperty,lambda$getProperty$0,getHandlerName",4,1,""
"org.axonframework.test.utils.RecordingCommandBus",7,"lambda$registerHandlerInterceptor$1,lambda$subscribe$0",2,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"builder",1,1,""
"org.axonframework.commandhandling.SimpleCommandBus",6,"dispatch",1,1,""
"org.axonframework.commandhandling.distributed.ConsistentHash$ConsistentHashMember",6,"name,lambda$hashes$0",2,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",6,"isHeldBy,queuedThreads,lock",3,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"access$1900",1,1,""
"org.axonframework.disruptor.commandhandling.DisruptorCommandBus",6,"createRepository",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",6,"handle,prepareReset",2,1,""
"org.axonframework.eventhandling.MultiStreamableMessageSource$IdentifiedStreamableMessageSource",6,"sourceId,openStream",2,1,""
"org.axonframework.eventhandling.deadletter.jpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventhandling.deadletter.legacyjpa.EventMessageDeadLetterJpaConverter",6,"lambda$convert$0,lambda$convert$1",2,1,""
"org.axonframework.eventsourcing.conflictresolution.DefaultConflictResolver",6,"unexpectedEvents,lambda$unexpectedEvents$0",2,1,""
"org.axonframework.messaging.SimpleHandlerAttributes",6,"getAll,isEmpty",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$700",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,access$500,access$600",3,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$400,resolveReturnValue",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"builder,subscribe",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler",6,"access$500,access$600",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.AggregateAnnotationCommandHandler$AlwaysCreateAggregateCommandHandler",6,"canHandle,handle",2,1,""
"org.axonframework.modelling.command.Repository",6,"loadOrCreate,load,newInstance",3,1,""
"org.axonframework.modelling.saga.metamodel.AnnotationSagaMetaModelFactory$InspectedSagaModel",6,"lambda$findHandlerMethods$1,lambda$resolveAssociation$0",2,1,""
"org.axonframework.modelling.saga.repository.inmemory.InMemorySagaStore",6,"lambda$findSagas$1,lambda$findSagas$0",2,1,""
"org.axonframework.modelling.saga.repository.jpa.JpaSagaStore",6,"builder",1,1,""
"org.axonframework.queryhandling.annotation.AnnotationQueryHandlerAdapter",6,"subscribe",1,1,""
"org.axonframework.serialization.SimpleSerializedObject",6,"getData,getContentType,getType",3,1,""
"org.axonframework.serialization.SimpleSerializedType",6,"emptyType",1,1,""
"org.axonframework.test.saga.SagaTestFixture$AggregateEventPublisherImpl",6,"publish",1,1,""
"org.axonframework.common.lock.PessimisticLockFactory$DisposableLock",5,"checkForDeadlock,disposeIfUnused",2,1,""
"org.axonframework.disruptor.commandhandling.CommandHandlingEntry$RepeatingCommandHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.AbstractEventBus",5,"prepareCommit",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getType",1,1,""
"org.axonframework.eventhandling.DomainEventData",5,"getSequenceNumber",1,1,""
"org.axonframework.eventhandling.EventMessageHandler",5,"handle",1,1,""
"org.axonframework.eventhandling.GapAwareTrackingToken",5,"getGaps,getIndex",2,1,""
"org.axonframework.eventhandling.WrappedToken",5,"unwrapLowerBound",1,1,""
"org.axonframework.eventhandling.WrappedToken",5,"advance",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",5,"lambda$handle$0,lambda$process$1",2,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"currentInterceptorChain",1,1,""
"org.axonframework.messaging.annotation.InterceptorChainParameterResolverFactory",5,"callWithInterceptorChain",1,1,""
"org.axonframework.messaging.interceptors.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.messaging.interceptors.legacyvalidation.BeanValidationInterceptor",5,"validateMessage,lambda$handle$0",2,1,""
"org.axonframework.modelling.command.inspection.AnnotatedAggregateMetaModelFactory",5,"createModel",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor",5,"lambda$new$0,lambda$onMessageIngested$1",2,1,""
"org.axonframework.serialization.SimpleSerializedType",5,"lambda$new$0",1,1,""
"org.axonframework.serialization.converters.InputStreamToByteArrayConverter",5,"convert,bytesFrom",2,1,""
"org.axonframework.eventhandling.SequenceNumberParameterResolverFactory$SequenceNumberParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.TimestampParameterResolverFactory$TimestampParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.eventhandling.deadletter.DeadLetteringEventHandlerInvoker",4,"builder",1,1,""
"org.axonframework.eventhandling.gateway.DefaultEventGateway",4,"builder",1,1,""
"org.axonframework.messaging.annotation.AggregateTypeParameterResolverFactory$AggregateTypeParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.DefaultParameterResolverFactory$MetaDataParameterResolver",4,"access$000",1,1,""
"org.axonframework.messaging.annotation.MessageIdentifierParameterResolverFactory$MessageIdentifierParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.ScopeDescriptorParameterResolverFactory$ScopeDescriptorParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.annotation.SourceIdParameterResolverFactory$SourceIdParameterResolver",4,"resolveParameterValue",1,1,""
"org.axonframework.messaging.deadletter.ShouldEnqueue",4,"lambda$new$0",1,1,""
"org.axonframework.messaging.interceptors.LoggingInterceptor",4,"lambda$handle$0",1,1,""
"org.axonframework.monitoring.MultiMessageMonitor$1",4,"lambda$reportFailure$0",1,1,""
"org.axonframework.monitoring.NoOpMessageMonitor",4,"instance",1,1,""
"org.axonframework.queryhandling.FluxSinkWrapper",4,"complete",1,1,""
"org.axonframework.queryhandling.QueryBus",4,"subscriptionQuery",1,1,""
"org.axonframework.queryhandling.SinksManyWrapper",4,"complete",1,1,""
"org.axonframework.serialization.converters.BlobToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToInputStreamConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.ByteArrayToStringConverter",4,"convert",1,1,""
"org.axonframework.serialization.converters.StringToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ByteArrayToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.JsonNodeToObjectNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.json.ObjectNodeToJsonNodeConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.Dom4JToByteArrayConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToDom4jConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.InputStreamToXomConverter",4,"convert",1,1,""
"org.axonframework.serialization.xml.XomToStringConverter",4,"convert",1,1,""
