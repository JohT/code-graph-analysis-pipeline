#!/usr/bin/env bash

# Provides functions to parse strings in CSV format. 

# Note: This script was generated by Chat-GPT after some messages back and forth:
# https://chat.openai.com/share/0bd3cde7-32d0-460d-830c-79b7d00a2492

# Fail on any error ("-e" = exit on first error, "-o pipefail" exist on errors within piped commands)
set -o errexit -o pipefail

# Function to get the value of a specific column in a CSV string
# that only consists of a header line with the column names and a second line of values. 
# 
# Parameters:
#   $1: CSV string (two lines)
#   $2: Column name
get_csv_column_value() {
    csv_string="$1"
    column_name="$2"

    # Remove leading and trailing double quotes, and spaces
    csv_string=$(echo "$csv_string" | sed 's/"//g' | tr -d ' ')

    # Extract header and values
    header=$(echo "$csv_string" | head -n 1)
    values=$(echo "$csv_string" | tail -n 1)

    # Convert comma-separated strings into arrays
    IFS=', ' read -r -a header_array <<< "$header"
    IFS=', ' read -r -a values_array <<< "$values"

    # Find the index of the column
    index=-1
    for i in "${!header_array[@]}"; do
        if [ "${header_array[$i]}" = "$column_name" ]; then
            index="$i"
            break
        fi
    done

    if [ "$index" -eq -1 ]; then
        echo "Error: Column '$column_name' not found"
        exit 1
    else
        # Print the value at the corresponding index
        echo "${values_array[$index]}"
    fi
}

# Function to get the value of a specific column in a CSV string and check if its greater than zero.
# 
# Parameters:
#   $1: CSV string (two lines)
#   $2: Column name with a numeric value
is_csv_column_greater_zero() {
    columnValue=$(get_csv_column_value "${@}")
    if [[ "${columnValue}" -gt 0 ]]; then
        true;
    else
        false;
    fi
}