# This is the public version of the code graph analysis workflow that can be used by other projects.
name: Code Graph Analysis

on:
  workflow_call:
    inputs:
      analysis-name:
        description: >
          The name of the project to analyze.
          Example: MyProject-1.0.0
        required: true
        type: string
      artifacts-upload-name:
        description: >
          The name of the artifacts uploaded with 'actions/upload-artifact' 
          containing the content of the 'artifacts' directory for the analysis.
          Use it to analyze Java JARs, WARs, EARs, etc.
        required: false
        type: string
        default: ''
      sources-upload-name:
        description: >
          The name of the sources uploaded with 'actions/upload-artifact' 
          containing the content of the 'source' directory for the analysis. 
          Also supports sub-folders for multiple source code bases.
          Please use 'include-hidden-files: true' if you also want to upload the git history.
        required: false
        type: string
        default: ''
      ref:
        description: >
          The branch, tag or SHA of the code-graph-analysis-pipeline to checkout. 
          Default: "main"
        required: false
        type: string
        default: ''
      analysis-arguments:
        description: >
          The arguments to pass to the analysis script.
          Default: '--profile Neo4j-latest-low-memory'
        required: false
        type: string
        default: '--profile Neo4j-latest-low-memory'
      typescript-scan-heap-memory:
        description: >
          The heap memory size in MB to use for the TypeScript code scans (default=4096).
          This value is only used for the TypeScript code scans and is ignored for other scans.
        required: false
        type: string
        default: '4096'
      retention-days:
        description: >
          The number of days to keep the uploaded artifacts.
          Default: 5
        required: false
        type: number
        default: 5
      jupyter-pdf:
        description: >
          Enable PDF generation for Jupyter Notebooks ("true") or disable it ("false").
        required: false
        type: string
        default: 'true'
      use-venv_virtual_python_environment:
        description: >
          Use venv for virtual Python environments instead of Conda ("true") or not ("false", default).
        required: false
        type: string
        default: 'false'
    outputs:
      uploaded-analysis-results:
        description: >
          The name of the artifact uploaded with 'actions/upload-artifact' 
          containing all analysis results.
        value: ${{ jobs.analyze-code-graph.outputs.uploaded-analysis-results-artifact-name }}

jobs:
  analyze-code-graph:
    runs-on: ubuntu-22.04
    outputs:
      uploaded-analysis-results-artifact-name: ${{ steps.set-analysis-results-artifact-name.outputs.uploaded-analysis-results-artifact-name }}
    strategy:
      matrix:
        include:
        - os: ubuntu-22.04
          java: 21
          python: 3.12
          miniforge: 24.9.0-0
    steps:
      - name: Assure that either artifacts-upload-name or sources-upload-name is set
        if: inputs.artifacts-upload-name == '' && inputs.sources-upload-name == ''
        run: echo "Please specify either the input parameter 'artifacts-upload-name' or 'sources-upload-name'."; exit 1

      - name: Assemble ENVIRONMENT_INFO
        run: echo "ENVIRONMENT_INFO=-java-${{ matrix.java }}-python-${{ matrix.python }}-miniforge-${{ matrix.miniforge }}" >> $GITHUB_ENV
      
      - name: (Code Analysis Setup) Checkout code-graph-analysis-pipeline
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          repository: JohT/code-graph-analysis-pipeline
          ref: ${{ inputs.ref }}
          persist-credentials: false

      - name: (Java Setup) Java Development Kit (JDK) ${{ matrix.java }}
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4
        with:
          distribution: "temurin"
          java-version: ${{ matrix.java }}

      # "Setup Python" can be skipped if jupyter notebook analysis-results aren't needed
      - name: (Python Setup) Use version ${{ matrix.python }} with Conda package manager Miniforge
        if: inputs.use-venv_virtual_python_environment == 'false'
        id: prepare-conda-environment
        uses: conda-incubator/setup-miniconda@505e6394dae86d6a5c7fbb6e3fb8938e3e863830 # v3
        with:
          python-version: ${{ matrix.python }}
          miniforge-version: ${{ matrix.miniforge }}
          activate-environment: codegraph
          environment-file: ./conda-environment.yml
          auto-activate-base: false
          show-channel-urls: true

      - name: (Python Setup) Use version ${{ matrix.python }} with venv environment management module
        if: inputs.use-venv_virtual_python_environment == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
          cache: 'pip'

      - name: (Python Setup) Conda environment info
        if: inputs.use-venv_virtual_python_environment == 'false'
        shell: bash -el {0}
        run: | 
          conda info
          conda list
          conda config --show-sources
          conda config --show

      - name: (Code Analysis Setup) Setup Cache Analysis Downloads
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        with:
          path: ./temp/downloads
          key:
            ${{ runner.os }}-${{ hashFiles('**/*.sh') }}

      - name: (Code Analysis Setup) Generate Neo4j Initial Password
        id: generate-neo4j-initial-password
        run: |
          generated_password=$( LC_ALL=C tr -dc '[:graph:]' </dev/urandom | head -c 12; echo )
          echo "::add-mask::$generated_password"
          echo "neo4j-initial-password=$generated_password" >> "$GITHUB_OUTPUT"
            
      - name: (Code Analysis Setup) Initialize Analysis
        env:
          NEO4J_INITIAL_PASSWORD: ${{ steps.generate-neo4j-initial-password.outputs.neo4j-initial-password }}
        run: ./init.sh ${{ inputs.analysis-name }}

      - name: (Code Analysis Setup) Download sources for analysis
        if: inputs.sources-upload-name != ''
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: ${{ inputs.sources-upload-name }}
          path: temp/${{ inputs.analysis-name }}/source/${{ inputs.analysis-name }}

      - name: (Code Analysis Setup) Download artifacts for analysis
        if: inputs.artifacts-upload-name != ''
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4
        with:
          name: ${{ inputs.artifacts-upload-name }}
          path: temp/${{ inputs.analysis-name }}/artifacts

      - name: (Debug) Log folder structure of temp directory
        if: runner.debug == '1'
        working-directory: temp
        run: |
          ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'

      - name: (Code Analysis) Analyze ${{ inputs.analysis-name }}
        working-directory: temp/${{ inputs.analysis-name }}
        # Shell type can be skipped if jupyter notebook analysis-results (and therefore conda) aren't needed
        shell: bash -el {0}
        env:
          NEO4J_INITIAL_PASSWORD: ${{ steps.generate-neo4j-initial-password.outputs.neo4j-initial-password }}
          ENABLE_JUPYTER_NOTEBOOK_PDF_GENERATION: ${{ inputs.jupyter-pdf }}
          IMPORT_GIT_LOG_DATA_IF_SOURCE_IS_PRESENT: "" # Options: "none", "aggregated", "full". default = "plugin" or ""
          PREPARE_CONDA_ENVIRONMENT: "false" # Had already been done in step with id "prepare-conda-environment".
          USE_VIRTUAL_PYTHON_ENVIRONMENT_VENV: ${{ inputs.use-venv_virtual_python_environment }}
        run: |
          TYPESCRIPT_SCAN_HEAP_MEMORY=${{ inputs.typescript-scan-heap-memory }} ./../../scripts/analysis/analyze.sh ${{ inputs.analysis-arguments }}
    
      - name: Set artifact name for uploaded analysis results
        id: set-analysis-results-artifact-name
        run: echo "uploaded-analysis-results-artifact-name=code-analysis-results-${{ env.ENVIRONMENT_INFO }}" >> $GITHUB_OUTPUT

      # Upload successful analysis-results in case they are needed for troubleshooting
      - name: (Code Analysis Results) Archive successful analysis-results
        if: success()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ steps.set-analysis-results-artifact-name.outputs.uploaded-analysis-results-artifact-name }}
          path: ./temp/${{ inputs.analysis-name }}/reports/*
          if-no-files-found: error
          retention-days: ${{ inputs.retention-days }}

    
      # Upload logs and unfinished analysis-results in case of an error for troubleshooting
      - name: (Code Analysis Results) Archive failed run with logs and unfinished analysis-results
        if: failure()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: code-analysis-logs-${{ env.ENVIRONMENT_INFO }}
          path: |
            ./temp/**/runtime/*
            ./temp/**/reports/*

      # Upload Database Export
      # Only possible after an export with "./../../scripts/analysis/analyze.sh --report DatabaseCsvExport"
      # Won't be done here because of performance and security concerns
      #- name: Archive exported database
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: typescript-code-analysis-database-export-${{ matrix.java }}-python-${{ matrix.python }}-miniforge-${{ matrix.miniforge }}
      #    path: ./temp/**/import
      #    if-no-files-found: error
      #    retention-days: 5